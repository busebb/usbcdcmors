
buse_bayraktar_mors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08008a68  08008a68  00018a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b18  08008b18  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  08008b18  08008b18  00018b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b20  08008b20  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b20  08008b20  00018b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b24  08008b24  00018b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  08008b28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020144  2**0
                  CONTENTS
 10 .bss          00001d80  20000144  20000144  00020144  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001ec4  20001ec4  00020144  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a0e6  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b19  00000000  00000000  0003a25a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001748  00000000  00000000  0003dd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015b8  00000000  00000000  0003f4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000254b5  00000000  00000000  00040a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d8f2  00000000  00000000  00065f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2e26  00000000  00000000  0008381f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00156645  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062fc  00000000  00000000  00156698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000144 	.word	0x20000144
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008a50 	.word	0x08008a50

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000148 	.word	0x20000148
 80001c4:	08008a50 	.word	0x08008a50

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f000 fd32 	bl	8000f5c <HAL_Init>

  /* USER CODE BEGIN Init */
buttontouch=0;
 80004f8:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <main+0x34>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f815 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f947 	bl	8000794 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000506:	f000 f87b 	bl	8000600 <MX_I2C1_Init>
  MX_I2S3_Init();
 800050a:	f000 f8a7 	bl	800065c <MX_I2S3_Init>
  MX_SPI1_Init();
 800050e:	f000 f8d5 	bl	80006bc <MX_SPI1_Init>
  MX_TIM6_Init();
 8000512:	f000 f909 	bl	8000728 <MX_TIM6_Init>
  MX_USB_DEVICE_Init();
 8000516:	f007 fd47 	bl	8007fa8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim6);
 800051a:	4803      	ldr	r0, [pc, #12]	; (8000528 <main+0x38>)
 800051c:	f003 ffaa 	bl	8004474 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	e7fe      	b.n	8000520 <main+0x30>
 8000522:	bf00      	nop
 8000524:	200002ac 	.word	0x200002ac
 8000528:	20000254 	.word	0x20000254

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f008 fa80 	bl	8008a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b28      	ldr	r3, [pc, #160]	; (80005f8 <SystemClock_Config+0xcc>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a27      	ldr	r2, [pc, #156]	; (80005f8 <SystemClock_Config+0xcc>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b22      	ldr	r3, [pc, #136]	; (80005fc <SystemClock_Config+0xd0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <SystemClock_Config+0xd0>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b1f      	ldr	r3, [pc, #124]	; (80005fc <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000588:	2301      	movs	r3, #1
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800058c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000590:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800059c:	2308      	movs	r3, #8
 800059e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0320 	add.w	r3, r7, #32
 80005b2:	4618      	mov	r0, r3
 80005b4:	f003 f8c2 	bl	800373c <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005be:	f000 faef 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2105      	movs	r1, #5
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 fb23 	bl	8003c2c <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ec:	f000 fad8 	bl	8000ba0 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	; 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <MX_I2C1_Init+0x50>)
 8000606:	4a13      	ldr	r2, [pc, #76]	; (8000654 <MX_I2C1_Init+0x54>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_I2C1_Init+0x50>)
 800060c:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_I2C1_Init+0x58>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	; (8000650 <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <MX_I2C1_Init+0x50>)
 800061e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000622:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <MX_I2C1_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <MX_I2C1_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_I2C1_Init+0x50>)
 800063e:	f001 f81b 	bl	8001678 <HAL_I2C_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000648:	f000 faaa 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000160 	.word	0x20000160
 8000654:	40005400 	.word	0x40005400
 8000658:	000186a0 	.word	0x000186a0

0800065c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000662:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <MX_I2S3_Init+0x58>)
 8000664:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800066c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000674:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_I2S3_Init+0x54>)
 800067c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000680:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <MX_I2S3_Init+0x5c>)
 8000686:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_I2S3_Init+0x54>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_I2S3_Init+0x54>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_I2S3_Init+0x54>)
 800069c:	f001 f930 	bl	8001900 <HAL_I2S_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006a6:	f000 fa7b 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200001b4 	.word	0x200001b4
 80006b4:	40003c00 	.word	0x40003c00
 80006b8:	00017700 	.word	0x00017700

080006bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c2:	4a18      	ldr	r2, [pc, #96]	; (8000724 <MX_SPI1_Init+0x68>)
 80006c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_SPI1_Init+0x64>)
 80006c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_SPI1_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_SPI1_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_SPI1_Init+0x64>)
 80006e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_SPI1_Init+0x64>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_SPI1_Init+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_SPI1_Init+0x64>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_SPI1_Init+0x64>)
 8000708:	220a      	movs	r2, #10
 800070a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_SPI1_Init+0x64>)
 800070e:	f003 fdd9 	bl	80042c4 <HAL_SPI_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000718:	f000 fa42 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200001fc 	.word	0x200001fc
 8000724:	40013000 	.word	0x40013000

08000728 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072e:	463b      	mov	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_TIM6_Init+0x64>)
 8000738:	4a15      	ldr	r2, [pc, #84]	; (8000790 <MX_TIM6_Init+0x68>)
 800073a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 65535;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_TIM6_Init+0x64>)
 800073e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000742:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_TIM6_Init+0x64>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_TIM6_Init+0x64>)
 800074c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000750:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_TIM6_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000758:	480c      	ldr	r0, [pc, #48]	; (800078c <MX_TIM6_Init+0x64>)
 800075a:	f003 fe3c 	bl	80043d6 <HAL_TIM_Base_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000764:	f000 fa1c 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_TIM6_Init+0x64>)
 8000776:	f003 ff85 	bl	8004684 <HAL_TIMEx_MasterConfigSynchronization>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000780:	f000 fa0e 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000254 	.word	0x20000254
 8000790:	40001000 	.word	0x40001000

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4b80      	ldr	r3, [pc, #512]	; (80009b0 <MX_GPIO_Init+0x21c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a7f      	ldr	r2, [pc, #508]	; (80009b0 <MX_GPIO_Init+0x21c>)
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b7d      	ldr	r3, [pc, #500]	; (80009b0 <MX_GPIO_Init+0x21c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0310 	and.w	r3, r3, #16
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b79      	ldr	r3, [pc, #484]	; (80009b0 <MX_GPIO_Init+0x21c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a78      	ldr	r2, [pc, #480]	; (80009b0 <MX_GPIO_Init+0x21c>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b76      	ldr	r3, [pc, #472]	; (80009b0 <MX_GPIO_Init+0x21c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b72      	ldr	r3, [pc, #456]	; (80009b0 <MX_GPIO_Init+0x21c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a71      	ldr	r2, [pc, #452]	; (80009b0 <MX_GPIO_Init+0x21c>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b6f      	ldr	r3, [pc, #444]	; (80009b0 <MX_GPIO_Init+0x21c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b6b      	ldr	r3, [pc, #428]	; (80009b0 <MX_GPIO_Init+0x21c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a6a      	ldr	r2, [pc, #424]	; (80009b0 <MX_GPIO_Init+0x21c>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b68      	ldr	r3, [pc, #416]	; (80009b0 <MX_GPIO_Init+0x21c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b64      	ldr	r3, [pc, #400]	; (80009b0 <MX_GPIO_Init+0x21c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a63      	ldr	r2, [pc, #396]	; (80009b0 <MX_GPIO_Init+0x21c>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b61      	ldr	r3, [pc, #388]	; (80009b0 <MX_GPIO_Init+0x21c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b5d      	ldr	r3, [pc, #372]	; (80009b0 <MX_GPIO_Init+0x21c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a5c      	ldr	r2, [pc, #368]	; (80009b0 <MX_GPIO_Init+0x21c>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b5a      	ldr	r3, [pc, #360]	; (80009b0 <MX_GPIO_Init+0x21c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2108      	movs	r1, #8
 8000856:	4857      	ldr	r0, [pc, #348]	; (80009b4 <MX_GPIO_Init+0x220>)
 8000858:	f000 fedc 	bl	8001614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2101      	movs	r1, #1
 8000860:	4855      	ldr	r0, [pc, #340]	; (80009b8 <MX_GPIO_Init+0x224>)
 8000862:	f000 fed7 	bl	8001614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, mors_yesil_Pin|mors_turuncu_Pin|mors_kirmizi_Pin|mors_mavi_Pin
 8000866:	2200      	movs	r2, #0
 8000868:	f24f 0110 	movw	r1, #61456	; 0xf010
 800086c:	4853      	ldr	r0, [pc, #332]	; (80009bc <MX_GPIO_Init+0x228>)
 800086e:	f000 fed1 	bl	8001614 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000872:	2308      	movs	r3, #8
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	484a      	ldr	r0, [pc, #296]	; (80009b4 <MX_GPIO_Init+0x220>)
 800088a:	f000 fd0f 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : endletter_Pin */
  GPIO_InitStruct.Pin = endletter_Pin;
 800088e:	2320      	movs	r3, #32
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000892:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(endletter_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4844      	ldr	r0, [pc, #272]	; (80009b4 <MX_GPIO_Init+0x220>)
 80008a4:	f000 fd02 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	483e      	ldr	r0, [pc, #248]	; (80009b8 <MX_GPIO_Init+0x224>)
 80008c0:	f000 fcf4 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008c4:	2308      	movs	r3, #8
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d4:	2305      	movs	r3, #5
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	4836      	ldr	r0, [pc, #216]	; (80009b8 <MX_GPIO_Init+0x224>)
 80008e0:	f000 fce4 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : mavi_push_butonu_Pin */
  GPIO_InitStruct.Pin = mavi_push_butonu_Pin;
 80008e4:	2301      	movs	r3, #1
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008e8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(mavi_push_butonu_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4831      	ldr	r0, [pc, #196]	; (80009c0 <MX_GPIO_Init+0x22c>)
 80008fa:	f000 fcd7 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008fe:	2304      	movs	r3, #4
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	482c      	ldr	r0, [pc, #176]	; (80009c4 <MX_GPIO_Init+0x230>)
 8000912:	f000 fccb 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000928:	2305      	movs	r3, #5
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	4824      	ldr	r0, [pc, #144]	; (80009c4 <MX_GPIO_Init+0x230>)
 8000934:	f000 fcba 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pins : mors_yesil_Pin mors_turuncu_Pin mors_kirmizi_Pin mors_mavi_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = mors_yesil_Pin|mors_turuncu_Pin|mors_kirmizi_Pin|mors_mavi_Pin
 8000938:	f24f 0310 	movw	r3, #61456	; 0xf010
 800093c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	481a      	ldr	r0, [pc, #104]	; (80009bc <MX_GPIO_Init+0x228>)
 8000952:	f000 fcab 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000956:	2320      	movs	r3, #32
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4814      	ldr	r0, [pc, #80]	; (80009bc <MX_GPIO_Init+0x228>)
 800096a:	f000 fc9f 	bl	80012ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800096e:	2302      	movs	r3, #2
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000972:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	480c      	ldr	r0, [pc, #48]	; (80009b4 <MX_GPIO_Init+0x220>)
 8000984:	f000 fc92 	bl	80012ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2006      	movs	r0, #6
 800098e:	f000 fc56 	bl	800123e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000992:	2006      	movs	r0, #6
 8000994:	f000 fc6f 	bl	8001276 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	2017      	movs	r0, #23
 800099e:	f000 fc4e 	bl	800123e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009a2:	2017      	movs	r0, #23
 80009a4:	f000 fc67 	bl	8001276 <HAL_NVIC_EnableIRQ>

}
 80009a8:	bf00      	nop
 80009aa:	3730      	adds	r7, #48	; 0x30
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020c00 	.word	0x40020c00
 80009c0:	40020000 	.word	0x40020000
 80009c4:	40020400 	.word	0x40020400

080009c8 <sendatta>:

/* USER CODE BEGIN 4 */
void sendatta()
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
	if(buttontouch==4 || endletter)
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <sendatta+0x5c>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	d003      	beq.n	80009de <sendatta+0x16>
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <sendatta+0x60>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d01d      	beq.n	8000a1a <sendatta+0x52>
	{buttontouch=0;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <sendatta+0x5c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
    CDC_Transmit_FS((uint8_t*)*destorage, strlen(*destorage));
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <sendatta+0x64>)
 80009e6:	681c      	ldr	r4, [r3, #0]
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <sendatta+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fbf5 	bl	80001dc <strlen>
 80009f2:	4603      	mov	r3, r0
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	4619      	mov	r1, r3
 80009f8:	4620      	mov	r0, r4
 80009fa:	f007 fb93 	bl	8008124 <CDC_Transmit_FS>
	for(int j=0;j<5;j++)
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	e007      	b.n	8000a14 <sendatta+0x4c>
		storage[j]='\0';
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <sendatta+0x68>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
	for(int j=0;j<5;j++)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3301      	adds	r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	ddf4      	ble.n	8000a04 <sendatta+0x3c>
	}
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd90      	pop	{r4, r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200002ac 	.word	0x200002ac
 8000a28:	200002b0 	.word	0x200002b0
 8000a2c:	200002a8 	.word	0x200002a8
 8000a30:	200002a0 	.word	0x200002a0

08000a34 <tellsletters>:
void tellsletters(){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
  for(int i=0;i<9;i++)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	e013      	b.n	8000a68 <tellsletters+0x34>
{
    if(!strcmp(storage,formorsecode[i]))
 8000a40:	4a0d      	ldr	r2, [pc, #52]	; (8000a78 <tellsletters+0x44>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a48:	4619      	mov	r1, r3
 8000a4a:	480c      	ldr	r0, [pc, #48]	; (8000a7c <tellsletters+0x48>)
 8000a4c:	f7ff fbbc 	bl	80001c8 <strcmp>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d105      	bne.n	8000a62 <tellsletters+0x2e>
    {
        destorage[0]=lettersforcode[i];
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <tellsletters+0x4c>)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5e:	4a09      	ldr	r2, [pc, #36]	; (8000a84 <tellsletters+0x50>)
 8000a60:	6013      	str	r3, [r2, #0]
  for(int i=0;i<9;i++)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	3301      	adds	r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2b08      	cmp	r3, #8
 8000a6c:	dde8      	ble.n	8000a40 <tellsletters+0xc>
    }
}
}
 8000a6e:	bf00      	nop
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	200002a0 	.word	0x200002a0
 8000a80:	20000024 	.word	0x20000024
 8000a84:	200002a8 	.word	0x200002a8

08000a88 <dotordash>:
void dotordash(uint32_t htime)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	if(htime > 80 && htime < 600)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b50      	cmp	r3, #80	; 0x50
 8000a94:	d91d      	bls.n	8000ad2 <dotordash+0x4a>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000a9c:	d219      	bcs.n	8000ad2 <dotordash+0x4a>
	{   HAL_GPIO_WritePin(GPIOD, mors_kirmizi_Pin, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa4:	481c      	ldr	r0, [pc, #112]	; (8000b18 <dotordash+0x90>)
 8000aa6:	f000 fdb5 	bl	8001614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, mors_mavi_Pin, 1);
 8000aaa:	2201      	movs	r2, #1
 8000aac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ab0:	4819      	ldr	r0, [pc, #100]	; (8000b18 <dotordash+0x90>)
 8000ab2:	f000 fdaf 	bl	8001614 <HAL_GPIO_WritePin>
		storage[buttontouch]=dot;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <dotordash+0x94>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <dotordash+0x98>)
 8000abc:	212e      	movs	r1, #46	; 0x2e
 8000abe:	54d1      	strb	r1, [r2, r3]
		buttontouch++;
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <dotordash+0x94>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	4a15      	ldr	r2, [pc, #84]	; (8000b1c <dotordash+0x94>)
 8000ac8:	6013      	str	r3, [r2, #0]
		endletter=0;
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <dotordash+0x9c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	e019      	b.n	8000b06 <dotordash+0x7e>

	}else if(htime >599)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000ad8:	d315      	bcc.n	8000b06 <dotordash+0x7e>
	{
		HAL_GPIO_WritePin(GPIOD, mors_kirmizi_Pin, 1);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <dotordash+0x90>)
 8000ae2:	f000 fd97 	bl	8001614 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, mors_mavi_Pin, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aec:	480a      	ldr	r0, [pc, #40]	; (8000b18 <dotordash+0x90>)
 8000aee:	f000 fd91 	bl	8001614 <HAL_GPIO_WritePin>
		storage[buttontouch]=dash;
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <dotordash+0x94>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <dotordash+0x98>)
 8000af8:	212d      	movs	r1, #45	; 0x2d
 8000afa:	54d1      	strb	r1, [r2, r3]
		buttontouch++;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <dotordash+0x94>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	3301      	adds	r3, #1
 8000b02:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <dotordash+0x94>)
 8000b04:	6013      	str	r3, [r2, #0]

	}
	tellsletters();
 8000b06:	f7ff ff95 	bl	8000a34 <tellsletters>
	sendatta();
 8000b0a:	f7ff ff5d 	bl	80009c8 <sendatta>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40020c00 	.word	0x40020c00
 8000b1c:	200002ac 	.word	0x200002ac
 8000b20:	200002a0 	.word	0x200002a0
 8000b24:	200002b0 	.word	0x200002b0

08000b28 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==mavi_push_butonu_Pin)
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d116      	bne.n	8000b66 <HAL_GPIO_EXTI_Callback+0x3e>
	{   endletter=0;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <HAL_GPIO_EXTI_Callback+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
		if(HAL_GPIO_ReadPin(GPIOA, mavi_push_butonu_Pin))
 8000b3e:	2101      	movs	r1, #1
 8000b40:	4813      	ldr	r0, [pc, #76]	; (8000b90 <HAL_GPIO_EXTI_Callback+0x68>)
 8000b42:	f000 fd4f 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d003      	beq.n	8000b54 <HAL_GPIO_EXTI_Callback+0x2c>
		{
			TIM6->CNT=0;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
 8000b52:	e008      	b.n	8000b66 <HAL_GPIO_EXTI_Callback+0x3e>
		}
		else
		{
			holdtime=TIM6->CNT;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b58:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <HAL_GPIO_EXTI_Callback+0x70>)
 8000b5a:	6013      	str	r3, [r2, #0]
			dotordash(holdtime);
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_GPIO_EXTI_Callback+0x70>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff91 	bl	8000a88 <dotordash>
		}
	}
	if(GPIO_Pin==endletter_Pin){
 8000b66:	88fb      	ldrh	r3, [r7, #6]
 8000b68:	2b20      	cmp	r3, #32
 8000b6a:	d10b      	bne.n	8000b84 <HAL_GPIO_EXTI_Callback+0x5c>
		if(HAL_GPIO_ReadPin(GPIOE, endletter_Pin)){
 8000b6c:	2120      	movs	r1, #32
 8000b6e:	480b      	ldr	r0, [pc, #44]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x74>)
 8000b70:	f000 fd38 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d004      	beq.n	8000b84 <HAL_GPIO_EXTI_Callback+0x5c>
		endletter=1;
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <HAL_GPIO_EXTI_Callback+0x64>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	601a      	str	r2, [r3, #0]
		sendatta();
 8000b80:	f7ff ff22 	bl	80009c8 <sendatta>
		}
	}
}//buttoncallback
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200002b0 	.word	0x200002b0
 8000b90:	40020000 	.word	0x40020000
 8000b94:	40001000 	.word	0x40001000
 8000b98:	2000029c 	.word	0x2000029c
 8000b9c:	40021000 	.word	0x40021000

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <Error_Handler+0x8>
	...

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a08      	ldr	r2, [pc, #32]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bea:	2007      	movs	r0, #7
 8000bec:	f000 fb1c 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800

08000bfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_I2C_MspInit+0x84>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d12c      	bne.n	8000c78 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000c3a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c40:	2312      	movs	r3, #18
 8000c42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4619      	mov	r1, r3
 8000c56:	480c      	ldr	r0, [pc, #48]	; (8000c88 <HAL_I2C_MspInit+0x8c>)
 8000c58:	f000 fb28 	bl	80012ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_I2C_MspInit+0x88>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c78:	bf00      	nop
 8000c7a:	3728      	adds	r7, #40	; 0x28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40005400 	.word	0x40005400
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020400 	.word	0x40020400

08000c8c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	; 0x38
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a31      	ldr	r2, [pc, #196]	; (8000d7c <HAL_I2S_MspInit+0xf0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d15a      	bne.n	8000d72 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000cc0:	23c0      	movs	r3, #192	; 0xc0
 8000cc2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f003 f9b9 	bl	8004044 <HAL_RCCEx_PeriphCLKConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000cd8:	f7ff ff62 	bl	8000ba0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
 8000ce0:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	4a26      	ldr	r2, [pc, #152]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cea:	6413      	str	r3, [r2, #64]	; 0x40
 8000cec:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6313      	str	r3, [r2, #48]	; 0x30
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	4b19      	ldr	r3, [pc, #100]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	4a18      	ldr	r2, [pc, #96]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6313      	str	r3, [r2, #48]	; 0x30
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <HAL_I2S_MspInit+0xf4>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d30:	2310      	movs	r3, #16
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d40:	2306      	movs	r3, #6
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <HAL_I2S_MspInit+0xf8>)
 8000d4c:	f000 faae 	bl	80012ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d50:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d62:	2306      	movs	r3, #6
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4806      	ldr	r0, [pc, #24]	; (8000d88 <HAL_I2S_MspInit+0xfc>)
 8000d6e:	f000 fa9d 	bl	80012ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3738      	adds	r7, #56	; 0x38
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40003c00 	.word	0x40003c00
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40020800 	.word	0x40020800

08000d8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	; 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a19      	ldr	r2, [pc, #100]	; (8000e10 <HAL_SPI_MspInit+0x84>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d12b      	bne.n	8000e06 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000db8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_SPI_MspInit+0x88>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000de6:	23e0      	movs	r3, #224	; 0xe0
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df6:	2305      	movs	r3, #5
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_SPI_MspInit+0x8c>)
 8000e02:	f000 fa53 	bl	80012ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e06:	bf00      	nop
 8000e08:	3728      	adds	r7, #40	; 0x28
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40013000 	.word	0x40013000
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020000 	.word	0x40020000

08000e1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <HAL_TIM_Base_MspInit+0x3c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d10d      	bne.n	8000e4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_TIM_Base_MspInit+0x40>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	4a09      	ldr	r2, [pc, #36]	; (8000e5c <HAL_TIM_Base_MspInit+0x40>)
 8000e38:	f043 0310 	orr.w	r3, r3, #16
 8000e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <HAL_TIM_Base_MspInit+0x40>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40001000 	.word	0x40001000
 8000e5c:	40023800 	.word	0x40023800

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f000 f8a8 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(mavi_push_butonu_Pin);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f000 fbc5 	bl	8001648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(endletter_Pin);
 8000ec6:	2020      	movs	r0, #32
 8000ec8:	f000 fbbe 	bl	8001648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <OTG_FS_IRQHandler+0x10>)
 8000ed6:	f001 fb03 	bl	80024e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20001798 	.word	0x20001798

08000ee4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <SystemInit+0x20>)
 8000eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <SystemInit+0x20>)
 8000ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f0e:	490e      	ldr	r1, [pc, #56]	; (8000f48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f10:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f24:	4c0b      	ldr	r4, [pc, #44]	; (8000f54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f32:	f7ff ffd7 	bl	8000ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f36:	f007 fd5f 	bl	80089f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3a:	f7ff fad9 	bl	80004f0 <main>
  bx  lr    
 8000f3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f48:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8000f4c:	08008b28 	.word	0x08008b28
  ldr r2, =_sbss
 8000f50:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8000f54:	20001ec4 	.word	0x20001ec4

08000f58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC_IRQHandler>
	...

08000f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <HAL_Init+0x40>)
 8000f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_Init+0x40>)
 8000f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_Init+0x40>)
 8000f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f000 f94f 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 f808 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f7ff fe0c 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023c00 	.word	0x40023c00

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f967 	bl	8001292 <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f000 f92f 	bl	800123e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000048 	.word	0x20000048
 8000ff8:	20000050 	.word	0x20000050
 8000ffc:	2000004c 	.word	0x2000004c

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000050 	.word	0x20000050
 8001024:	200002b4 	.word	0x200002b4

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	200002b4 	.word	0x200002b4

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffee 	bl	8001028 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_Delay+0x44>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffde 	bl	8001028 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000050 	.word	0x20000050

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db0b      	blt.n	8001116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	4907      	ldr	r1, [pc, #28]	; (8001124 <__NVIC_EnableIRQ+0x38>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	2001      	movs	r0, #1
 800110e:	fa00 f202 	lsl.w	r2, r0, r2
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e100 	.word	0xe000e100

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	; (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	; (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	; 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f4:	d301      	bcc.n	80011fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00f      	b.n	800121a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <SysTick_Config+0x40>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001202:	210f      	movs	r1, #15
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f7ff ff8e 	bl	8001128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <SysTick_Config+0x40>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SysTick_Config+0x40>)
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	e000e010 	.word	0xe000e010

08001228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff29 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001250:	f7ff ff3e 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 8001254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff ff8e 	bl	800117c <NVIC_EncodePriority>
 8001260:	4602      	mov	r2, r0
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff5d 	bl	8001128 <__NVIC_SetPriority>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff31 	bl	80010ec <__NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffa2 	bl	80011e4 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
 80012c6:	e16b      	b.n	80015a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	f040 815a 	bne.w	800159a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d005      	beq.n	80012fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d130      	bne.n	8001360 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001334:	2201      	movs	r2, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	f003 0201 	and.w	r2, r3, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b03      	cmp	r3, #3
 800136a:	d017      	beq.n	800139c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	2203      	movs	r2, #3
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d123      	bne.n	80013f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	08da      	lsrs	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3208      	adds	r2, #8
 80013b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	220f      	movs	r2, #15
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	691a      	ldr	r2, [r3, #16]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4313      	orrs	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	08da      	lsrs	r2, r3, #3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3208      	adds	r2, #8
 80013ea:	69b9      	ldr	r1, [r7, #24]
 80013ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4013      	ands	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0203 	and.w	r2, r3, #3
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800142c:	2b00      	cmp	r3, #0
 800142e:	f000 80b4 	beq.w	800159a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b60      	ldr	r3, [pc, #384]	; (80015b8 <HAL_GPIO_Init+0x30c>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a5f      	ldr	r2, [pc, #380]	; (80015b8 <HAL_GPIO_Init+0x30c>)
 800143c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b5d      	ldr	r3, [pc, #372]	; (80015b8 <HAL_GPIO_Init+0x30c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800144e:	4a5b      	ldr	r2, [pc, #364]	; (80015bc <HAL_GPIO_Init+0x310>)
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	089b      	lsrs	r3, r3, #2
 8001454:	3302      	adds	r3, #2
 8001456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	220f      	movs	r2, #15
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4013      	ands	r3, r2
 8001470:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a52      	ldr	r2, [pc, #328]	; (80015c0 <HAL_GPIO_Init+0x314>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d02b      	beq.n	80014d2 <HAL_GPIO_Init+0x226>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a51      	ldr	r2, [pc, #324]	; (80015c4 <HAL_GPIO_Init+0x318>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d025      	beq.n	80014ce <HAL_GPIO_Init+0x222>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a50      	ldr	r2, [pc, #320]	; (80015c8 <HAL_GPIO_Init+0x31c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d01f      	beq.n	80014ca <HAL_GPIO_Init+0x21e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4f      	ldr	r2, [pc, #316]	; (80015cc <HAL_GPIO_Init+0x320>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d019      	beq.n	80014c6 <HAL_GPIO_Init+0x21a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4e      	ldr	r2, [pc, #312]	; (80015d0 <HAL_GPIO_Init+0x324>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0x216>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4d      	ldr	r2, [pc, #308]	; (80015d4 <HAL_GPIO_Init+0x328>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00d      	beq.n	80014be <HAL_GPIO_Init+0x212>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4c      	ldr	r2, [pc, #304]	; (80015d8 <HAL_GPIO_Init+0x32c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d007      	beq.n	80014ba <HAL_GPIO_Init+0x20e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4b      	ldr	r2, [pc, #300]	; (80015dc <HAL_GPIO_Init+0x330>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_GPIO_Init+0x20a>
 80014b2:	2307      	movs	r3, #7
 80014b4:	e00e      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014b6:	2308      	movs	r3, #8
 80014b8:	e00c      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014ba:	2306      	movs	r3, #6
 80014bc:	e00a      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014be:	2305      	movs	r3, #5
 80014c0:	e008      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x228>
 80014d2:	2300      	movs	r3, #0
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4093      	lsls	r3, r2
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e4:	4935      	ldr	r1, [pc, #212]	; (80015bc <HAL_GPIO_Init+0x310>)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <HAL_GPIO_Init+0x334>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001516:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800151c:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <HAL_GPIO_Init+0x334>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001540:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156a:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <HAL_GPIO_Init+0x334>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001594:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <HAL_GPIO_Init+0x334>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3301      	adds	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	2b0f      	cmp	r3, #15
 80015a4:	f67f ae90 	bls.w	80012c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40013800 	.word	0x40013800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40021400 	.word	0x40021400
 80015d8:	40021800 	.word	0x40021800
 80015dc:	40021c00 	.word	0x40021c00
 80015e0:	40013c00 	.word	0x40013c00

080015e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e001      	b.n	8001606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	807b      	strh	r3, [r7, #2]
 8001620:	4613      	mov	r3, r2
 8001622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001624:	787b      	ldrb	r3, [r7, #1]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800162a:	887a      	ldrh	r2, [r7, #2]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001630:	e003      	b.n	800163a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001632:	887b      	ldrh	r3, [r7, #2]
 8001634:	041a      	lsls	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	619a      	str	r2, [r3, #24]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
	...

08001648 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d006      	beq.n	800166c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fa5e 	bl	8000b28 <HAL_GPIO_EXTI_Callback>
  }
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40013c00 	.word	0x40013c00

08001678 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e12b      	b.n	80018e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d106      	bne.n	80016a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff faac 	bl	8000bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2224      	movs	r2, #36	; 0x24
 80016a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 0201 	bic.w	r2, r2, #1
 80016ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016dc:	f002 fc9e 	bl	800401c <HAL_RCC_GetPCLK1Freq>
 80016e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	4a81      	ldr	r2, [pc, #516]	; (80018ec <HAL_I2C_Init+0x274>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d807      	bhi.n	80016fc <HAL_I2C_Init+0x84>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4a80      	ldr	r2, [pc, #512]	; (80018f0 <HAL_I2C_Init+0x278>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	bf94      	ite	ls
 80016f4:	2301      	movls	r3, #1
 80016f6:	2300      	movhi	r3, #0
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	e006      	b.n	800170a <HAL_I2C_Init+0x92>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4a7d      	ldr	r2, [pc, #500]	; (80018f4 <HAL_I2C_Init+0x27c>)
 8001700:	4293      	cmp	r3, r2
 8001702:	bf94      	ite	ls
 8001704:	2301      	movls	r3, #1
 8001706:	2300      	movhi	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e0e7      	b.n	80018e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4a78      	ldr	r2, [pc, #480]	; (80018f8 <HAL_I2C_Init+0x280>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	0c9b      	lsrs	r3, r3, #18
 800171c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68ba      	ldr	r2, [r7, #8]
 800172e:	430a      	orrs	r2, r1
 8001730:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	4a6a      	ldr	r2, [pc, #424]	; (80018ec <HAL_I2C_Init+0x274>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d802      	bhi.n	800174c <HAL_I2C_Init+0xd4>
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	3301      	adds	r3, #1
 800174a:	e009      	b.n	8001760 <HAL_I2C_Init+0xe8>
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001752:	fb02 f303 	mul.w	r3, r2, r3
 8001756:	4a69      	ldr	r2, [pc, #420]	; (80018fc <HAL_I2C_Init+0x284>)
 8001758:	fba2 2303 	umull	r2, r3, r2, r3
 800175c:	099b      	lsrs	r3, r3, #6
 800175e:	3301      	adds	r3, #1
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	430b      	orrs	r3, r1
 8001766:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001772:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	495c      	ldr	r1, [pc, #368]	; (80018ec <HAL_I2C_Init+0x274>)
 800177c:	428b      	cmp	r3, r1
 800177e:	d819      	bhi.n	80017b4 <HAL_I2C_Init+0x13c>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	1e59      	subs	r1, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fbb1 f3f3 	udiv	r3, r1, r3
 800178e:	1c59      	adds	r1, r3, #1
 8001790:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001794:	400b      	ands	r3, r1
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00a      	beq.n	80017b0 <HAL_I2C_Init+0x138>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1e59      	subs	r1, r3, #1
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80017a8:	3301      	adds	r3, #1
 80017aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ae:	e051      	b.n	8001854 <HAL_I2C_Init+0x1dc>
 80017b0:	2304      	movs	r3, #4
 80017b2:	e04f      	b.n	8001854 <HAL_I2C_Init+0x1dc>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d111      	bne.n	80017e0 <HAL_I2C_Init+0x168>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1e58      	subs	r0, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6859      	ldr	r1, [r3, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	440b      	add	r3, r1
 80017ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	bf0c      	ite	eq
 80017d8:	2301      	moveq	r3, #1
 80017da:	2300      	movne	r3, #0
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	e012      	b.n	8001806 <HAL_I2C_Init+0x18e>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1e58      	subs	r0, r3, #1
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6859      	ldr	r1, [r3, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	0099      	lsls	r1, r3, #2
 80017f0:	440b      	add	r3, r1
 80017f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f6:	3301      	adds	r3, #1
 80017f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf0c      	ite	eq
 8001800:	2301      	moveq	r3, #1
 8001802:	2300      	movne	r3, #0
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_I2C_Init+0x196>
 800180a:	2301      	movs	r3, #1
 800180c:	e022      	b.n	8001854 <HAL_I2C_Init+0x1dc>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10e      	bne.n	8001834 <HAL_I2C_Init+0x1bc>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1e58      	subs	r0, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6859      	ldr	r1, [r3, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	440b      	add	r3, r1
 8001824:	fbb0 f3f3 	udiv	r3, r0, r3
 8001828:	3301      	adds	r3, #1
 800182a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800182e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001832:	e00f      	b.n	8001854 <HAL_I2C_Init+0x1dc>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1e58      	subs	r0, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	0099      	lsls	r1, r3, #2
 8001844:	440b      	add	r3, r1
 8001846:	fbb0 f3f3 	udiv	r3, r0, r3
 800184a:	3301      	adds	r3, #1
 800184c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001854:	6879      	ldr	r1, [r7, #4]
 8001856:	6809      	ldr	r1, [r1, #0]
 8001858:	4313      	orrs	r3, r2
 800185a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69da      	ldr	r2, [r3, #28]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	431a      	orrs	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001882:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6911      	ldr	r1, [r2, #16]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	68d2      	ldr	r2, [r2, #12]
 800188e:	4311      	orrs	r1, r2
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	430b      	orrs	r3, r1
 8001896:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	695a      	ldr	r2, [r3, #20]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0201 	orr.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2220      	movs	r2, #32
 80018ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	000186a0 	.word	0x000186a0
 80018f0:	001e847f 	.word	0x001e847f
 80018f4:	003d08ff 	.word	0x003d08ff
 80018f8:	431bde83 	.word	0x431bde83
 80018fc:	10624dd3 	.word	0x10624dd3

08001900 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e128      	b.n	8001b64 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a90      	ldr	r2, [pc, #576]	; (8001b6c <HAL_I2S_Init+0x26c>)
 800192a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff f9ad 	bl	8000c8c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2202      	movs	r2, #2
 8001936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001948:	f023 030f 	bic.w	r3, r3, #15
 800194c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2202      	movs	r2, #2
 8001954:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d060      	beq.n	8001a20 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001966:	2310      	movs	r3, #16
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	e001      	b.n	8001970 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800196c:	2320      	movs	r3, #32
 800196e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b20      	cmp	r3, #32
 8001976:	d802      	bhi.n	800197e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800197e:	2001      	movs	r0, #1
 8001980:	f002 fc42 	bl	8004208 <HAL_RCCEx_GetPeriphCLKFreq>
 8001984:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800198e:	d125      	bne.n	80019dc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d010      	beq.n	80019ba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	fbb2 f2f3 	udiv	r2, r2, r3
 80019a2:	4613      	mov	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	461a      	mov	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b4:	3305      	adds	r3, #5
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	e01f      	b.n	80019fa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	461a      	mov	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	3305      	adds	r3, #5
 80019d8:	613b      	str	r3, [r7, #16]
 80019da:	e00e      	b.n	80019fa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	461a      	mov	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f6:	3305      	adds	r3, #5
 80019f8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4a5c      	ldr	r2, [pc, #368]	; (8001b70 <HAL_I2S_Init+0x270>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	08db      	lsrs	r3, r3, #3
 8001a04:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	085b      	lsrs	r3, r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	e003      	b.n	8001a28 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001a20:	2302      	movs	r3, #2
 8001a22:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d902      	bls.n	8001a34 <HAL_I2S_Init+0x134>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	2bff      	cmp	r3, #255	; 0xff
 8001a32:	d907      	bls.n	8001a44 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	f043 0210 	orr.w	r2, r3, #16
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e08f      	b.n	8001b64 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	ea42 0103 	orr.w	r1, r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a62:	f023 030f 	bic.w	r3, r3, #15
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6851      	ldr	r1, [r2, #4]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6892      	ldr	r2, [r2, #8]
 8001a6e:	4311      	orrs	r1, r2
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	68d2      	ldr	r2, [r2, #12]
 8001a74:	4311      	orrs	r1, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6992      	ldr	r2, [r2, #24]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a86:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d161      	bne.n	8001b54 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a38      	ldr	r2, [pc, #224]	; (8001b74 <HAL_I2S_Init+0x274>)
 8001a94:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a37      	ldr	r2, [pc, #220]	; (8001b78 <HAL_I2S_Init+0x278>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d101      	bne.n	8001aa4 <HAL_I2S_Init+0x1a4>
 8001aa0:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <HAL_I2S_Init+0x27c>)
 8001aa2:	e001      	b.n	8001aa8 <HAL_I2S_Init+0x1a8>
 8001aa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	4932      	ldr	r1, [pc, #200]	; (8001b78 <HAL_I2S_Init+0x278>)
 8001ab0:	428a      	cmp	r2, r1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_I2S_Init+0x1b8>
 8001ab4:	4a31      	ldr	r2, [pc, #196]	; (8001b7c <HAL_I2S_Init+0x27c>)
 8001ab6:	e001      	b.n	8001abc <HAL_I2S_Init+0x1bc>
 8001ab8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001abc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ac0:	f023 030f 	bic.w	r3, r3, #15
 8001ac4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a2b      	ldr	r2, [pc, #172]	; (8001b78 <HAL_I2S_Init+0x278>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d101      	bne.n	8001ad4 <HAL_I2S_Init+0x1d4>
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <HAL_I2S_Init+0x27c>)
 8001ad2:	e001      	b.n	8001ad8 <HAL_I2S_Init+0x1d8>
 8001ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ad8:	2202      	movs	r2, #2
 8001ada:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a25      	ldr	r2, [pc, #148]	; (8001b78 <HAL_I2S_Init+0x278>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_I2S_Init+0x1ea>
 8001ae6:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <HAL_I2S_Init+0x27c>)
 8001ae8:	e001      	b.n	8001aee <HAL_I2S_Init+0x1ee>
 8001aea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001afa:	d003      	beq.n	8001b04 <HAL_I2S_Init+0x204>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d103      	bne.n	8001b0c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001b04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	e001      	b.n	8001b10 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001b24:	4313      	orrs	r3, r2
 8001b26:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	897b      	ldrh	r3, [r7, #10]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b3c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a0d      	ldr	r2, [pc, #52]	; (8001b78 <HAL_I2S_Init+0x278>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d101      	bne.n	8001b4c <HAL_I2S_Init+0x24c>
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_I2S_Init+0x27c>)
 8001b4a:	e001      	b.n	8001b50 <HAL_I2S_Init+0x250>
 8001b4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b50:	897a      	ldrh	r2, [r7, #10]
 8001b52:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3720      	adds	r7, #32
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	08001c77 	.word	0x08001c77
 8001b70:	cccccccd 	.word	0xcccccccd
 8001b74:	08001d8d 	.word	0x08001d8d
 8001b78:	40003800 	.word	0x40003800
 8001b7c:	40003400 	.word	0x40003400

08001b80 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	881a      	ldrh	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	1c9a      	adds	r2, r3, #2
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	3b01      	subs	r3, #1
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10e      	bne.n	8001c10 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c00:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ffb8 	bl	8001b80 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	b292      	uxth	r2, r2
 8001c2c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	1c9a      	adds	r2, r3, #2
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10e      	bne.n	8001c6e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c5e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff93 	bl	8001b94 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b086      	sub	sp, #24
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d13a      	bne.n	8001d08 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d109      	bne.n	8001cb0 <I2S_IRQHandler+0x3a>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca6:	2b40      	cmp	r3, #64	; 0x40
 8001ca8:	d102      	bne.n	8001cb0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff ffb4 	bl	8001c18 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb6:	2b40      	cmp	r3, #64	; 0x40
 8001cb8:	d126      	bne.n	8001d08 <I2S_IRQHandler+0x92>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	d11f      	bne.n	8001d08 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cd6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001cd8:	2300      	movs	r3, #0
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f043 0202 	orr.w	r2, r3, #2
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ff50 	bl	8001ba8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d136      	bne.n	8001d82 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d109      	bne.n	8001d32 <I2S_IRQHandler+0xbc>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d28:	2b80      	cmp	r3, #128	; 0x80
 8001d2a:	d102      	bne.n	8001d32 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff45 	bl	8001bbc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d122      	bne.n	8001d82 <I2S_IRQHandler+0x10c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d11b      	bne.n	8001d82 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d58:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	f043 0204 	orr.w	r2, r3, #4
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ff13 	bl	8001ba8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d82:	bf00      	nop
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a92      	ldr	r2, [pc, #584]	; (8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d101      	bne.n	8001daa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001da6:	4b92      	ldr	r3, [pc, #584]	; (8001ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001da8:	e001      	b.n	8001dae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001daa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a8b      	ldr	r2, [pc, #556]	; (8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d101      	bne.n	8001dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001dc4:	4b8a      	ldr	r3, [pc, #552]	; (8001ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001dc6:	e001      	b.n	8001dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001dc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd8:	d004      	beq.n	8001de4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f040 8099 	bne.w	8001f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d107      	bne.n	8001dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f925 	bl	8002048 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d107      	bne.n	8001e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d002      	beq.n	8001e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f9c8 	bl	80021a8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1e:	2b40      	cmp	r3, #64	; 0x40
 8001e20:	d13a      	bne.n	8001e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	f003 0320 	and.w	r3, r3, #32
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d035      	beq.n	8001e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a6e      	ldr	r2, [pc, #440]	; (8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001e36:	4b6e      	ldr	r3, [pc, #440]	; (8001ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e38:	e001      	b.n	8001e3e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001e3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4969      	ldr	r1, [pc, #420]	; (8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e46:	428b      	cmp	r3, r1
 8001e48:	d101      	bne.n	8001e4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001e4a:	4b69      	ldr	r3, [pc, #420]	; (8001ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e4c:	e001      	b.n	8001e52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001e4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e56:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e66:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	f043 0202 	orr.w	r2, r3, #2
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fe88 	bl	8001ba8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b08      	cmp	r3, #8
 8001ea0:	f040 80c3 	bne.w	800202a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 80bd 	beq.w	800202a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ebe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a49      	ldr	r2, [pc, #292]	; (8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d101      	bne.n	8001ece <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001eca:	4b49      	ldr	r3, [pc, #292]	; (8001ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ecc:	e001      	b.n	8001ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4944      	ldr	r1, [pc, #272]	; (8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001eda:	428b      	cmp	r3, r1
 8001edc:	d101      	bne.n	8001ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001ede:	4b44      	ldr	r3, [pc, #272]	; (8001ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ee0:	e001      	b.n	8001ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001ee2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ee6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001eea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f043 0204 	orr.w	r2, r3, #4
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff fe4a 	bl	8001ba8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f14:	e089      	b.n	800202a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d107      	bne.n	8001f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8be 	bl	80020ac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d107      	bne.n	8001f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f8fd 	bl	8002144 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f50:	2b40      	cmp	r3, #64	; 0x40
 8001f52:	d12f      	bne.n	8001fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f003 0320 	and.w	r3, r3, #32
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d02a      	beq.n	8001fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f6c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1e      	ldr	r2, [pc, #120]	; (8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001f78:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f7a:	e001      	b.n	8001f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001f7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4919      	ldr	r1, [pc, #100]	; (8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f88:	428b      	cmp	r3, r1
 8001f8a:	d101      	bne.n	8001f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001f8c:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f8e:	e001      	b.n	8001f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001f90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f98:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	f043 0202 	orr.w	r2, r3, #2
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff fdfa 	bl	8001ba8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d136      	bne.n	800202c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	f003 0320 	and.w	r3, r3, #32
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d031      	beq.n	800202c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001fd2:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fd4:	e001      	b.n	8001fda <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001fd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4902      	ldr	r1, [pc, #8]	; (8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fe2:	428b      	cmp	r3, r1
 8001fe4:	d106      	bne.n	8001ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001fe6:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fe8:	e006      	b.n	8001ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001fea:	bf00      	nop
 8001fec:	40003800 	.word	0x40003800
 8001ff0:	40003400 	.word	0x40003400
 8001ff4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ff8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ffc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800200c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f043 0204 	orr.w	r2, r3, #4
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff fdc0 	bl	8001ba8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002028:	e000      	b.n	800202c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800202a:	bf00      	nop
}
 800202c:	bf00      	nop
 800202e:	3720      	adds	r7, #32
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	1c99      	adds	r1, r3, #2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6251      	str	r1, [r2, #36]	; 0x24
 800205a:	881a      	ldrh	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002066:	b29b      	uxth	r3, r3
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d113      	bne.n	80020a2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002088:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800208e:	b29b      	uxth	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d106      	bne.n	80020a2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ffc9 	bl	8002034 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	1c99      	adds	r1, r3, #2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6251      	str	r1, [r2, #36]	; 0x24
 80020be:	8819      	ldrh	r1, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1d      	ldr	r2, [pc, #116]	; (800213c <I2SEx_TxISR_I2SExt+0x90>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d101      	bne.n	80020ce <I2SEx_TxISR_I2SExt+0x22>
 80020ca:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <I2SEx_TxISR_I2SExt+0x94>)
 80020cc:	e001      	b.n	80020d2 <I2SEx_TxISR_I2SExt+0x26>
 80020ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020d2:	460a      	mov	r2, r1
 80020d4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020da:	b29b      	uxth	r3, r3
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d121      	bne.n	8002132 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a12      	ldr	r2, [pc, #72]	; (800213c <I2SEx_TxISR_I2SExt+0x90>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d101      	bne.n	80020fc <I2SEx_TxISR_I2SExt+0x50>
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <I2SEx_TxISR_I2SExt+0x94>)
 80020fa:	e001      	b.n	8002100 <I2SEx_TxISR_I2SExt+0x54>
 80020fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	490d      	ldr	r1, [pc, #52]	; (800213c <I2SEx_TxISR_I2SExt+0x90>)
 8002108:	428b      	cmp	r3, r1
 800210a:	d101      	bne.n	8002110 <I2SEx_TxISR_I2SExt+0x64>
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <I2SEx_TxISR_I2SExt+0x94>)
 800210e:	e001      	b.n	8002114 <I2SEx_TxISR_I2SExt+0x68>
 8002110:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002114:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002118:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800211e:	b29b      	uxth	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d106      	bne.n	8002132 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ff81 	bl	8002034 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40003800 	.word	0x40003800
 8002140:	40003400 	.word	0x40003400

08002144 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68d8      	ldr	r0, [r3, #12]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	1c99      	adds	r1, r3, #2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800215c:	b282      	uxth	r2, r0
 800215e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002172:	b29b      	uxth	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d113      	bne.n	80021a0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002186:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800218c:	b29b      	uxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d106      	bne.n	80021a0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ff4a 	bl	8002034 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021a0:	bf00      	nop
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a20      	ldr	r2, [pc, #128]	; (8002238 <I2SEx_RxISR_I2SExt+0x90>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d101      	bne.n	80021be <I2SEx_RxISR_I2SExt+0x16>
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <I2SEx_RxISR_I2SExt+0x94>)
 80021bc:	e001      	b.n	80021c2 <I2SEx_RxISR_I2SExt+0x1a>
 80021be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021c2:	68d8      	ldr	r0, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	1c99      	adds	r1, r3, #2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	62d1      	str	r1, [r2, #44]	; 0x2c
 80021ce:	b282      	uxth	r2, r0
 80021d0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d121      	bne.n	800222e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <I2SEx_RxISR_I2SExt+0x90>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d101      	bne.n	80021f8 <I2SEx_RxISR_I2SExt+0x50>
 80021f4:	4b11      	ldr	r3, [pc, #68]	; (800223c <I2SEx_RxISR_I2SExt+0x94>)
 80021f6:	e001      	b.n	80021fc <I2SEx_RxISR_I2SExt+0x54>
 80021f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	490d      	ldr	r1, [pc, #52]	; (8002238 <I2SEx_RxISR_I2SExt+0x90>)
 8002204:	428b      	cmp	r3, r1
 8002206:	d101      	bne.n	800220c <I2SEx_RxISR_I2SExt+0x64>
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <I2SEx_RxISR_I2SExt+0x94>)
 800220a:	e001      	b.n	8002210 <I2SEx_RxISR_I2SExt+0x68>
 800220c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002210:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002214:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d106      	bne.n	800222e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ff03 	bl	8002034 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40003800 	.word	0x40003800
 800223c:	40003400 	.word	0x40003400

08002240 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002242:	b08f      	sub	sp, #60	; 0x3c
 8002244:	af0a      	add	r7, sp, #40	; 0x28
 8002246:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e10f      	b.n	8002472 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d106      	bne.n	8002272 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f006 f8a1 	bl	80083b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2203      	movs	r2, #3
 8002276:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f002 fb88 	bl	80049a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	687e      	ldr	r6, [r7, #4]
 800229e:	466d      	mov	r5, sp
 80022a0:	f106 0410 	add.w	r4, r6, #16
 80022a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80022b4:	1d33      	adds	r3, r6, #4
 80022b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b8:	6838      	ldr	r0, [r7, #0]
 80022ba:	f002 fa5f 	bl	800477c <USB_CoreInit>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d005      	beq.n	80022d0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0d0      	b.n	8002472 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f002 fb76 	bl	80049c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	e04a      	b.n	8002378 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4413      	add	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	333d      	adds	r3, #61	; 0x3d
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	333c      	adds	r3, #60	; 0x3c
 8002306:	7bfa      	ldrb	r2, [r7, #15]
 8002308:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	b298      	uxth	r0, r3
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	3344      	adds	r3, #68	; 0x44
 800231e:	4602      	mov	r2, r0
 8002320:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	3340      	adds	r3, #64	; 0x40
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	4413      	add	r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	3348      	adds	r3, #72	; 0x48
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	334c      	adds	r3, #76	; 0x4c
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	3354      	adds	r3, #84	; 0x54
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	3301      	adds	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	429a      	cmp	r2, r3
 8002380:	d3af      	bcc.n	80022e2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]
 8002386:	e044      	b.n	8002412 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	3301      	adds	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
 8002412:	7bfa      	ldrb	r2, [r7, #15]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	429a      	cmp	r2, r3
 800241a:	d3b5      	bcc.n	8002388 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	603b      	str	r3, [r7, #0]
 8002422:	687e      	ldr	r6, [r7, #4]
 8002424:	466d      	mov	r5, sp
 8002426:	f106 0410 	add.w	r4, r6, #16
 800242a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800242c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002432:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002436:	e885 0003 	stmia.w	r5, {r0, r1}
 800243a:	1d33      	adds	r3, r6, #4
 800243c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800243e:	6838      	ldr	r0, [r7, #0]
 8002440:	f002 fb0e 	bl	8004a60 <USB_DevInit>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d005      	beq.n	8002456 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2202      	movs	r2, #2
 800244e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e00d      	b.n	8002472 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f003 fc5d 	bl	8005d2a <USB_DevDisconnect>

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3714      	adds	r7, #20
 8002476:	46bd      	mov	sp, r7
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800247a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_PCD_Start+0x1c>
 8002492:	2302      	movs	r3, #2
 8002494:	e020      	b.n	80024d8 <HAL_PCD_Start+0x5e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d109      	bne.n	80024ba <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d005      	beq.n	80024ba <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f002 fa60 	bl	8004984 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f003 fc0d 	bl	8005ce8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b08d      	sub	sp, #52	; 0x34
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f003 fccb 	bl	8005e92 <USB_GetMode>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f040 848a 	bne.w	8002e18 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f003 fc2f 	bl	8005d6c <USB_ReadInterrupts>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	f000 8480 	beq.w	8002e16 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f003 fc1c 	bl	8005d6c <USB_ReadInterrupts>
 8002534:	4603      	mov	r3, r0
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b02      	cmp	r3, #2
 800253c:	d107      	bne.n	800254e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f002 0202 	and.w	r2, r2, #2
 800254c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f003 fc0a 	bl	8005d6c <USB_ReadInterrupts>
 8002558:	4603      	mov	r3, r0
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b10      	cmp	r3, #16
 8002560:	d161      	bne.n	8002626 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0210 	bic.w	r2, r2, #16
 8002570:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	f003 020f 	and.w	r2, r3, #15
 800257e:	4613      	mov	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	3304      	adds	r3, #4
 8002590:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	0c5b      	lsrs	r3, r3, #17
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	2b02      	cmp	r3, #2
 800259c:	d124      	bne.n	80025e8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d035      	beq.n	8002616 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80025b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	6a38      	ldr	r0, [r7, #32]
 80025be:	f003 fa41 	bl	8005a44 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ce:	441a      	add	r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	6a1a      	ldr	r2, [r3, #32]
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025e0:	441a      	add	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	621a      	str	r2, [r3, #32]
 80025e6:	e016      	b.n	8002616 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	0c5b      	lsrs	r3, r3, #17
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	2b06      	cmp	r3, #6
 80025f2:	d110      	bne.n	8002616 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025fa:	2208      	movs	r2, #8
 80025fc:	4619      	mov	r1, r3
 80025fe:	6a38      	ldr	r0, [r7, #32]
 8002600:	f003 fa20 	bl	8005a44 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	6a1a      	ldr	r2, [r3, #32]
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	091b      	lsrs	r3, r3, #4
 800260c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002610:	441a      	add	r2, r3
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699a      	ldr	r2, [r3, #24]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0210 	orr.w	r2, r2, #16
 8002624:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f003 fb9e 	bl	8005d6c <USB_ReadInterrupts>
 8002630:	4603      	mov	r3, r0
 8002632:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002636:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800263a:	f040 80a7 	bne.w	800278c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f003 fba3 	bl	8005d92 <USB_ReadDevAllOutEpInterrupt>
 800264c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800264e:	e099      	b.n	8002784 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 808e 	beq.w	8002778 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	4611      	mov	r1, r2
 8002666:	4618      	mov	r0, r3
 8002668:	f003 fbc7 	bl	8005dfa <USB_ReadDevOutEPInterrupt>
 800266c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	f003 0301 	and.w	r3, r3, #1
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00c      	beq.n	8002692 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	4413      	add	r3, r2
 8002680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002684:	461a      	mov	r2, r3
 8002686:	2301      	movs	r3, #1
 8002688:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800268a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 fec3 	bl	8003418 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00c      	beq.n	80026b6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a8:	461a      	mov	r2, r3
 80026aa:	2308      	movs	r3, #8
 80026ac:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80026ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 ff99 	bl	80035e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026cc:	461a      	mov	r2, r3
 80026ce:	2310      	movs	r3, #16
 80026d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d030      	beq.n	800273e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e4:	2b80      	cmp	r3, #128	; 0x80
 80026e6:	d109      	bne.n	80026fc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026fa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026fe:	4613      	mov	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4413      	add	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	3304      	adds	r3, #4
 8002710:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	78db      	ldrb	r3, [r3, #3]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d108      	bne.n	800272c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2200      	movs	r2, #0
 800271e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	b2db      	uxtb	r3, r3
 8002724:	4619      	mov	r1, r3
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f005 ff58 	bl	80085dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002738:	461a      	mov	r2, r3
 800273a:	2302      	movs	r3, #2
 800273c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	4413      	add	r3, r2
 8002750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002754:	461a      	mov	r2, r3
 8002756:	2320      	movs	r3, #32
 8002758:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d009      	beq.n	8002778 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	015a      	lsls	r2, r3, #5
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	4413      	add	r3, r2
 800276c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002770:	461a      	mov	r2, r3
 8002772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002776:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	3301      	adds	r3, #1
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002780:	085b      	lsrs	r3, r3, #1
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	2b00      	cmp	r3, #0
 8002788:	f47f af62 	bne.w	8002650 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f003 faeb 	bl	8005d6c <USB_ReadInterrupts>
 8002796:	4603      	mov	r3, r0
 8002798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027a0:	f040 80db 	bne.w	800295a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f003 fb0c 	bl	8005dc6 <USB_ReadDevAllInEpInterrupt>
 80027ae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80027b4:	e0cd      	b.n	8002952 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80c2 	beq.w	8002946 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f003 fb32 	bl	8005e36 <USB_ReadDevInEPInterrupt>
 80027d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d057      	beq.n	800288e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	f003 030f 	and.w	r3, r3, #15
 80027e4:	2201      	movs	r2, #1
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69f9      	ldr	r1, [r7, #28]
 80027fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027fe:	4013      	ands	r3, r2
 8002800:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	015a      	lsls	r2, r3, #5
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	4413      	add	r3, r2
 800280a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800280e:	461a      	mov	r2, r3
 8002810:	2301      	movs	r3, #1
 8002812:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d132      	bne.n	8002882 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002820:	4613      	mov	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4413      	add	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	334c      	adds	r3, #76	; 0x4c
 800282c:	6819      	ldr	r1, [r3, #0]
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002832:	4613      	mov	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4403      	add	r3, r0
 800283c:	3348      	adds	r3, #72	; 0x48
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4419      	add	r1, r3
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4403      	add	r3, r0
 8002850:	334c      	adds	r3, #76	; 0x4c
 8002852:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	2b00      	cmp	r3, #0
 8002858:	d113      	bne.n	8002882 <HAL_PCD_IRQHandler+0x3a2>
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800285e:	4613      	mov	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4413      	add	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	3354      	adds	r3, #84	; 0x54
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d108      	bne.n	8002882 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800287a:	461a      	mov	r2, r3
 800287c:	2101      	movs	r1, #1
 800287e:	f003 fb39 	bl	8005ef4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	b2db      	uxtb	r3, r3
 8002886:	4619      	mov	r1, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f005 fe22 	bl	80084d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d008      	beq.n	80028aa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a4:	461a      	mov	r2, r3
 80028a6:	2308      	movs	r3, #8
 80028a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	015a      	lsls	r2, r3, #5
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	4413      	add	r3, r2
 80028bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028c0:	461a      	mov	r2, r3
 80028c2:	2310      	movs	r3, #16
 80028c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028dc:	461a      	mov	r2, r3
 80028de:	2340      	movs	r3, #64	; 0x40
 80028e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d023      	beq.n	8002934 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ee:	6a38      	ldr	r0, [r7, #32]
 80028f0:	f002 fa1a 	bl	8004d28 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	3338      	adds	r3, #56	; 0x38
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	3304      	adds	r3, #4
 8002906:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	78db      	ldrb	r3, [r3, #3]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d108      	bne.n	8002922 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2200      	movs	r2, #0
 8002914:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	b2db      	uxtb	r3, r3
 800291a:	4619      	mov	r1, r3
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f005 fe6f 	bl	8008600 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	4413      	add	r3, r2
 800292a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800292e:	461a      	mov	r2, r3
 8002930:	2302      	movs	r3, #2
 8002932:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800293e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fcdb 	bl	80032fc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	3301      	adds	r3, #1
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	085b      	lsrs	r3, r3, #1
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	f47f af2e 	bne.w	80027b6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f003 fa04 	bl	8005d6c <USB_ReadInterrupts>
 8002964:	4603      	mov	r3, r0
 8002966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800296a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800296e:	d122      	bne.n	80029b6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800297e:	f023 0301 	bic.w	r3, r3, #1
 8002982:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800298a:	2b01      	cmp	r3, #1
 800298c:	d108      	bne.n	80029a0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002996:	2100      	movs	r1, #0
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 fec3 	bl	8003724 <HAL_PCDEx_LPM_Callback>
 800299e:	e002      	b.n	80029a6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f005 fe0d 	bl	80085c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80029b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 f9d6 	bl	8005d6c <USB_ReadInterrupts>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029ca:	d112      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d102      	bne.n	80029e2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f005 fdc9 	bl	8008574 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029f0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 f9b8 	bl	8005d6c <USB_ReadInterrupts>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a06:	f040 80b7 	bne.w	8002b78 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	69fa      	ldr	r2, [r7, #28]
 8002a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a18:	f023 0301 	bic.w	r3, r3, #1
 8002a1c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2110      	movs	r1, #16
 8002a24:	4618      	mov	r0, r3
 8002a26:	f002 f97f 	bl	8004d28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a2e:	e046      	b.n	8002abe <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a42:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	015a      	lsls	r2, r3, #5
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a54:	0151      	lsls	r1, r2, #5
 8002a56:	69fa      	ldr	r2, [r7, #28]
 8002a58:	440a      	add	r2, r1
 8002a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a62:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	015a      	lsls	r2, r3, #5
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a70:	461a      	mov	r2, r3
 8002a72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a76:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a88:	0151      	lsls	r1, r2, #5
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	440a      	add	r2, r1
 8002a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a96:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aa8:	0151      	lsls	r1, r2, #5
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	440a      	add	r2, r1
 8002aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ab2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ab6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aba:	3301      	adds	r3, #1
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d3b3      	bcc.n	8002a30 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ada:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d016      	beq.n	8002b12 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002af4:	f043 030b 	orr.w	r3, r3, #11
 8002af8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b0a:	f043 030b 	orr.w	r3, r3, #11
 8002b0e:	6453      	str	r3, [r2, #68]	; 0x44
 8002b10:	e015      	b.n	8002b3e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b24:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b28:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b38:	f043 030b 	orr.w	r3, r3, #11
 8002b3c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69fa      	ldr	r2, [r7, #28]
 8002b48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b4c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b50:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b62:	461a      	mov	r2, r3
 8002b64:	f003 f9c6 	bl	8005ef4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f003 f8f5 	bl	8005d6c <USB_ReadInterrupts>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8c:	d124      	bne.n	8002bd8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f003 f98b 	bl	8005eae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f002 f940 	bl	8004e22 <USB_GetDevSpeed>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681c      	ldr	r4, [r3, #0]
 8002bae:	f001 fa29 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 8002bb2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f001 fe3f 	bl	8004840 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f005 fcad 	bl	8008522 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f003 f8c5 	bl	8005d6c <USB_ReadInterrupts>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d10a      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f005 fc8a 	bl	8008506 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f002 0208 	and.w	r2, r2, #8
 8002c00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f003 f8b0 	bl	8005d6c <USB_ReadInterrupts>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c12:	2b80      	cmp	r3, #128	; 0x80
 8002c14:	d122      	bne.n	8002c5c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c22:	2301      	movs	r3, #1
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
 8002c26:	e014      	b.n	8002c52 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d105      	bne.n	8002c4c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	4619      	mov	r1, r3
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fb27 	bl	800329a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	3301      	adds	r3, #1
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d3e5      	bcc.n	8002c28 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f003 f883 	bl	8005d6c <USB_ReadInterrupts>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c70:	d13b      	bne.n	8002cea <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c72:	2301      	movs	r3, #1
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
 8002c76:	e02b      	b.n	8002cd0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4413      	add	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	3340      	adds	r3, #64	; 0x40
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d115      	bne.n	8002cca <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c9e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	da12      	bge.n	8002cca <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	333f      	adds	r3, #63	; 0x3f
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fae8 	bl	800329a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ccc:	3301      	adds	r3, #1
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d3ce      	bcc.n	8002c78 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f003 f83c 	bl	8005d6c <USB_ReadInterrupts>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cfe:	d155      	bne.n	8002dac <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d00:	2301      	movs	r3, #1
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
 8002d04:	e045      	b.n	8002d92 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	015a      	lsls	r2, r3, #5
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d12e      	bne.n	8002d8c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d2e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	da2b      	bge.n	8002d8c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d40:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d121      	bne.n	8002d8c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d88:	6053      	str	r3, [r2, #4]
            break;
 8002d8a:	e007      	b.n	8002d9c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	3301      	adds	r3, #1
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d3b4      	bcc.n	8002d06 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f002 ffdb 	bl	8005d6c <USB_ReadInterrupts>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc0:	d10a      	bne.n	8002dd8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f005 fc2e 	bl	8008624 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 ffc5 	bl	8005d6c <USB_ReadInterrupts>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d115      	bne.n	8002e18 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d002      	beq.n	8002e04 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f005 fc1e 	bl	8008640 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6859      	ldr	r1, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
 8002e14:	e000      	b.n	8002e18 <HAL_PCD_IRQHandler+0x938>
      return;
 8002e16:	bf00      	nop
    }
  }
}
 8002e18:	3734      	adds	r7, #52	; 0x34
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd90      	pop	{r4, r7, pc}

08002e1e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_PCD_SetAddress+0x1a>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e013      	b.n	8002e60 <HAL_PCD_SetAddress+0x42>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	4611      	mov	r1, r2
 8002e50:	4618      	mov	r0, r3
 8002e52:	f002 ff23 	bl	8005c9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	4608      	mov	r0, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	4603      	mov	r3, r0
 8002e78:	70fb      	strb	r3, [r7, #3]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	803b      	strh	r3, [r7, #0]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	da0f      	bge.n	8002eae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	f003 020f 	and.w	r2, r3, #15
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	3338      	adds	r3, #56	; 0x38
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	705a      	strb	r2, [r3, #1]
 8002eac:	e00f      	b.n	8002ece <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	f003 020f 	and.w	r2, r3, #15
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002eda:	883a      	ldrh	r2, [r7, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	78ba      	ldrb	r2, [r7, #2]
 8002ee4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	785b      	ldrb	r3, [r3, #1]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d004      	beq.n	8002ef8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ef8:	78bb      	ldrb	r3, [r7, #2]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d102      	bne.n	8002f04 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_PCD_EP_Open+0xaa>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e00e      	b.n	8002f30 <HAL_PCD_EP_Open+0xc8>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68f9      	ldr	r1, [r7, #12]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f001 ffa3 	bl	8004e6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002f2e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	da0f      	bge.n	8002f6c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	f003 020f 	and.w	r2, r3, #15
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	3338      	adds	r3, #56	; 0x38
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	4413      	add	r3, r2
 8002f60:	3304      	adds	r3, #4
 8002f62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2201      	movs	r2, #1
 8002f68:	705a      	strb	r2, [r3, #1]
 8002f6a:	e00f      	b.n	8002f8c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	f003 020f 	and.w	r2, r3, #15
 8002f72:	4613      	mov	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	3304      	adds	r3, #4
 8002f84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_PCD_EP_Close+0x6e>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e00e      	b.n	8002fc4 <HAL_PCD_EP_Close+0x8c>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68f9      	ldr	r1, [r7, #12]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f001 ffe1 	bl	8004f7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fdc:	7afb      	ldrb	r3, [r7, #11]
 8002fde:	f003 020f 	and.w	r2, r3, #15
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2200      	movs	r2, #0
 8003006:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2200      	movs	r2, #0
 800300c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800300e:	7afb      	ldrb	r3, [r7, #11]
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	b2da      	uxtb	r2, r3
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d102      	bne.n	8003028 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003028:	7afb      	ldrb	r3, [r7, #11]
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	6979      	ldr	r1, [r7, #20]
 8003040:	f002 fac0 	bl	80055c4 <USB_EP0StartXfer>
 8003044:	e008      	b.n	8003058 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	6979      	ldr	r1, [r7, #20]
 8003054:	f002 f86e 	bl	8005134 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3718      	adds	r7, #24
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	460b      	mov	r3, r1
 800306c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	f003 020f 	and.w	r2, r3, #15
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003084:	681b      	ldr	r3, [r3, #0]
}
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b086      	sub	sp, #24
 8003096:	af00      	add	r7, sp, #0
 8003098:	60f8      	str	r0, [r7, #12]
 800309a:	607a      	str	r2, [r7, #4]
 800309c:	603b      	str	r3, [r7, #0]
 800309e:	460b      	mov	r3, r1
 80030a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a2:	7afb      	ldrb	r3, [r7, #11]
 80030a4:	f003 020f 	and.w	r2, r3, #15
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	3338      	adds	r3, #56	; 0x38
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	4413      	add	r3, r2
 80030b6:	3304      	adds	r3, #4
 80030b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2200      	movs	r2, #0
 80030ca:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2201      	movs	r2, #1
 80030d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030d2:	7afb      	ldrb	r3, [r7, #11]
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d102      	bne.n	80030ec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030ec:	7afb      	ldrb	r3, [r7, #11]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d109      	bne.n	800310a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	6979      	ldr	r1, [r7, #20]
 8003104:	f002 fa5e 	bl	80055c4 <USB_EP0StartXfer>
 8003108:	e008      	b.n	800311c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	6979      	ldr	r1, [r7, #20]
 8003118:	f002 f80c 	bl	8005134 <USB_EPStartXfer>
  }

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3718      	adds	r7, #24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	f003 020f 	and.w	r2, r3, #15
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	429a      	cmp	r2, r3
 800313e:	d901      	bls.n	8003144 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e050      	b.n	80031e6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003148:	2b00      	cmp	r3, #0
 800314a:	da0f      	bge.n	800316c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	f003 020f 	and.w	r2, r3, #15
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	3338      	adds	r3, #56	; 0x38
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	4413      	add	r3, r2
 8003160:	3304      	adds	r3, #4
 8003162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2201      	movs	r2, #1
 8003168:	705a      	strb	r2, [r3, #1]
 800316a:	e00d      	b.n	8003188 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	3304      	adds	r3, #4
 8003180:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800318e:	78fb      	ldrb	r3, [r7, #3]
 8003190:	f003 030f 	and.w	r3, r3, #15
 8003194:	b2da      	uxtb	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_PCD_EP_SetStall+0x82>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e01e      	b.n	80031e6 <HAL_PCD_EP_SetStall+0xc0>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68f9      	ldr	r1, [r7, #12]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f002 fc9c 	bl	8005af4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10a      	bne.n	80031dc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	b2d9      	uxtb	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031d6:	461a      	mov	r2, r3
 80031d8:	f002 fe8c 	bl	8005ef4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	f003 020f 	and.w	r2, r3, #15
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	d901      	bls.n	800320c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e042      	b.n	8003292 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800320c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003210:	2b00      	cmp	r3, #0
 8003212:	da0f      	bge.n	8003234 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	f003 020f 	and.w	r2, r3, #15
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	3338      	adds	r3, #56	; 0x38
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	4413      	add	r3, r2
 8003228:	3304      	adds	r3, #4
 800322a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	705a      	strb	r2, [r3, #1]
 8003232:	e00f      	b.n	8003254 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	f003 020f 	and.w	r2, r3, #15
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	3304      	adds	r3, #4
 800324c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	b2da      	uxtb	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_PCD_EP_ClrStall+0x86>
 8003270:	2302      	movs	r3, #2
 8003272:	e00e      	b.n	8003292 <HAL_PCD_EP_ClrStall+0xa4>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68f9      	ldr	r1, [r7, #12]
 8003282:	4618      	mov	r0, r3
 8003284:	f002 fca4 	bl	8005bd0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b084      	sub	sp, #16
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	460b      	mov	r3, r1
 80032a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80032a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	da0c      	bge.n	80032c8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	f003 020f 	and.w	r2, r3, #15
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	3338      	adds	r3, #56	; 0x38
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	3304      	adds	r3, #4
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	e00c      	b.n	80032e2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	f003 020f 	and.w	r2, r3, #15
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	3304      	adds	r3, #4
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68f9      	ldr	r1, [r7, #12]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f002 fac3 	bl	8005874 <USB_EPStopXfer>
 80032ee:	4603      	mov	r3, r0
 80032f0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032f2:	7afb      	ldrb	r3, [r7, #11]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af02      	add	r7, sp, #8
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	3338      	adds	r3, #56	; 0x38
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	4413      	add	r3, r2
 8003320:	3304      	adds	r3, #4
 8003322:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a1a      	ldr	r2, [r3, #32]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	429a      	cmp	r2, r3
 800332e:	d901      	bls.n	8003334 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e06c      	b.n	800340e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	699a      	ldr	r2, [r3, #24]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	429a      	cmp	r2, r3
 8003348:	d902      	bls.n	8003350 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	3303      	adds	r3, #3
 8003354:	089b      	lsrs	r3, r3, #2
 8003356:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003358:	e02b      	b.n	80033b2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	429a      	cmp	r2, r3
 800336e:	d902      	bls.n	8003376 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3303      	adds	r3, #3
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6919      	ldr	r1, [r3, #16]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800338e:	b2db      	uxtb	r3, r3
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	4603      	mov	r3, r0
 8003394:	6978      	ldr	r0, [r7, #20]
 8003396:	f002 fb17 	bl	80059c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	441a      	add	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a1a      	ldr	r2, [r3, #32]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	441a      	add	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d809      	bhi.n	80033dc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a1a      	ldr	r2, [r3, #32]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d203      	bcs.n	80033dc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1be      	bne.n	800335a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	699a      	ldr	r2, [r3, #24]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d811      	bhi.n	800340c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	2201      	movs	r2, #1
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	43db      	mvns	r3, r3
 8003402:	6939      	ldr	r1, [r7, #16]
 8003404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003408:	4013      	ands	r3, r2
 800340a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3720      	adds	r7, #32
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	333c      	adds	r3, #60	; 0x3c
 8003430:	3304      	adds	r3, #4
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d17b      	bne.n	8003546 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d015      	beq.n	8003484 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	4a61      	ldr	r2, [pc, #388]	; (80035e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	f240 80b9 	bls.w	80035d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80b3 	beq.w	80035d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	4413      	add	r3, r2
 8003476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347a:	461a      	mov	r2, r3
 800347c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003480:	6093      	str	r3, [r2, #8]
 8003482:	e0a7      	b.n	80035d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f003 0320 	and.w	r3, r3, #32
 800348a:	2b00      	cmp	r3, #0
 800348c:	d009      	beq.n	80034a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	4413      	add	r3, r2
 8003496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349a:	461a      	mov	r2, r3
 800349c:	2320      	movs	r3, #32
 800349e:	6093      	str	r3, [r2, #8]
 80034a0:	e098      	b.n	80035d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f040 8093 	bne.w	80035d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	4a4b      	ldr	r2, [pc, #300]	; (80035e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d90f      	bls.n	80034d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034cc:	461a      	mov	r2, r3
 80034ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d2:	6093      	str	r3, [r2, #8]
 80034d4:	e07e      	b.n	80035d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	4413      	add	r3, r2
 80034e8:	3304      	adds	r3, #4
 80034ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	69da      	ldr	r2, [r3, #28]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	0159      	lsls	r1, r3, #5
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	440b      	add	r3, r1
 80034f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003502:	1ad2      	subs	r2, r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d114      	bne.n	8003538 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d109      	bne.n	800352a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003520:	461a      	mov	r2, r3
 8003522:	2101      	movs	r1, #1
 8003524:	f002 fce6 	bl	8005ef4 <USB_EP0_OutStart>
 8003528:	e006      	b.n	8003538 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	441a      	add	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	4619      	mov	r1, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f004 ffac 	bl	800849c <HAL_PCD_DataOutStageCallback>
 8003544:	e046      	b.n	80035d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	4a26      	ldr	r2, [pc, #152]	; (80035e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d124      	bne.n	8003598 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003564:	461a      	mov	r2, r3
 8003566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800356a:	6093      	str	r3, [r2, #8]
 800356c:	e032      	b.n	80035d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003584:	461a      	mov	r2, r3
 8003586:	2320      	movs	r3, #32
 8003588:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	4619      	mov	r1, r3
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f004 ff83 	bl	800849c <HAL_PCD_DataOutStageCallback>
 8003596:	e01d      	b.n	80035d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d114      	bne.n	80035c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d108      	bne.n	80035c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035c0:	461a      	mov	r2, r3
 80035c2:	2100      	movs	r1, #0
 80035c4:	f002 fc96 	bl	8005ef4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	4619      	mov	r1, r3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f004 ff64 	bl	800849c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	4f54300a 	.word	0x4f54300a
 80035e4:	4f54310a 	.word	0x4f54310a

080035e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	333c      	adds	r3, #60	; 0x3c
 8003600:	3304      	adds	r3, #4
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4a15      	ldr	r2, [pc, #84]	; (8003670 <PCD_EP_OutSetupPacket_int+0x88>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d90e      	bls.n	800363c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003624:	2b00      	cmp	r3, #0
 8003626:	d009      	beq.n	800363c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4413      	add	r3, r2
 8003630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003634:	461a      	mov	r2, r3
 8003636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800363a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f004 ff1b 	bl	8008478 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4a0a      	ldr	r2, [pc, #40]	; (8003670 <PCD_EP_OutSetupPacket_int+0x88>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d90c      	bls.n	8003664 <PCD_EP_OutSetupPacket_int+0x7c>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	2b01      	cmp	r3, #1
 8003650:	d108      	bne.n	8003664 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800365c:	461a      	mov	r2, r3
 800365e:	2101      	movs	r1, #1
 8003660:	f002 fc48 	bl	8005ef4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	4f54300a 	.word	0x4f54300a

08003674 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	70fb      	strb	r3, [r7, #3]
 8003680:	4613      	mov	r3, r2
 8003682:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d107      	bne.n	80036a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003692:	883b      	ldrh	r3, [r7, #0]
 8003694:	0419      	lsls	r1, r3, #16
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	430a      	orrs	r2, r1
 800369e:	629a      	str	r2, [r3, #40]	; 0x28
 80036a0:	e028      	b.n	80036f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	0c1b      	lsrs	r3, r3, #16
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	4413      	add	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]
 80036b4:	e00d      	b.n	80036d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	3340      	adds	r3, #64	; 0x40
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	0c1b      	lsrs	r3, r3, #16
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	4413      	add	r3, r2
 80036ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	3301      	adds	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
 80036d2:	7bfa      	ldrb	r2, [r7, #15]
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	429a      	cmp	r2, r3
 80036da:	d3ec      	bcc.n	80036b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036dc:	883b      	ldrh	r3, [r7, #0]
 80036de:	0418      	lsls	r0, r3, #16
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6819      	ldr	r1, [r3, #0]
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	4302      	orrs	r2, r0
 80036ec:	3340      	adds	r3, #64	; 0x40
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	887a      	ldrh	r2, [r7, #2]
 8003714:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e267      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d075      	beq.n	8003846 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800375a:	4b88      	ldr	r3, [pc, #544]	; (800397c <HAL_RCC_OscConfig+0x240>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b04      	cmp	r3, #4
 8003764:	d00c      	beq.n	8003780 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003766:	4b85      	ldr	r3, [pc, #532]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800376e:	2b08      	cmp	r3, #8
 8003770:	d112      	bne.n	8003798 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003772:	4b82      	ldr	r3, [pc, #520]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800377e:	d10b      	bne.n	8003798 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003780:	4b7e      	ldr	r3, [pc, #504]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d05b      	beq.n	8003844 <HAL_RCC_OscConfig+0x108>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d157      	bne.n	8003844 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e242      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a0:	d106      	bne.n	80037b0 <HAL_RCC_OscConfig+0x74>
 80037a2:	4b76      	ldr	r3, [pc, #472]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a75      	ldr	r2, [pc, #468]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e01d      	b.n	80037ec <HAL_RCC_OscConfig+0xb0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x98>
 80037ba:	4b70      	ldr	r3, [pc, #448]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a6f      	ldr	r2, [pc, #444]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b6d      	ldr	r3, [pc, #436]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a6c      	ldr	r2, [pc, #432]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e00b      	b.n	80037ec <HAL_RCC_OscConfig+0xb0>
 80037d4:	4b69      	ldr	r3, [pc, #420]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a68      	ldr	r2, [pc, #416]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	4b66      	ldr	r3, [pc, #408]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a65      	ldr	r2, [pc, #404]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d013      	beq.n	800381c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fd fc18 	bl	8001028 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037fc:	f7fd fc14 	bl	8001028 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	; 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e207      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380e:	4b5b      	ldr	r3, [pc, #364]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0xc0>
 800381a:	e014      	b.n	8003846 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fd fc04 	bl	8001028 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003824:	f7fd fc00 	bl	8001028 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b64      	cmp	r3, #100	; 0x64
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e1f3      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003836:	4b51      	ldr	r3, [pc, #324]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0xe8>
 8003842:	e000      	b.n	8003846 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d063      	beq.n	800391a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003852:	4b4a      	ldr	r3, [pc, #296]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00b      	beq.n	8003876 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385e:	4b47      	ldr	r3, [pc, #284]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003866:	2b08      	cmp	r3, #8
 8003868:	d11c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386a:	4b44      	ldr	r3, [pc, #272]	; (800397c <HAL_RCC_OscConfig+0x240>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d116      	bne.n	80038a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003876:	4b41      	ldr	r3, [pc, #260]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_RCC_OscConfig+0x152>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d001      	beq.n	800388e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e1c7      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388e:	4b3b      	ldr	r3, [pc, #236]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4937      	ldr	r1, [pc, #220]	; (800397c <HAL_RCC_OscConfig+0x240>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a2:	e03a      	b.n	800391a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d020      	beq.n	80038ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ac:	4b34      	ldr	r3, [pc, #208]	; (8003980 <HAL_RCC_OscConfig+0x244>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fd fbb9 	bl	8001028 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ba:	f7fd fbb5 	bl	8001028 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e1a8      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038cc:	4b2b      	ldr	r3, [pc, #172]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d8:	4b28      	ldr	r3, [pc, #160]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4925      	ldr	r1, [pc, #148]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	600b      	str	r3, [r1, #0]
 80038ec:	e015      	b.n	800391a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ee:	4b24      	ldr	r3, [pc, #144]	; (8003980 <HAL_RCC_OscConfig+0x244>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7fd fb98 	bl	8001028 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038fc:	f7fd fb94 	bl	8001028 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e187      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390e:	4b1b      	ldr	r3, [pc, #108]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d036      	beq.n	8003994 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d016      	beq.n	800395c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392e:	4b15      	ldr	r3, [pc, #84]	; (8003984 <HAL_RCC_OscConfig+0x248>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003934:	f7fd fb78 	bl	8001028 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800393c:	f7fd fb74 	bl	8001028 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e167      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0f0      	beq.n	800393c <HAL_RCC_OscConfig+0x200>
 800395a:	e01b      	b.n	8003994 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800395c:	4b09      	ldr	r3, [pc, #36]	; (8003984 <HAL_RCC_OscConfig+0x248>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003962:	f7fd fb61 	bl	8001028 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003968:	e00e      	b.n	8003988 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800396a:	f7fd fb5d 	bl	8001028 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d907      	bls.n	8003988 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e150      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
 800397c:	40023800 	.word	0x40023800
 8003980:	42470000 	.word	0x42470000
 8003984:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003988:	4b88      	ldr	r3, [pc, #544]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 800398a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ea      	bne.n	800396a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 8097 	beq.w	8003ad0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a2:	2300      	movs	r3, #0
 80039a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a6:	4b81      	ldr	r3, [pc, #516]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10f      	bne.n	80039d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	4b7d      	ldr	r3, [pc, #500]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	4a7c      	ldr	r2, [pc, #496]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 80039bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c0:	6413      	str	r3, [r2, #64]	; 0x40
 80039c2:	4b7a      	ldr	r3, [pc, #488]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ce:	2301      	movs	r3, #1
 80039d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d2:	4b77      	ldr	r3, [pc, #476]	; (8003bb0 <HAL_RCC_OscConfig+0x474>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d118      	bne.n	8003a10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039de:	4b74      	ldr	r3, [pc, #464]	; (8003bb0 <HAL_RCC_OscConfig+0x474>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a73      	ldr	r2, [pc, #460]	; (8003bb0 <HAL_RCC_OscConfig+0x474>)
 80039e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ea:	f7fd fb1d 	bl	8001028 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f2:	f7fd fb19 	bl	8001028 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e10c      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a04:	4b6a      	ldr	r3, [pc, #424]	; (8003bb0 <HAL_RCC_OscConfig+0x474>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d106      	bne.n	8003a26 <HAL_RCC_OscConfig+0x2ea>
 8003a18:	4b64      	ldr	r3, [pc, #400]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	4a63      	ldr	r2, [pc, #396]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	6713      	str	r3, [r2, #112]	; 0x70
 8003a24:	e01c      	b.n	8003a60 <HAL_RCC_OscConfig+0x324>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b05      	cmp	r3, #5
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x30c>
 8003a2e:	4b5f      	ldr	r3, [pc, #380]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	4a5e      	ldr	r2, [pc, #376]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3a:	4b5c      	ldr	r3, [pc, #368]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4a5b      	ldr	r2, [pc, #364]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	6713      	str	r3, [r2, #112]	; 0x70
 8003a46:	e00b      	b.n	8003a60 <HAL_RCC_OscConfig+0x324>
 8003a48:	4b58      	ldr	r3, [pc, #352]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4c:	4a57      	ldr	r2, [pc, #348]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
 8003a52:	6713      	str	r3, [r2, #112]	; 0x70
 8003a54:	4b55      	ldr	r3, [pc, #340]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a58:	4a54      	ldr	r2, [pc, #336]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a5a:	f023 0304 	bic.w	r3, r3, #4
 8003a5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d015      	beq.n	8003a94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a68:	f7fd fade 	bl	8001028 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a70:	f7fd fada 	bl	8001028 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e0cb      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a86:	4b49      	ldr	r3, [pc, #292]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0ee      	beq.n	8003a70 <HAL_RCC_OscConfig+0x334>
 8003a92:	e014      	b.n	8003abe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a94:	f7fd fac8 	bl	8001028 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a9c:	f7fd fac4 	bl	8001028 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e0b5      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab2:	4b3e      	ldr	r3, [pc, #248]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1ee      	bne.n	8003a9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac4:	4b39      	ldr	r3, [pc, #228]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	4a38      	ldr	r2, [pc, #224]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ace:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80a1 	beq.w	8003c1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ada:	4b34      	ldr	r3, [pc, #208]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d05c      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d141      	bne.n	8003b72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aee:	4b31      	ldr	r3, [pc, #196]	; (8003bb4 <HAL_RCC_OscConfig+0x478>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7fd fa98 	bl	8001028 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fd fa94 	bl	8001028 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e087      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0e:	4b27      	ldr	r3, [pc, #156]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69da      	ldr	r2, [r3, #28]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	019b      	lsls	r3, r3, #6
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	3b01      	subs	r3, #1
 8003b34:	041b      	lsls	r3, r3, #16
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	061b      	lsls	r3, r3, #24
 8003b3e:	491b      	ldr	r1, [pc, #108]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <HAL_RCC_OscConfig+0x478>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4a:	f7fd fa6d 	bl	8001028 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b52:	f7fd fa69 	bl	8001028 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e05c      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x416>
 8003b70:	e054      	b.n	8003c1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_RCC_OscConfig+0x478>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fd fa56 	bl	8001028 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b80:	f7fd fa52 	bl	8001028 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e045      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x444>
 8003b9e:	e03d      	b.n	8003c1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d107      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e038      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40007000 	.word	0x40007000
 8003bb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <HAL_RCC_OscConfig+0x4ec>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d028      	beq.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d121      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d11a      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003be8:	4013      	ands	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d111      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	085b      	lsrs	r3, r3, #1
 8003c00:	3b01      	subs	r3, #1
 8003c02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d107      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023800 	.word	0x40023800

08003c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0cc      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c40:	4b68      	ldr	r3, [pc, #416]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d90c      	bls.n	8003c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b65      	ldr	r3, [pc, #404]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c56:	4b63      	ldr	r3, [pc, #396]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0b8      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d020      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c80:	4b59      	ldr	r3, [pc, #356]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4a58      	ldr	r2, [pc, #352]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c98:	4b53      	ldr	r3, [pc, #332]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	4a52      	ldr	r2, [pc, #328]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca4:	4b50      	ldr	r3, [pc, #320]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	494d      	ldr	r1, [pc, #308]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d044      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d107      	bne.n	8003cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cca:	4b47      	ldr	r3, [pc, #284]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d119      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e07f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d003      	beq.n	8003cea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d107      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cea:	4b3f      	ldr	r3, [pc, #252]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e06f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfa:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e067      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d0a:	4b37      	ldr	r3, [pc, #220]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f023 0203 	bic.w	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4934      	ldr	r1, [pc, #208]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d1c:	f7fd f984 	bl	8001028 <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d24:	f7fd f980 	bl	8001028 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e04f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3a:	4b2b      	ldr	r3, [pc, #172]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 020c 	and.w	r2, r3, #12
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d1eb      	bne.n	8003d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d20c      	bcs.n	8003d74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b22      	ldr	r3, [pc, #136]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d62:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e032      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d80:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4916      	ldr	r1, [pc, #88]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d9e:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	490e      	ldr	r1, [pc, #56]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003db2:	f000 f821 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8003db6:	4602      	mov	r2, r0
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	490a      	ldr	r1, [pc, #40]	; (8003dec <HAL_RCC_ClockConfig+0x1c0>)
 8003dc4:	5ccb      	ldrb	r3, [r1, r3]
 8003dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dca:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fd f8e4 	bl	8000fa0 <HAL_InitTick>

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023c00 	.word	0x40023c00
 8003de8:	40023800 	.word	0x40023800
 8003dec:	08008b00 	.word	0x08008b00
 8003df0:	20000048 	.word	0x20000048
 8003df4:	2000004c 	.word	0x2000004c

08003df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dfc:	b094      	sub	sp, #80	; 0x50
 8003dfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	647b      	str	r3, [r7, #68]	; 0x44
 8003e04:	2300      	movs	r3, #0
 8003e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e08:	2300      	movs	r3, #0
 8003e0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e10:	4b79      	ldr	r3, [pc, #484]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d00d      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0x40>
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	f200 80e1 	bhi.w	8003fe4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0x34>
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d003      	beq.n	8003e32 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e2a:	e0db      	b.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e2c:	4b73      	ldr	r3, [pc, #460]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x204>)
 8003e2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e30:	e0db      	b.n	8003fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e32:	4b73      	ldr	r3, [pc, #460]	; (8004000 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e36:	e0d8      	b.n	8003fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e38:	4b6f      	ldr	r3, [pc, #444]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e42:	4b6d      	ldr	r3, [pc, #436]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d063      	beq.n	8003f16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4e:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	099b      	lsrs	r3, r3, #6
 8003e54:	2200      	movs	r2, #0
 8003e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e60:	633b      	str	r3, [r7, #48]	; 0x30
 8003e62:	2300      	movs	r3, #0
 8003e64:	637b      	str	r3, [r7, #52]	; 0x34
 8003e66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e6a:	4622      	mov	r2, r4
 8003e6c:	462b      	mov	r3, r5
 8003e6e:	f04f 0000 	mov.w	r0, #0
 8003e72:	f04f 0100 	mov.w	r1, #0
 8003e76:	0159      	lsls	r1, r3, #5
 8003e78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e7c:	0150      	lsls	r0, r2, #5
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4621      	mov	r1, r4
 8003e84:	1a51      	subs	r1, r2, r1
 8003e86:	6139      	str	r1, [r7, #16]
 8003e88:	4629      	mov	r1, r5
 8003e8a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	018b      	lsls	r3, r1, #6
 8003ea0:	4651      	mov	r1, sl
 8003ea2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ea6:	4651      	mov	r1, sl
 8003ea8:	018a      	lsls	r2, r1, #6
 8003eaa:	4651      	mov	r1, sl
 8003eac:	ebb2 0801 	subs.w	r8, r2, r1
 8003eb0:	4659      	mov	r1, fp
 8003eb2:	eb63 0901 	sbc.w	r9, r3, r1
 8003eb6:	f04f 0200 	mov.w	r2, #0
 8003eba:	f04f 0300 	mov.w	r3, #0
 8003ebe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ec2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ec6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003eca:	4690      	mov	r8, r2
 8003ecc:	4699      	mov	r9, r3
 8003ece:	4623      	mov	r3, r4
 8003ed0:	eb18 0303 	adds.w	r3, r8, r3
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	462b      	mov	r3, r5
 8003ed8:	eb49 0303 	adc.w	r3, r9, r3
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003eea:	4629      	mov	r1, r5
 8003eec:	024b      	lsls	r3, r1, #9
 8003eee:	4621      	mov	r1, r4
 8003ef0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	024a      	lsls	r2, r1, #9
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4619      	mov	r1, r3
 8003efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003efe:	2200      	movs	r2, #0
 8003f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f08:	f7fc f970 	bl	80001ec <__aeabi_uldivmod>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4613      	mov	r3, r2
 8003f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f14:	e058      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f16:	4b38      	ldr	r3, [pc, #224]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	099b      	lsrs	r3, r3, #6
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	4611      	mov	r1, r2
 8003f22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f26:	623b      	str	r3, [r7, #32]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f30:	4642      	mov	r2, r8
 8003f32:	464b      	mov	r3, r9
 8003f34:	f04f 0000 	mov.w	r0, #0
 8003f38:	f04f 0100 	mov.w	r1, #0
 8003f3c:	0159      	lsls	r1, r3, #5
 8003f3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f42:	0150      	lsls	r0, r2, #5
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4641      	mov	r1, r8
 8003f4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f4e:	4649      	mov	r1, r9
 8003f50:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f54:	f04f 0200 	mov.w	r2, #0
 8003f58:	f04f 0300 	mov.w	r3, #0
 8003f5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f68:	ebb2 040a 	subs.w	r4, r2, sl
 8003f6c:	eb63 050b 	sbc.w	r5, r3, fp
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	00eb      	lsls	r3, r5, #3
 8003f7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f7e:	00e2      	lsls	r2, r4, #3
 8003f80:	4614      	mov	r4, r2
 8003f82:	461d      	mov	r5, r3
 8003f84:	4643      	mov	r3, r8
 8003f86:	18e3      	adds	r3, r4, r3
 8003f88:	603b      	str	r3, [r7, #0]
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	eb45 0303 	adc.w	r3, r5, r3
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	028b      	lsls	r3, r1, #10
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fa8:	4621      	mov	r1, r4
 8003faa:	028a      	lsls	r2, r1, #10
 8003fac:	4610      	mov	r0, r2
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	61fa      	str	r2, [r7, #28]
 8003fb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fbc:	f7fc f916 	bl	80001ec <__aeabi_uldivmod>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003fd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fe2:	e002      	b.n	8003fea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <HAL_RCC_GetSysClockFreq+0x204>)
 8003fe6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3750      	adds	r7, #80	; 0x50
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	00f42400 	.word	0x00f42400
 8004000:	007a1200 	.word	0x007a1200

08004004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004008:	4b03      	ldr	r3, [pc, #12]	; (8004018 <HAL_RCC_GetHCLKFreq+0x14>)
 800400a:	681b      	ldr	r3, [r3, #0]
}
 800400c:	4618      	mov	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20000048 	.word	0x20000048

0800401c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004020:	f7ff fff0 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 8004024:	4602      	mov	r2, r0
 8004026:	4b05      	ldr	r3, [pc, #20]	; (800403c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	0a9b      	lsrs	r3, r3, #10
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	4903      	ldr	r1, [pc, #12]	; (8004040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004032:	5ccb      	ldrb	r3, [r1, r3]
 8004034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004038:	4618      	mov	r0, r3
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40023800 	.word	0x40023800
 8004040:	08008b10 	.word	0x08008b10

08004044 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004068:	2b00      	cmp	r3, #0
 800406a:	d035      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800406c:	4b62      	ldr	r3, [pc, #392]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004072:	f7fc ffd9 	bl	8001028 <HAL_GetTick>
 8004076:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004078:	e008      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800407a:	f7fc ffd5 	bl	8001028 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e0b0      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800408c:	4b5b      	ldr	r3, [pc, #364]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1f0      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	019a      	lsls	r2, r3, #6
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	071b      	lsls	r3, r3, #28
 80040a4:	4955      	ldr	r1, [pc, #340]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040ac:	4b52      	ldr	r3, [pc, #328]	; (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040b2:	f7fc ffb9 	bl	8001028 <HAL_GetTick>
 80040b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040b8:	e008      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040ba:	f7fc ffb5 	bl	8001028 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e090      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040cc:	4b4b      	ldr	r3, [pc, #300]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8083 	beq.w	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	4b44      	ldr	r3, [pc, #272]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	4a43      	ldr	r2, [pc, #268]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f4:	6413      	str	r3, [r2, #64]	; 0x40
 80040f6:	4b41      	ldr	r3, [pc, #260]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004102:	4b3f      	ldr	r3, [pc, #252]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a3e      	ldr	r2, [pc, #248]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800410e:	f7fc ff8b 	bl	8001028 <HAL_GetTick>
 8004112:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004114:	e008      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004116:	f7fc ff87 	bl	8001028 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e062      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004128:	4b35      	ldr	r3, [pc, #212]	; (8004200 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0f0      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004134:	4b31      	ldr	r3, [pc, #196]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800413c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d02f      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	429a      	cmp	r2, r3
 8004150:	d028      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004152:	4b2a      	ldr	r3, [pc, #168]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800415a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800415c:	4b29      	ldr	r3, [pc, #164]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004162:	4b28      	ldr	r3, [pc, #160]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004168:	4a24      	ldr	r2, [pc, #144]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800416e:	4b23      	ldr	r3, [pc, #140]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b01      	cmp	r3, #1
 8004178:	d114      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800417a:	f7fc ff55 	bl	8001028 <HAL_GetTick>
 800417e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004180:	e00a      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7fc ff51 	bl	8001028 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004190:	4293      	cmp	r3, r2
 8004192:	d901      	bls.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e02a      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004198:	4b18      	ldr	r3, [pc, #96]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0ee      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041b0:	d10d      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80041b2:	4b12      	ldr	r3, [pc, #72]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80041c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c6:	490d      	ldr	r1, [pc, #52]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	608b      	str	r3, [r1, #8]
 80041cc:	e005      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x196>
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80041d8:	6093      	str	r3, [r2, #8]
 80041da:	4b08      	ldr	r3, [pc, #32]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e6:	4905      	ldr	r1, [pc, #20]	; (80041fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	42470068 	.word	0x42470068
 80041fc:	40023800 	.word	0x40023800
 8004200:	40007000 	.word	0x40007000
 8004204:	42470e40 	.word	0x42470e40

08004208 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800421c:	2300      	movs	r3, #0
 800421e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d13e      	bne.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004226:	4b23      	ldr	r3, [pc, #140]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d005      	beq.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d12f      	bne.n	800429c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800423c:	4b1e      	ldr	r3, [pc, #120]	; (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800423e:	617b      	str	r3, [r7, #20]
          break;
 8004240:	e02f      	b.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004242:	4b1c      	ldr	r3, [pc, #112]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800424e:	d108      	bne.n	8004262 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004250:	4b18      	ldr	r3, [pc, #96]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004258:	4a18      	ldr	r2, [pc, #96]	; (80042bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800425a:	fbb2 f3f3 	udiv	r3, r2, r3
 800425e:	613b      	str	r3, [r7, #16]
 8004260:	e007      	b.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004262:	4b14      	ldr	r3, [pc, #80]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800426a:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800426c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004270:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004272:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004278:	099b      	lsrs	r3, r3, #6
 800427a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	fb02 f303 	mul.w	r3, r2, r3
 8004284:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800428c:	0f1b      	lsrs	r3, r3, #28
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	fbb2 f3f3 	udiv	r3, r2, r3
 8004298:	617b      	str	r3, [r7, #20]
          break;
 800429a:	e002      	b.n	80042a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
          break;
 80042a0:	bf00      	nop
        }
      }
      break;
 80042a2:	bf00      	nop
    }
  }
  return frequency;
 80042a4:	697b      	ldr	r3, [r7, #20]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40023800 	.word	0x40023800
 80042b8:	00bb8000 	.word	0x00bb8000
 80042bc:	007a1200 	.word	0x007a1200
 80042c0:	00f42400 	.word	0x00f42400

080042c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e07b      	b.n	80043ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d108      	bne.n	80042f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042e6:	d009      	beq.n	80042fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	61da      	str	r2, [r3, #28]
 80042ee:	e005      	b.n	80042fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2200      	movs	r2, #0
 80042f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d106      	bne.n	800431c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fc fd38 	bl	8000d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004332:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004380:	ea42 0103 	orr.w	r1, r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	f003 0104 	and.w	r1, r3, #4
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	f003 0210 	and.w	r2, r3, #16
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	69da      	ldr	r2, [r3, #28]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b082      	sub	sp, #8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e041      	b.n	800446c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d106      	bne.n	8004402 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fc fd0d 	bl	8000e1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2202      	movs	r2, #2
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3304      	adds	r3, #4
 8004412:	4619      	mov	r1, r3
 8004414:	4610      	mov	r0, r2
 8004416:	f000 f895 	bl	8004544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	d001      	beq.n	800448c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e046      	b.n	800451a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a23      	ldr	r2, [pc, #140]	; (8004528 <HAL_TIM_Base_Start+0xb4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d022      	beq.n	80044e4 <HAL_TIM_Base_Start+0x70>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a6:	d01d      	beq.n	80044e4 <HAL_TIM_Base_Start+0x70>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1f      	ldr	r2, [pc, #124]	; (800452c <HAL_TIM_Base_Start+0xb8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d018      	beq.n	80044e4 <HAL_TIM_Base_Start+0x70>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1e      	ldr	r2, [pc, #120]	; (8004530 <HAL_TIM_Base_Start+0xbc>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d013      	beq.n	80044e4 <HAL_TIM_Base_Start+0x70>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1c      	ldr	r2, [pc, #112]	; (8004534 <HAL_TIM_Base_Start+0xc0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00e      	beq.n	80044e4 <HAL_TIM_Base_Start+0x70>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1b      	ldr	r2, [pc, #108]	; (8004538 <HAL_TIM_Base_Start+0xc4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d009      	beq.n	80044e4 <HAL_TIM_Base_Start+0x70>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a19      	ldr	r2, [pc, #100]	; (800453c <HAL_TIM_Base_Start+0xc8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d004      	beq.n	80044e4 <HAL_TIM_Base_Start+0x70>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a18      	ldr	r2, [pc, #96]	; (8004540 <HAL_TIM_Base_Start+0xcc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d111      	bne.n	8004508 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 0307 	and.w	r3, r3, #7
 80044ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2b06      	cmp	r3, #6
 80044f4:	d010      	beq.n	8004518 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f042 0201 	orr.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004506:	e007      	b.n	8004518 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0201 	orr.w	r2, r2, #1
 8004516:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40010000 	.word	0x40010000
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40000c00 	.word	0x40000c00
 8004538:	40010400 	.word	0x40010400
 800453c:	40014000 	.word	0x40014000
 8004540:	40001800 	.word	0x40001800

08004544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a40      	ldr	r2, [pc, #256]	; (8004658 <TIM_Base_SetConfig+0x114>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d013      	beq.n	8004584 <TIM_Base_SetConfig+0x40>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004562:	d00f      	beq.n	8004584 <TIM_Base_SetConfig+0x40>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a3d      	ldr	r2, [pc, #244]	; (800465c <TIM_Base_SetConfig+0x118>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00b      	beq.n	8004584 <TIM_Base_SetConfig+0x40>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a3c      	ldr	r2, [pc, #240]	; (8004660 <TIM_Base_SetConfig+0x11c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d007      	beq.n	8004584 <TIM_Base_SetConfig+0x40>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a3b      	ldr	r2, [pc, #236]	; (8004664 <TIM_Base_SetConfig+0x120>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d003      	beq.n	8004584 <TIM_Base_SetConfig+0x40>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a3a      	ldr	r2, [pc, #232]	; (8004668 <TIM_Base_SetConfig+0x124>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d108      	bne.n	8004596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a2f      	ldr	r2, [pc, #188]	; (8004658 <TIM_Base_SetConfig+0x114>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d02b      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a4:	d027      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a2c      	ldr	r2, [pc, #176]	; (800465c <TIM_Base_SetConfig+0x118>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d023      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a2b      	ldr	r2, [pc, #172]	; (8004660 <TIM_Base_SetConfig+0x11c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d01f      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a2a      	ldr	r2, [pc, #168]	; (8004664 <TIM_Base_SetConfig+0x120>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d01b      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a29      	ldr	r2, [pc, #164]	; (8004668 <TIM_Base_SetConfig+0x124>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d017      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a28      	ldr	r2, [pc, #160]	; (800466c <TIM_Base_SetConfig+0x128>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d013      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a27      	ldr	r2, [pc, #156]	; (8004670 <TIM_Base_SetConfig+0x12c>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00f      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a26      	ldr	r2, [pc, #152]	; (8004674 <TIM_Base_SetConfig+0x130>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00b      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a25      	ldr	r2, [pc, #148]	; (8004678 <TIM_Base_SetConfig+0x134>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d007      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a24      	ldr	r2, [pc, #144]	; (800467c <TIM_Base_SetConfig+0x138>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d003      	beq.n	80045f6 <TIM_Base_SetConfig+0xb2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a23      	ldr	r2, [pc, #140]	; (8004680 <TIM_Base_SetConfig+0x13c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d108      	bne.n	8004608 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <TIM_Base_SetConfig+0x114>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d003      	beq.n	800463c <TIM_Base_SetConfig+0xf8>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a0c      	ldr	r2, [pc, #48]	; (8004668 <TIM_Base_SetConfig+0x124>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d103      	bne.n	8004644 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	615a      	str	r2, [r3, #20]
}
 800464a:	bf00      	nop
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40010000 	.word	0x40010000
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800
 8004664:	40000c00 	.word	0x40000c00
 8004668:	40010400 	.word	0x40010400
 800466c:	40014000 	.word	0x40014000
 8004670:	40014400 	.word	0x40014400
 8004674:	40014800 	.word	0x40014800
 8004678:	40001800 	.word	0x40001800
 800467c:	40001c00 	.word	0x40001c00
 8004680:	40002000 	.word	0x40002000

08004684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004694:	2b01      	cmp	r3, #1
 8004696:	d101      	bne.n	800469c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004698:	2302      	movs	r3, #2
 800469a:	e05a      	b.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a21      	ldr	r2, [pc, #132]	; (8004760 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d022      	beq.n	8004726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e8:	d01d      	beq.n	8004726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1d      	ldr	r2, [pc, #116]	; (8004764 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d018      	beq.n	8004726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1b      	ldr	r2, [pc, #108]	; (8004768 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d013      	beq.n	8004726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1a      	ldr	r2, [pc, #104]	; (800476c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00e      	beq.n	8004726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a18      	ldr	r2, [pc, #96]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d009      	beq.n	8004726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a17      	ldr	r2, [pc, #92]	; (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a15      	ldr	r2, [pc, #84]	; (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d10c      	bne.n	8004740 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800472c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	4313      	orrs	r3, r2
 8004736:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40010000 	.word	0x40010000
 8004764:	40000400 	.word	0x40000400
 8004768:	40000800 	.word	0x40000800
 800476c:	40000c00 	.word	0x40000c00
 8004770:	40010400 	.word	0x40010400
 8004774:	40014000 	.word	0x40014000
 8004778:	40001800 	.word	0x40001800

0800477c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800477c:	b084      	sub	sp, #16
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	f107 001c 	add.w	r0, r7, #28
 800478a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004790:	2b01      	cmp	r3, #1
 8004792:	d122      	bne.n	80047da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80047a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d105      	bne.n	80047ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f001 fbee 	bl	8005fb0 <USB_CoreReset>
 80047d4:	4603      	mov	r3, r0
 80047d6:	73fb      	strb	r3, [r7, #15]
 80047d8:	e01a      	b.n	8004810 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f001 fbe2 	bl	8005fb0 <USB_CoreReset>
 80047ec:	4603      	mov	r3, r0
 80047ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	639a      	str	r2, [r3, #56]	; 0x38
 8004802:	e005      	b.n	8004810 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	2b01      	cmp	r3, #1
 8004814:	d10b      	bne.n	800482e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f043 0206 	orr.w	r2, r3, #6
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f043 0220 	orr.w	r2, r3, #32
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800482e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800483a:	b004      	add	sp, #16
 800483c:	4770      	bx	lr
	...

08004840 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	4613      	mov	r3, r2
 800484c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800484e:	79fb      	ldrb	r3, [r7, #7]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d165      	bne.n	8004920 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4a41      	ldr	r2, [pc, #260]	; (800495c <USB_SetTurnaroundTime+0x11c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d906      	bls.n	800486a <USB_SetTurnaroundTime+0x2a>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4a40      	ldr	r2, [pc, #256]	; (8004960 <USB_SetTurnaroundTime+0x120>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d202      	bcs.n	800486a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004864:	230f      	movs	r3, #15
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	e062      	b.n	8004930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4a3c      	ldr	r2, [pc, #240]	; (8004960 <USB_SetTurnaroundTime+0x120>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d306      	bcc.n	8004880 <USB_SetTurnaroundTime+0x40>
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4a3b      	ldr	r2, [pc, #236]	; (8004964 <USB_SetTurnaroundTime+0x124>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d202      	bcs.n	8004880 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800487a:	230e      	movs	r3, #14
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	e057      	b.n	8004930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4a38      	ldr	r2, [pc, #224]	; (8004964 <USB_SetTurnaroundTime+0x124>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d306      	bcc.n	8004896 <USB_SetTurnaroundTime+0x56>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4a37      	ldr	r2, [pc, #220]	; (8004968 <USB_SetTurnaroundTime+0x128>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d202      	bcs.n	8004896 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004890:	230d      	movs	r3, #13
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	e04c      	b.n	8004930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	4a33      	ldr	r2, [pc, #204]	; (8004968 <USB_SetTurnaroundTime+0x128>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d306      	bcc.n	80048ac <USB_SetTurnaroundTime+0x6c>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4a32      	ldr	r2, [pc, #200]	; (800496c <USB_SetTurnaroundTime+0x12c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d802      	bhi.n	80048ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80048a6:	230c      	movs	r3, #12
 80048a8:	617b      	str	r3, [r7, #20]
 80048aa:	e041      	b.n	8004930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4a2f      	ldr	r2, [pc, #188]	; (800496c <USB_SetTurnaroundTime+0x12c>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d906      	bls.n	80048c2 <USB_SetTurnaroundTime+0x82>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4a2e      	ldr	r2, [pc, #184]	; (8004970 <USB_SetTurnaroundTime+0x130>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d802      	bhi.n	80048c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80048bc:	230b      	movs	r3, #11
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	e036      	b.n	8004930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4a2a      	ldr	r2, [pc, #168]	; (8004970 <USB_SetTurnaroundTime+0x130>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d906      	bls.n	80048d8 <USB_SetTurnaroundTime+0x98>
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4a29      	ldr	r2, [pc, #164]	; (8004974 <USB_SetTurnaroundTime+0x134>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d802      	bhi.n	80048d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80048d2:	230a      	movs	r3, #10
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	e02b      	b.n	8004930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4a26      	ldr	r2, [pc, #152]	; (8004974 <USB_SetTurnaroundTime+0x134>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d906      	bls.n	80048ee <USB_SetTurnaroundTime+0xae>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4a25      	ldr	r2, [pc, #148]	; (8004978 <USB_SetTurnaroundTime+0x138>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d202      	bcs.n	80048ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80048e8:	2309      	movs	r3, #9
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	e020      	b.n	8004930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	4a21      	ldr	r2, [pc, #132]	; (8004978 <USB_SetTurnaroundTime+0x138>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d306      	bcc.n	8004904 <USB_SetTurnaroundTime+0xc4>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	4a20      	ldr	r2, [pc, #128]	; (800497c <USB_SetTurnaroundTime+0x13c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d802      	bhi.n	8004904 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80048fe:	2308      	movs	r3, #8
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	e015      	b.n	8004930 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4a1d      	ldr	r2, [pc, #116]	; (800497c <USB_SetTurnaroundTime+0x13c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d906      	bls.n	800491a <USB_SetTurnaroundTime+0xda>
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4a1c      	ldr	r2, [pc, #112]	; (8004980 <USB_SetTurnaroundTime+0x140>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d202      	bcs.n	800491a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004914:	2307      	movs	r3, #7
 8004916:	617b      	str	r3, [r7, #20]
 8004918:	e00a      	b.n	8004930 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800491a:	2306      	movs	r3, #6
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	e007      	b.n	8004930 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d102      	bne.n	800492c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004926:	2309      	movs	r3, #9
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	e001      	b.n	8004930 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800492c:	2309      	movs	r3, #9
 800492e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	029b      	lsls	r3, r3, #10
 8004944:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004948:	431a      	orrs	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	00d8acbf 	.word	0x00d8acbf
 8004960:	00e4e1c0 	.word	0x00e4e1c0
 8004964:	00f42400 	.word	0x00f42400
 8004968:	01067380 	.word	0x01067380
 800496c:	011a499f 	.word	0x011a499f
 8004970:	01312cff 	.word	0x01312cff
 8004974:	014ca43f 	.word	0x014ca43f
 8004978:	016e3600 	.word	0x016e3600
 800497c:	01a6ab1f 	.word	0x01a6ab1f
 8004980:	01e84800 	.word	0x01e84800

08004984 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f043 0201 	orr.w	r2, r3, #1
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f023 0201 	bic.w	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d115      	bne.n	8004a16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80049f6:	2001      	movs	r0, #1
 80049f8:	f7fc fb22 	bl	8001040 <HAL_Delay>
      ms++;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3301      	adds	r3, #1
 8004a00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f001 fa45 	bl	8005e92 <USB_GetMode>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d01e      	beq.n	8004a4c <USB_SetCurrentMode+0x84>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b31      	cmp	r3, #49	; 0x31
 8004a12:	d9f0      	bls.n	80049f6 <USB_SetCurrentMode+0x2e>
 8004a14:	e01a      	b.n	8004a4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a16:	78fb      	ldrb	r3, [r7, #3]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d115      	bne.n	8004a48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a28:	2001      	movs	r0, #1
 8004a2a:	f7fc fb09 	bl	8001040 <HAL_Delay>
      ms++;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	3301      	adds	r3, #1
 8004a32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f001 fa2c 	bl	8005e92 <USB_GetMode>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d005      	beq.n	8004a4c <USB_SetCurrentMode+0x84>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2b31      	cmp	r3, #49	; 0x31
 8004a44:	d9f0      	bls.n	8004a28 <USB_SetCurrentMode+0x60>
 8004a46:	e001      	b.n	8004a4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e005      	b.n	8004a58 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2b32      	cmp	r3, #50	; 0x32
 8004a50:	d101      	bne.n	8004a56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a60:	b084      	sub	sp, #16
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b086      	sub	sp, #24
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	e009      	b.n	8004a94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	3340      	adds	r3, #64	; 0x40
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	3301      	adds	r3, #1
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	2b0e      	cmp	r3, #14
 8004a98:	d9f2      	bls.n	8004a80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d11c      	bne.n	8004ada <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aae:	f043 0302 	orr.w	r3, r3, #2
 8004ab2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38
 8004ad8:	e00b      	b.n	8004af2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004af8:	461a      	mov	r2, r3
 8004afa:	2300      	movs	r3, #0
 8004afc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b04:	4619      	mov	r1, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	680b      	ldr	r3, [r1, #0]
 8004b10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d10c      	bne.n	8004b32 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d104      	bne.n	8004b28 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b1e:	2100      	movs	r1, #0
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f965 	bl	8004df0 <USB_SetDevSpeed>
 8004b26:	e008      	b.n	8004b3a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b28:	2101      	movs	r1, #1
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f960 	bl	8004df0 <USB_SetDevSpeed>
 8004b30:	e003      	b.n	8004b3a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b32:	2103      	movs	r1, #3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f95b 	bl	8004df0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b3a:	2110      	movs	r1, #16
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f8f3 	bl	8004d28 <USB_FlushTxFifo>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f91f 	bl	8004d90 <USB_FlushRxFifo>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b62:	461a      	mov	r2, r3
 8004b64:	2300      	movs	r3, #0
 8004b66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6e:	461a      	mov	r2, r3
 8004b70:	2300      	movs	r3, #0
 8004b72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b80:	2300      	movs	r3, #0
 8004b82:	613b      	str	r3, [r7, #16]
 8004b84:	e043      	b.n	8004c0e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b9c:	d118      	bne.n	8004bd0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10a      	bne.n	8004bba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	e013      	b.n	8004be2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	e008      	b.n	8004be2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2300      	movs	r3, #0
 8004be0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bee:	461a      	mov	r2, r3
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	461a      	mov	r2, r3
 8004c02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d3b7      	bcc.n	8004b86 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	e043      	b.n	8004ca4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c32:	d118      	bne.n	8004c66 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10a      	bne.n	8004c50 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c46:	461a      	mov	r2, r3
 8004c48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	e013      	b.n	8004c78 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	015a      	lsls	r2, r3, #5
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	4413      	add	r3, r2
 8004c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	e008      	b.n	8004c78 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c72:	461a      	mov	r2, r3
 8004c74:	2300      	movs	r3, #0
 8004c76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c84:	461a      	mov	r2, r3
 8004c86:	2300      	movs	r3, #0
 8004c88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c96:	461a      	mov	r2, r3
 8004c98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	613b      	str	r3, [r7, #16]
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d3b7      	bcc.n	8004c1c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ccc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d105      	bne.n	8004ce0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	f043 0210 	orr.w	r2, r3, #16
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699a      	ldr	r2, [r3, #24]
 8004ce4:	4b0f      	ldr	r3, [pc, #60]	; (8004d24 <USB_DevInit+0x2c4>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	f043 0208 	orr.w	r2, r3, #8
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d107      	bne.n	8004d14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d0c:	f043 0304 	orr.w	r3, r3, #4
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d20:	b004      	add	sp, #16
 8004d22:	4770      	bx	lr
 8004d24:	803c3800 	.word	0x803c3800

08004d28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4a13      	ldr	r2, [pc, #76]	; (8004d8c <USB_FlushTxFifo+0x64>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d901      	bls.n	8004d48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e01b      	b.n	8004d80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	daf2      	bge.n	8004d36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d50:	2300      	movs	r3, #0
 8004d52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	019b      	lsls	r3, r3, #6
 8004d58:	f043 0220 	orr.w	r2, r3, #32
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	3301      	adds	r3, #1
 8004d64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4a08      	ldr	r2, [pc, #32]	; (8004d8c <USB_FlushTxFifo+0x64>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d901      	bls.n	8004d72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e006      	b.n	8004d80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	d0f0      	beq.n	8004d60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	00030d40 	.word	0x00030d40

08004d90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4a11      	ldr	r2, [pc, #68]	; (8004dec <USB_FlushRxFifo+0x5c>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d901      	bls.n	8004dae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e018      	b.n	8004de0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	daf2      	bge.n	8004d9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2210      	movs	r2, #16
 8004dbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4a08      	ldr	r2, [pc, #32]	; (8004dec <USB_FlushRxFifo+0x5c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d901      	bls.n	8004dd2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e006      	b.n	8004de0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0310 	and.w	r3, r3, #16
 8004dda:	2b10      	cmp	r3, #16
 8004ddc:	d0f0      	beq.n	8004dc0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	00030d40 	.word	0x00030d40

08004df0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	78fb      	ldrb	r3, [r7, #3]
 8004e0a:	68f9      	ldr	r1, [r7, #12]
 8004e0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e10:	4313      	orrs	r3, r2
 8004e12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b087      	sub	sp, #28
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 0306 	and.w	r3, r3, #6
 8004e3a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e42:	2300      	movs	r3, #0
 8004e44:	75fb      	strb	r3, [r7, #23]
 8004e46:	e00a      	b.n	8004e5e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d002      	beq.n	8004e54 <USB_GetDevSpeed+0x32>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b06      	cmp	r3, #6
 8004e52:	d102      	bne.n	8004e5a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e54:	2302      	movs	r3, #2
 8004e56:	75fb      	strb	r3, [r7, #23]
 8004e58:	e001      	b.n	8004e5e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e5a:	230f      	movs	r3, #15
 8004e5c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d13a      	bne.n	8004efe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8e:	69da      	ldr	r2, [r3, #28]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	2101      	movs	r1, #1
 8004e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	68f9      	ldr	r1, [r7, #12]
 8004ea2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d155      	bne.n	8004f6c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	791b      	ldrb	r3, [r3, #4]
 8004eda:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004edc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	059b      	lsls	r3, r3, #22
 8004ee2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	0151      	lsls	r1, r2, #5
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	440a      	add	r2, r1
 8004eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	e036      	b.n	8004f6c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f04:	69da      	ldr	r2, [r3, #28]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	2101      	movs	r1, #1
 8004f10:	fa01 f303 	lsl.w	r3, r1, r3
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	68f9      	ldr	r1, [r7, #12]
 8004f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d11a      	bne.n	8004f6c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	791b      	ldrb	r3, [r3, #4]
 8004f50:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f52:	430b      	orrs	r3, r1
 8004f54:	4313      	orrs	r3, r2
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	0151      	lsls	r1, r2, #5
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f6a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b085      	sub	sp, #20
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	785b      	ldrb	r3, [r3, #1]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d161      	bne.n	800505c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004faa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fae:	d11f      	bne.n	8004ff0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	0151      	lsls	r1, r2, #5
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	440a      	add	r2, r1
 8004fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	0151      	lsls	r1, r2, #5
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	440a      	add	r2, r1
 8004fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	2101      	movs	r1, #1
 8005002:	fa01 f303 	lsl.w	r3, r1, r3
 8005006:	b29b      	uxth	r3, r3
 8005008:	43db      	mvns	r3, r3
 800500a:	68f9      	ldr	r1, [r7, #12]
 800500c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005010:	4013      	ands	r3, r2
 8005012:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501a:	69da      	ldr	r2, [r3, #28]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	f003 030f 	and.w	r3, r3, #15
 8005024:	2101      	movs	r1, #1
 8005026:	fa01 f303 	lsl.w	r3, r1, r3
 800502a:	b29b      	uxth	r3, r3
 800502c:	43db      	mvns	r3, r3
 800502e:	68f9      	ldr	r1, [r7, #12]
 8005030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005034:	4013      	ands	r3, r2
 8005036:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	0159      	lsls	r1, r3, #5
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	440b      	add	r3, r1
 800504e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005052:	4619      	mov	r1, r3
 8005054:	4b35      	ldr	r3, [pc, #212]	; (800512c <USB_DeactivateEndpoint+0x1b0>)
 8005056:	4013      	ands	r3, r2
 8005058:	600b      	str	r3, [r1, #0]
 800505a:	e060      	b.n	800511e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800506e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005072:	d11f      	bne.n	80050b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	0151      	lsls	r1, r2, #5
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	440a      	add	r2, r1
 800508a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800508e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005092:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	0151      	lsls	r1, r2, #5
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	440a      	add	r2, r1
 80050aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	2101      	movs	r1, #1
 80050c6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ca:	041b      	lsls	r3, r3, #16
 80050cc:	43db      	mvns	r3, r3
 80050ce:	68f9      	ldr	r1, [r7, #12]
 80050d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050d4:	4013      	ands	r3, r2
 80050d6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	2101      	movs	r1, #1
 80050ea:	fa01 f303 	lsl.w	r3, r1, r3
 80050ee:	041b      	lsls	r3, r3, #16
 80050f0:	43db      	mvns	r3, r3
 80050f2:	68f9      	ldr	r1, [r7, #12]
 80050f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050f8:	4013      	ands	r3, r2
 80050fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	0159      	lsls	r1, r3, #5
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	440b      	add	r3, r1
 8005112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005116:	4619      	mov	r1, r3
 8005118:	4b05      	ldr	r3, [pc, #20]	; (8005130 <USB_DeactivateEndpoint+0x1b4>)
 800511a:	4013      	ands	r3, r2
 800511c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	ec337800 	.word	0xec337800
 8005130:	eff37800 	.word	0xeff37800

08005134 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08a      	sub	sp, #40	; 0x28
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	4613      	mov	r3, r2
 8005140:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	785b      	ldrb	r3, [r3, #1]
 8005150:	2b01      	cmp	r3, #1
 8005152:	f040 815c 	bne.w	800540e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d132      	bne.n	80051c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	0151      	lsls	r1, r2, #5
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	440a      	add	r2, r1
 8005174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005178:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800517c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005180:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	0151      	lsls	r1, r2, #5
 8005194:	69fa      	ldr	r2, [r7, #28]
 8005196:	440a      	add	r2, r1
 8005198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051bc:	0cdb      	lsrs	r3, r3, #19
 80051be:	04db      	lsls	r3, r3, #19
 80051c0:	6113      	str	r3, [r2, #16]
 80051c2:	e074      	b.n	80052ae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	0151      	lsls	r1, r2, #5
 80051d6:	69fa      	ldr	r2, [r7, #28]
 80051d8:	440a      	add	r2, r1
 80051da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051de:	0cdb      	lsrs	r3, r3, #19
 80051e0:	04db      	lsls	r3, r3, #19
 80051e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005202:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005206:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	4413      	add	r3, r2
 8005210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005214:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	6999      	ldr	r1, [r3, #24]
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	440b      	add	r3, r1
 8005220:	1e59      	subs	r1, r3, #1
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	fbb1 f3f3 	udiv	r3, r1, r3
 800522a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800522c:	4b9d      	ldr	r3, [pc, #628]	; (80054a4 <USB_EPStartXfer+0x370>)
 800522e:	400b      	ands	r3, r1
 8005230:	69b9      	ldr	r1, [r7, #24]
 8005232:	0148      	lsls	r0, r1, #5
 8005234:	69f9      	ldr	r1, [r7, #28]
 8005236:	4401      	add	r1, r0
 8005238:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800523c:	4313      	orrs	r3, r2
 800523e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	4413      	add	r3, r2
 8005248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005256:	69b9      	ldr	r1, [r7, #24]
 8005258:	0148      	lsls	r0, r1, #5
 800525a:	69f9      	ldr	r1, [r7, #28]
 800525c:	4401      	add	r1, r0
 800525e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005262:	4313      	orrs	r3, r2
 8005264:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	791b      	ldrb	r3, [r3, #4]
 800526a:	2b01      	cmp	r3, #1
 800526c:	d11f      	bne.n	80052ae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	440a      	add	r2, r1
 8005284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005288:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800528c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052ac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d14b      	bne.n	800534c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d009      	beq.n	80052d0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c8:	461a      	mov	r2, r3
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	791b      	ldrb	r3, [r3, #4]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d128      	bne.n	800532a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d110      	bne.n	800530a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	0151      	lsls	r1, r2, #5
 80052fa:	69fa      	ldr	r2, [r7, #28]
 80052fc:	440a      	add	r2, r1
 80052fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005302:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	e00f      	b.n	800532a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	0151      	lsls	r1, r2, #5
 800531c:	69fa      	ldr	r2, [r7, #28]
 800531e:	440a      	add	r2, r1
 8005320:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005328:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	0151      	lsls	r1, r2, #5
 800533c:	69fa      	ldr	r2, [r7, #28]
 800533e:	440a      	add	r2, r1
 8005340:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005344:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	e133      	b.n	80055b4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	0151      	lsls	r1, r2, #5
 800535e:	69fa      	ldr	r2, [r7, #28]
 8005360:	440a      	add	r2, r1
 8005362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005366:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800536a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	791b      	ldrb	r3, [r3, #4]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d015      	beq.n	80053a0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 811b 	beq.w	80055b4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	2101      	movs	r1, #1
 8005390:	fa01 f303 	lsl.w	r3, r1, r3
 8005394:	69f9      	ldr	r1, [r7, #28]
 8005396:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800539a:	4313      	orrs	r3, r2
 800539c:	634b      	str	r3, [r1, #52]	; 0x34
 800539e:	e109      	b.n	80055b4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d110      	bne.n	80053d2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	0151      	lsls	r1, r2, #5
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	440a      	add	r2, r1
 80053c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	e00f      	b.n	80053f2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	0151      	lsls	r1, r2, #5
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	440a      	add	r2, r1
 80053e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053f0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	6919      	ldr	r1, [r3, #16]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	781a      	ldrb	r2, [r3, #0]
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	b298      	uxth	r0, r3
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	4603      	mov	r3, r0
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 fade 	bl	80059c8 <USB_WritePacket>
 800540c:	e0d2      	b.n	80055b4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	440a      	add	r2, r1
 8005424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005428:	0cdb      	lsrs	r3, r3, #19
 800542a:	04db      	lsls	r3, r3, #19
 800542c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	0151      	lsls	r1, r2, #5
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	440a      	add	r2, r1
 8005444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005448:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800544c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005450:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d126      	bne.n	80054a8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005470:	69b9      	ldr	r1, [r7, #24]
 8005472:	0148      	lsls	r0, r1, #5
 8005474:	69f9      	ldr	r1, [r7, #28]
 8005476:	4401      	add	r1, r0
 8005478:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800547c:	4313      	orrs	r3, r2
 800547e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	440a      	add	r2, r1
 8005496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800549a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800549e:	6113      	str	r3, [r2, #16]
 80054a0:	e03a      	b.n	8005518 <USB_EPStartXfer+0x3e4>
 80054a2:	bf00      	nop
 80054a4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	699a      	ldr	r2, [r3, #24]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	1e5a      	subs	r2, r3, #1
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054bc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	8afa      	ldrh	r2, [r7, #22]
 80054c4:	fb03 f202 	mul.w	r2, r3, r2
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	8afb      	ldrh	r3, [r7, #22]
 80054dc:	04d9      	lsls	r1, r3, #19
 80054de:	4b38      	ldr	r3, [pc, #224]	; (80055c0 <USB_EPStartXfer+0x48c>)
 80054e0:	400b      	ands	r3, r1
 80054e2:	69b9      	ldr	r1, [r7, #24]
 80054e4:	0148      	lsls	r0, r1, #5
 80054e6:	69f9      	ldr	r1, [r7, #28]
 80054e8:	4401      	add	r1, r0
 80054ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054ee:	4313      	orrs	r3, r2
 80054f0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005508:	69b9      	ldr	r1, [r7, #24]
 800550a:	0148      	lsls	r0, r1, #5
 800550c:	69f9      	ldr	r1, [r7, #28]
 800550e:	4401      	add	r1, r0
 8005510:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005514:	4313      	orrs	r3, r2
 8005516:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005518:	79fb      	ldrb	r3, [r7, #7]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d10d      	bne.n	800553a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d009      	beq.n	800553a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6919      	ldr	r1, [r3, #16]
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	460a      	mov	r2, r1
 8005538:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	791b      	ldrb	r3, [r3, #4]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d128      	bne.n	8005594 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554e:	2b00      	cmp	r3, #0
 8005550:	d110      	bne.n	8005574 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	0151      	lsls	r1, r2, #5
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	440a      	add	r2, r1
 8005568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800556c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	e00f      	b.n	8005594 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	0151      	lsls	r1, r2, #5
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	440a      	add	r2, r1
 800558a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800558e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005592:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	1ff80000 	.word	0x1ff80000

080055c4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	f040 80ce 	bne.w	8005782 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d132      	bne.n	8005654 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	0151      	lsls	r1, r2, #5
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	440a      	add	r2, r1
 8005604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005608:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800560c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005610:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	440a      	add	r2, r1
 8005628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005630:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	0151      	lsls	r1, r2, #5
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	440a      	add	r2, r1
 8005648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564c:	0cdb      	lsrs	r3, r3, #19
 800564e:	04db      	lsls	r3, r3, #19
 8005650:	6113      	str	r3, [r2, #16]
 8005652:	e04e      	b.n	80056f2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	693a      	ldr	r2, [r7, #16]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566e:	0cdb      	lsrs	r3, r3, #19
 8005670:	04db      	lsls	r3, r3, #19
 8005672:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	0151      	lsls	r1, r2, #5
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	440a      	add	r2, r1
 800568a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005692:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005696:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	699a      	ldr	r2, [r3, #24]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d903      	bls.n	80056ac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	68da      	ldr	r2, [r3, #12]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	0151      	lsls	r1, r2, #5
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	440a      	add	r2, r1
 80056c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e2:	6939      	ldr	r1, [r7, #16]
 80056e4:	0148      	lsls	r0, r1, #5
 80056e6:	6979      	ldr	r1, [r7, #20]
 80056e8:	4401      	add	r1, r0
 80056ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056ee:	4313      	orrs	r3, r2
 80056f0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d11e      	bne.n	8005736 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d009      	beq.n	8005714 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	015a      	lsls	r2, r3, #5
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	4413      	add	r3, r2
 8005708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570c:	461a      	mov	r2, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	695b      	ldr	r3, [r3, #20]
 8005712:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	0151      	lsls	r1, r2, #5
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	440a      	add	r2, r1
 800572a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800572e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	e097      	b.n	8005866 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	440a      	add	r2, r1
 800574c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005750:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005754:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 8083 	beq.w	8005866 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	2101      	movs	r1, #1
 8005772:	fa01 f303 	lsl.w	r3, r1, r3
 8005776:	6979      	ldr	r1, [r7, #20]
 8005778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800577c:	4313      	orrs	r3, r2
 800577e:	634b      	str	r3, [r1, #52]	; 0x34
 8005780:	e071      	b.n	8005866 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	440a      	add	r2, r1
 8005798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579c:	0cdb      	lsrs	r3, r3, #19
 800579e:	04db      	lsls	r3, r3, #19
 80057a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	0151      	lsls	r1, r2, #5
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	440a      	add	r2, r1
 80057b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80057c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80057c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	0151      	lsls	r1, r2, #5
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	440a      	add	r2, r1
 80057f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005814:	6939      	ldr	r1, [r7, #16]
 8005816:	0148      	lsls	r0, r1, #5
 8005818:	6979      	ldr	r1, [r7, #20]
 800581a:	4401      	add	r1, r0
 800581c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005820:	4313      	orrs	r3, r2
 8005822:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d10d      	bne.n	8005846 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d009      	beq.n	8005846 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	6919      	ldr	r1, [r3, #16]
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005842:	460a      	mov	r2, r1
 8005844:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	0151      	lsls	r1, r2, #5
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	440a      	add	r2, r1
 800585c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005860:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005864:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	371c      	adds	r7, #28
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	785b      	ldrb	r3, [r3, #1]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d14a      	bne.n	8005928 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058aa:	f040 8086 	bne.w	80059ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	7812      	ldrb	r2, [r2, #0]
 80058c2:	0151      	lsls	r1, r2, #5
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	440a      	add	r2, r1
 80058c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	015a      	lsls	r2, r3, #5
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4413      	add	r3, r2
 80058dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	7812      	ldrb	r2, [r2, #0]
 80058e6:	0151      	lsls	r1, r2, #5
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	440a      	add	r2, r1
 80058ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3301      	adds	r3, #1
 80058fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005902:	4293      	cmp	r3, r2
 8005904:	d902      	bls.n	800590c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	75fb      	strb	r3, [r7, #23]
          break;
 800590a:	e056      	b.n	80059ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005924:	d0e7      	beq.n	80058f6 <USB_EPStopXfer+0x82>
 8005926:	e048      	b.n	80059ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800593c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005940:	d13b      	bne.n	80059ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	7812      	ldrb	r2, [r2, #0]
 8005956:	0151      	lsls	r1, r2, #5
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	440a      	add	r2, r1
 800595c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005960:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005964:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	7812      	ldrb	r2, [r2, #0]
 800597a:	0151      	lsls	r1, r2, #5
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	440a      	add	r2, r1
 8005980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005984:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005988:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	3301      	adds	r3, #1
 800598e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f242 7210 	movw	r2, #10000	; 0x2710
 8005996:	4293      	cmp	r3, r2
 8005998:	d902      	bls.n	80059a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	75fb      	strb	r3, [r7, #23]
          break;
 800599e:	e00c      	b.n	80059ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b8:	d0e7      	beq.n	800598a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80059ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	371c      	adds	r7, #28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b089      	sub	sp, #36	; 0x24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	4611      	mov	r1, r2
 80059d4:	461a      	mov	r2, r3
 80059d6:	460b      	mov	r3, r1
 80059d8:	71fb      	strb	r3, [r7, #7]
 80059da:	4613      	mov	r3, r2
 80059dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80059e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d123      	bne.n	8005a36 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80059ee:	88bb      	ldrh	r3, [r7, #4]
 80059f0:	3303      	adds	r3, #3
 80059f2:	089b      	lsrs	r3, r3, #2
 80059f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80059f6:	2300      	movs	r3, #0
 80059f8:	61bb      	str	r3, [r7, #24]
 80059fa:	e018      	b.n	8005a2e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80059fc:	79fb      	ldrb	r3, [r7, #7]
 80059fe:	031a      	lsls	r2, r3, #12
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a08:	461a      	mov	r2, r3
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	3301      	adds	r3, #1
 8005a14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	3301      	adds	r3, #1
 8005a26:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	61bb      	str	r3, [r7, #24]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d3e2      	bcc.n	80059fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3724      	adds	r7, #36	; 0x24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b08b      	sub	sp, #44	; 0x2c
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	089b      	lsrs	r3, r3, #2
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005a62:	88fb      	ldrh	r3, [r7, #6]
 8005a64:	f003 0303 	and.w	r3, r3, #3
 8005a68:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	623b      	str	r3, [r7, #32]
 8005a6e:	e014      	b.n	8005a9a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	3301      	adds	r3, #1
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	3301      	adds	r3, #1
 8005a86:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	3301      	adds	r3, #1
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	3301      	adds	r3, #1
 8005a98:	623b      	str	r3, [r7, #32]
 8005a9a:	6a3a      	ldr	r2, [r7, #32]
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d3e6      	bcc.n	8005a70 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005aa2:	8bfb      	ldrh	r3, [r7, #30]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d01e      	beq.n	8005ae6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	f107 0310 	add.w	r3, r7, #16
 8005ab8:	6812      	ldr	r2, [r2, #0]
 8005aba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	701a      	strb	r2, [r3, #0]
      i++;
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005ada:	8bfb      	ldrh	r3, [r7, #30]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ae0:	8bfb      	ldrh	r3, [r7, #30]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1ea      	bne.n	8005abc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	372c      	adds	r7, #44	; 0x2c
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	785b      	ldrb	r3, [r3, #1]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d12c      	bne.n	8005b6a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	db12      	blt.n	8005b48 <USB_EPSetStall+0x54>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00f      	beq.n	8005b48 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b46:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	e02b      	b.n	8005bc2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	db12      	blt.n	8005ba2 <USB_EPSetStall+0xae>
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00f      	beq.n	8005ba2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	0151      	lsls	r1, r2, #5
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	440a      	add	r2, r1
 8005b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ba0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	0151      	lsls	r1, r2, #5
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	440a      	add	r2, r1
 8005bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bc0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	785b      	ldrb	r3, [r3, #1]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d128      	bne.n	8005c3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	0151      	lsls	r1, r2, #5
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	440a      	add	r2, r1
 8005c02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	791b      	ldrb	r3, [r3, #4]
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	d003      	beq.n	8005c1c <USB_EPClearStall+0x4c>
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	791b      	ldrb	r3, [r3, #4]
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d138      	bne.n	8005c8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	0151      	lsls	r1, r2, #5
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	440a      	add	r2, r1
 8005c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	e027      	b.n	8005c8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	0151      	lsls	r1, r2, #5
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	440a      	add	r2, r1
 8005c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	791b      	ldrb	r3, [r3, #4]
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d003      	beq.n	8005c6e <USB_EPClearStall+0x9e>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	791b      	ldrb	r3, [r3, #4]
 8005c6a:	2b02      	cmp	r3, #2
 8005c6c:	d10f      	bne.n	8005c8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005cbe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	78fb      	ldrb	r3, [r7, #3]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005cd0:	68f9      	ldr	r1, [r7, #12]
 8005cd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d16:	f023 0302 	bic.w	r3, r3, #2
 8005d1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d44:	f023 0303 	bic.w	r3, r3, #3
 8005d48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d58:	f043 0302 	orr.w	r3, r3, #2
 8005d5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b085      	sub	sp, #20
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4013      	ands	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d84:	68fb      	ldr	r3, [r7, #12]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b085      	sub	sp, #20
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	4013      	ands	r3, r2
 8005db4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	0c1b      	lsrs	r3, r3, #16
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b085      	sub	sp, #20
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	4013      	ands	r3, r2
 8005de8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	b29b      	uxth	r3, r3
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b085      	sub	sp, #20
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	460b      	mov	r3, r1
 8005e04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	4013      	ands	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e28:	68bb      	ldr	r3, [r7, #8]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b087      	sub	sp, #28
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005e5a:	78fb      	ldrb	r3, [r7, #3]
 8005e5c:	f003 030f 	and.w	r3, r3, #15
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	fa22 f303 	lsr.w	r3, r2, r3
 8005e66:	01db      	lsls	r3, r3, #7
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	4013      	ands	r3, r2
 8005e82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e84:	68bb      	ldr	r3, [r7, #8]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b085      	sub	sp, #20
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005ecc:	f023 0307 	bic.w	r3, r3, #7
 8005ed0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	460b      	mov	r3, r1
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	333c      	adds	r3, #60	; 0x3c
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	4a26      	ldr	r2, [pc, #152]	; (8005fac <USB_EP0_OutStart+0xb8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d90a      	bls.n	8005f2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f28:	d101      	bne.n	8005f2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e037      	b.n	8005f9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f34:	461a      	mov	r2, r3
 8005f36:	2300      	movs	r3, #0
 8005f38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f5c:	f043 0318 	orr.w	r3, r3, #24
 8005f60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f70:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005f74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f76:	7afb      	ldrb	r3, [r7, #11]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d10f      	bne.n	8005f9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f82:	461a      	mov	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f96:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	4f54300a 	.word	0x4f54300a

08005fb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4a13      	ldr	r2, [pc, #76]	; (8006014 <USB_CoreReset+0x64>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d901      	bls.n	8005fce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e01b      	b.n	8006006 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	daf2      	bge.n	8005fbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f043 0201 	orr.w	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4a09      	ldr	r2, [pc, #36]	; (8006014 <USB_CoreReset+0x64>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d901      	bls.n	8005ff8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e006      	b.n	8006006 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b01      	cmp	r3, #1
 8006002:	d0f0      	beq.n	8005fe6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	00030d40 	.word	0x00030d40

08006018 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	460b      	mov	r3, r1
 8006022:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006024:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006028:	f002 fca2 	bl	8008970 <USBD_static_malloc>
 800602c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d109      	bne.n	8006048 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	32b0      	adds	r2, #176	; 0xb0
 800603e:	2100      	movs	r1, #0
 8006040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006044:	2302      	movs	r3, #2
 8006046:	e0d4      	b.n	80061f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006048:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800604c:	2100      	movs	r1, #0
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f002 fcf6 	bl	8008a40 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	32b0      	adds	r2, #176	; 0xb0
 800605e:	68f9      	ldr	r1, [r7, #12]
 8006060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	32b0      	adds	r2, #176	; 0xb0
 800606e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	7c1b      	ldrb	r3, [r3, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d138      	bne.n	80060f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006080:	4b5e      	ldr	r3, [pc, #376]	; (80061fc <USBD_CDC_Init+0x1e4>)
 8006082:	7819      	ldrb	r1, [r3, #0]
 8006084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006088:	2202      	movs	r2, #2
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f002 fb4d 	bl	800872a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006090:	4b5a      	ldr	r3, [pc, #360]	; (80061fc <USBD_CDC_Init+0x1e4>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	f003 020f 	and.w	r2, r3, #15
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	440b      	add	r3, r1
 80060a4:	3324      	adds	r3, #36	; 0x24
 80060a6:	2201      	movs	r2, #1
 80060a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80060aa:	4b55      	ldr	r3, [pc, #340]	; (8006200 <USBD_CDC_Init+0x1e8>)
 80060ac:	7819      	ldrb	r1, [r3, #0]
 80060ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060b2:	2202      	movs	r2, #2
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f002 fb38 	bl	800872a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80060ba:	4b51      	ldr	r3, [pc, #324]	; (8006200 <USBD_CDC_Init+0x1e8>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	f003 020f 	and.w	r2, r3, #15
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	440b      	add	r3, r1
 80060ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80060d2:	2201      	movs	r2, #1
 80060d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80060d6:	4b4b      	ldr	r3, [pc, #300]	; (8006204 <USBD_CDC_Init+0x1ec>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	f003 020f 	and.w	r2, r3, #15
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	440b      	add	r3, r1
 80060ea:	3326      	adds	r3, #38	; 0x26
 80060ec:	2210      	movs	r2, #16
 80060ee:	801a      	strh	r2, [r3, #0]
 80060f0:	e035      	b.n	800615e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80060f2:	4b42      	ldr	r3, [pc, #264]	; (80061fc <USBD_CDC_Init+0x1e4>)
 80060f4:	7819      	ldrb	r1, [r3, #0]
 80060f6:	2340      	movs	r3, #64	; 0x40
 80060f8:	2202      	movs	r2, #2
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f002 fb15 	bl	800872a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006100:	4b3e      	ldr	r3, [pc, #248]	; (80061fc <USBD_CDC_Init+0x1e4>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	f003 020f 	and.w	r2, r3, #15
 8006108:	6879      	ldr	r1, [r7, #4]
 800610a:	4613      	mov	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	440b      	add	r3, r1
 8006114:	3324      	adds	r3, #36	; 0x24
 8006116:	2201      	movs	r2, #1
 8006118:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800611a:	4b39      	ldr	r3, [pc, #228]	; (8006200 <USBD_CDC_Init+0x1e8>)
 800611c:	7819      	ldrb	r1, [r3, #0]
 800611e:	2340      	movs	r3, #64	; 0x40
 8006120:	2202      	movs	r2, #2
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f002 fb01 	bl	800872a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006128:	4b35      	ldr	r3, [pc, #212]	; (8006200 <USBD_CDC_Init+0x1e8>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	f003 020f 	and.w	r2, r3, #15
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	4613      	mov	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	440b      	add	r3, r1
 800613c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006140:	2201      	movs	r2, #1
 8006142:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006144:	4b2f      	ldr	r3, [pc, #188]	; (8006204 <USBD_CDC_Init+0x1ec>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	f003 020f 	and.w	r2, r3, #15
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	440b      	add	r3, r1
 8006158:	3326      	adds	r3, #38	; 0x26
 800615a:	2210      	movs	r2, #16
 800615c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800615e:	4b29      	ldr	r3, [pc, #164]	; (8006204 <USBD_CDC_Init+0x1ec>)
 8006160:	7819      	ldrb	r1, [r3, #0]
 8006162:	2308      	movs	r3, #8
 8006164:	2203      	movs	r2, #3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f002 fadf 	bl	800872a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800616c:	4b25      	ldr	r3, [pc, #148]	; (8006204 <USBD_CDC_Init+0x1ec>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 020f 	and.w	r2, r3, #15
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4613      	mov	r3, r2
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	440b      	add	r3, r1
 8006180:	3324      	adds	r3, #36	; 0x24
 8006182:	2201      	movs	r2, #1
 8006184:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	33b0      	adds	r3, #176	; 0xb0
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80061bc:	2302      	movs	r3, #2
 80061be:	e018      	b.n	80061f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	7c1b      	ldrb	r3, [r3, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061c8:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <USBD_CDC_Init+0x1e8>)
 80061ca:	7819      	ldrb	r1, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f002 fb96 	bl	8008908 <USBD_LL_PrepareReceive>
 80061dc:	e008      	b.n	80061f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80061de:	4b08      	ldr	r3, [pc, #32]	; (8006200 <USBD_CDC_Init+0x1e8>)
 80061e0:	7819      	ldrb	r1, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061e8:	2340      	movs	r3, #64	; 0x40
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f002 fb8c 	bl	8008908 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	200000db 	.word	0x200000db
 8006200:	200000dc 	.word	0x200000dc
 8006204:	200000dd 	.word	0x200000dd

08006208 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006214:	4b3a      	ldr	r3, [pc, #232]	; (8006300 <USBD_CDC_DeInit+0xf8>)
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	4619      	mov	r1, r3
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f002 faab 	bl	8008776 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006220:	4b37      	ldr	r3, [pc, #220]	; (8006300 <USBD_CDC_DeInit+0xf8>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	f003 020f 	and.w	r2, r3, #15
 8006228:	6879      	ldr	r1, [r7, #4]
 800622a:	4613      	mov	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	440b      	add	r3, r1
 8006234:	3324      	adds	r3, #36	; 0x24
 8006236:	2200      	movs	r2, #0
 8006238:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800623a:	4b32      	ldr	r3, [pc, #200]	; (8006304 <USBD_CDC_DeInit+0xfc>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f002 fa98 	bl	8008776 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006246:	4b2f      	ldr	r3, [pc, #188]	; (8006304 <USBD_CDC_DeInit+0xfc>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	f003 020f 	and.w	r2, r3, #15
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	4613      	mov	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	4413      	add	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	440b      	add	r3, r1
 800625a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800625e:	2200      	movs	r2, #0
 8006260:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006262:	4b29      	ldr	r3, [pc, #164]	; (8006308 <USBD_CDC_DeInit+0x100>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	4619      	mov	r1, r3
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f002 fa84 	bl	8008776 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800626e:	4b26      	ldr	r3, [pc, #152]	; (8006308 <USBD_CDC_DeInit+0x100>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	f003 020f 	and.w	r2, r3, #15
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	440b      	add	r3, r1
 8006282:	3324      	adds	r3, #36	; 0x24
 8006284:	2200      	movs	r2, #0
 8006286:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006288:	4b1f      	ldr	r3, [pc, #124]	; (8006308 <USBD_CDC_DeInit+0x100>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	f003 020f 	and.w	r2, r3, #15
 8006290:	6879      	ldr	r1, [r7, #4]
 8006292:	4613      	mov	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4413      	add	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	440b      	add	r3, r1
 800629c:	3326      	adds	r3, #38	; 0x26
 800629e:	2200      	movs	r2, #0
 80062a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	32b0      	adds	r2, #176	; 0xb0
 80062ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d01f      	beq.n	80062f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	33b0      	adds	r3, #176	; 0xb0
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	32b0      	adds	r2, #176	; 0xb0
 80062d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f002 fb58 	bl	800898c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	32b0      	adds	r2, #176	; 0xb0
 80062e6:	2100      	movs	r1, #0
 80062e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	200000db 	.word	0x200000db
 8006304:	200000dc 	.word	0x200000dc
 8006308:	200000dd 	.word	0x200000dd

0800630c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	32b0      	adds	r2, #176	; 0xb0
 8006320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006324:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006338:	2303      	movs	r3, #3
 800633a:	e0bf      	b.n	80064bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006344:	2b00      	cmp	r3, #0
 8006346:	d050      	beq.n	80063ea <USBD_CDC_Setup+0xde>
 8006348:	2b20      	cmp	r3, #32
 800634a:	f040 80af 	bne.w	80064ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	88db      	ldrh	r3, [r3, #6]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d03a      	beq.n	80063cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	b25b      	sxtb	r3, r3
 800635c:	2b00      	cmp	r3, #0
 800635e:	da1b      	bge.n	8006398 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	33b0      	adds	r3, #176	; 0xb0
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006376:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	88d2      	ldrh	r2, [r2, #6]
 800637c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	88db      	ldrh	r3, [r3, #6]
 8006382:	2b07      	cmp	r3, #7
 8006384:	bf28      	it	cs
 8006386:	2307      	movcs	r3, #7
 8006388:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	89fa      	ldrh	r2, [r7, #14]
 800638e:	4619      	mov	r1, r3
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f001 fd89 	bl	8007ea8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006396:	e090      	b.n	80064ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	785a      	ldrb	r2, [r3, #1]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	88db      	ldrh	r3, [r3, #6]
 80063a6:	2b3f      	cmp	r3, #63	; 0x3f
 80063a8:	d803      	bhi.n	80063b2 <USBD_CDC_Setup+0xa6>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	88db      	ldrh	r3, [r3, #6]
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	e000      	b.n	80063b4 <USBD_CDC_Setup+0xa8>
 80063b2:	2240      	movs	r2, #64	; 0x40
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80063ba:	6939      	ldr	r1, [r7, #16]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80063c2:	461a      	mov	r2, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 fd9b 	bl	8007f00 <USBD_CtlPrepareRx>
      break;
 80063ca:	e076      	b.n	80064ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	33b0      	adds	r3, #176	; 0xb0
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	7850      	ldrb	r0, [r2, #1]
 80063e2:	2200      	movs	r2, #0
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	4798      	blx	r3
      break;
 80063e8:	e067      	b.n	80064ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	785b      	ldrb	r3, [r3, #1]
 80063ee:	2b0b      	cmp	r3, #11
 80063f0:	d851      	bhi.n	8006496 <USBD_CDC_Setup+0x18a>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <USBD_CDC_Setup+0xec>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	08006429 	.word	0x08006429
 80063fc:	080064a5 	.word	0x080064a5
 8006400:	08006497 	.word	0x08006497
 8006404:	08006497 	.word	0x08006497
 8006408:	08006497 	.word	0x08006497
 800640c:	08006497 	.word	0x08006497
 8006410:	08006497 	.word	0x08006497
 8006414:	08006497 	.word	0x08006497
 8006418:	08006497 	.word	0x08006497
 800641c:	08006497 	.word	0x08006497
 8006420:	08006453 	.word	0x08006453
 8006424:	0800647d 	.word	0x0800647d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b03      	cmp	r3, #3
 8006432:	d107      	bne.n	8006444 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006434:	f107 030a 	add.w	r3, r7, #10
 8006438:	2202      	movs	r2, #2
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 fd33 	bl	8007ea8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006442:	e032      	b.n	80064aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 fcbd 	bl	8007dc6 <USBD_CtlError>
            ret = USBD_FAIL;
 800644c:	2303      	movs	r3, #3
 800644e:	75fb      	strb	r3, [r7, #23]
          break;
 8006450:	e02b      	b.n	80064aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b03      	cmp	r3, #3
 800645c:	d107      	bne.n	800646e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800645e:	f107 030d 	add.w	r3, r7, #13
 8006462:	2201      	movs	r2, #1
 8006464:	4619      	mov	r1, r3
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 fd1e 	bl	8007ea8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800646c:	e01d      	b.n	80064aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 fca8 	bl	8007dc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006476:	2303      	movs	r3, #3
 8006478:	75fb      	strb	r3, [r7, #23]
          break;
 800647a:	e016      	b.n	80064aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b03      	cmp	r3, #3
 8006486:	d00f      	beq.n	80064a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006488:	6839      	ldr	r1, [r7, #0]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f001 fc9b 	bl	8007dc6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006490:	2303      	movs	r3, #3
 8006492:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006494:	e008      	b.n	80064a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f001 fc94 	bl	8007dc6 <USBD_CtlError>
          ret = USBD_FAIL;
 800649e:	2303      	movs	r3, #3
 80064a0:	75fb      	strb	r3, [r7, #23]
          break;
 80064a2:	e002      	b.n	80064aa <USBD_CDC_Setup+0x19e>
          break;
 80064a4:	bf00      	nop
 80064a6:	e008      	b.n	80064ba <USBD_CDC_Setup+0x1ae>
          break;
 80064a8:	bf00      	nop
      }
      break;
 80064aa:	e006      	b.n	80064ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f001 fc89 	bl	8007dc6 <USBD_CtlError>
      ret = USBD_FAIL;
 80064b4:	2303      	movs	r3, #3
 80064b6:	75fb      	strb	r3, [r7, #23]
      break;
 80064b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3718      	adds	r7, #24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80064d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	32b0      	adds	r2, #176	; 0xb0
 80064e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d101      	bne.n	80064ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e065      	b.n	80065ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	32b0      	adds	r2, #176	; 0xb0
 80064f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80064fe:	78fb      	ldrb	r3, [r7, #3]
 8006500:	f003 020f 	and.w	r2, r3, #15
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	4613      	mov	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	440b      	add	r3, r1
 8006510:	3318      	adds	r3, #24
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d02f      	beq.n	8006578 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006518:	78fb      	ldrb	r3, [r7, #3]
 800651a:	f003 020f 	and.w	r2, r3, #15
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	440b      	add	r3, r1
 800652a:	3318      	adds	r3, #24
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	78fb      	ldrb	r3, [r7, #3]
 8006530:	f003 010f 	and.w	r1, r3, #15
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	460b      	mov	r3, r1
 8006538:	00db      	lsls	r3, r3, #3
 800653a:	440b      	add	r3, r1
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4403      	add	r3, r0
 8006540:	3348      	adds	r3, #72	; 0x48
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	fbb2 f1f3 	udiv	r1, r2, r3
 8006548:	fb01 f303 	mul.w	r3, r1, r3
 800654c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800654e:	2b00      	cmp	r3, #0
 8006550:	d112      	bne.n	8006578 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006552:	78fb      	ldrb	r3, [r7, #3]
 8006554:	f003 020f 	and.w	r2, r3, #15
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	440b      	add	r3, r1
 8006564:	3318      	adds	r3, #24
 8006566:	2200      	movs	r2, #0
 8006568:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800656a:	78f9      	ldrb	r1, [r7, #3]
 800656c:	2300      	movs	r3, #0
 800656e:	2200      	movs	r2, #0
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f002 f9a8 	bl	80088c6 <USBD_LL_Transmit>
 8006576:	e01f      	b.n	80065b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2200      	movs	r2, #0
 800657c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	33b0      	adds	r3, #176	; 0xb0
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d010      	beq.n	80065b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	33b0      	adds	r3, #176	; 0xb0
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80065b4:	78fa      	ldrb	r2, [r7, #3]
 80065b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b084      	sub	sp, #16
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	460b      	mov	r3, r1
 80065cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	32b0      	adds	r2, #176	; 0xb0
 80065d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	32b0      	adds	r2, #176	; 0xb0
 80065e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e01a      	b.n	800662a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80065f4:	78fb      	ldrb	r3, [r7, #3]
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f002 f9a6 	bl	800894a <USBD_LL_GetRxDataSize>
 80065fe:	4602      	mov	r2, r0
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	33b0      	adds	r3, #176	; 0xb0
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4413      	add	r3, r2
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006624:	4611      	mov	r1, r2
 8006626:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b084      	sub	sp, #16
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	32b0      	adds	r2, #176	; 0xb0
 8006644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006648:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006650:	2303      	movs	r3, #3
 8006652:	e025      	b.n	80066a0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	33b0      	adds	r3, #176	; 0xb0
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	4413      	add	r3, r2
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d01a      	beq.n	800669e <USBD_CDC_EP0_RxReady+0x6c>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800666e:	2bff      	cmp	r3, #255	; 0xff
 8006670:	d015      	beq.n	800669e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	33b0      	adds	r3, #176	; 0xb0
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800668a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006692:	b292      	uxth	r2, r2
 8006694:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	22ff      	movs	r2, #255	; 0xff
 800669a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066b0:	2182      	movs	r1, #130	; 0x82
 80066b2:	4818      	ldr	r0, [pc, #96]	; (8006714 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066b4:	f000 fd4f 	bl	8007156 <USBD_GetEpDesc>
 80066b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80066ba:	2101      	movs	r1, #1
 80066bc:	4815      	ldr	r0, [pc, #84]	; (8006714 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066be:	f000 fd4a 	bl	8007156 <USBD_GetEpDesc>
 80066c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80066c4:	2181      	movs	r1, #129	; 0x81
 80066c6:	4813      	ldr	r0, [pc, #76]	; (8006714 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80066c8:	f000 fd45 	bl	8007156 <USBD_GetEpDesc>
 80066cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	2210      	movs	r2, #16
 80066d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d006      	beq.n	80066ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066e8:	711a      	strb	r2, [r3, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d006      	beq.n	8006702 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066fc:	711a      	strb	r2, [r3, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2243      	movs	r2, #67	; 0x43
 8006706:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006708:	4b02      	ldr	r3, [pc, #8]	; (8006714 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800670a:	4618      	mov	r0, r3
 800670c:	3718      	adds	r7, #24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20000098 	.word	0x20000098

08006718 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006720:	2182      	movs	r1, #130	; 0x82
 8006722:	4818      	ldr	r0, [pc, #96]	; (8006784 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006724:	f000 fd17 	bl	8007156 <USBD_GetEpDesc>
 8006728:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800672a:	2101      	movs	r1, #1
 800672c:	4815      	ldr	r0, [pc, #84]	; (8006784 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800672e:	f000 fd12 	bl	8007156 <USBD_GetEpDesc>
 8006732:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006734:	2181      	movs	r1, #129	; 0x81
 8006736:	4813      	ldr	r0, [pc, #76]	; (8006784 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006738:	f000 fd0d 	bl	8007156 <USBD_GetEpDesc>
 800673c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2210      	movs	r2, #16
 8006748:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d006      	beq.n	800675e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	2200      	movs	r2, #0
 8006754:	711a      	strb	r2, [r3, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	f042 0202 	orr.w	r2, r2, #2
 800675c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d006      	beq.n	8006772 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	711a      	strb	r2, [r3, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f042 0202 	orr.w	r2, r2, #2
 8006770:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2243      	movs	r2, #67	; 0x43
 8006776:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006778:	4b02      	ldr	r3, [pc, #8]	; (8006784 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20000098 	.word	0x20000098

08006788 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006790:	2182      	movs	r1, #130	; 0x82
 8006792:	4818      	ldr	r0, [pc, #96]	; (80067f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006794:	f000 fcdf 	bl	8007156 <USBD_GetEpDesc>
 8006798:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800679a:	2101      	movs	r1, #1
 800679c:	4815      	ldr	r0, [pc, #84]	; (80067f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800679e:	f000 fcda 	bl	8007156 <USBD_GetEpDesc>
 80067a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80067a4:	2181      	movs	r1, #129	; 0x81
 80067a6:	4813      	ldr	r0, [pc, #76]	; (80067f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80067a8:	f000 fcd5 	bl	8007156 <USBD_GetEpDesc>
 80067ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2210      	movs	r2, #16
 80067b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d006      	beq.n	80067ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067c8:	711a      	strb	r2, [r3, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d006      	beq.n	80067e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067dc:	711a      	strb	r2, [r3, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2243      	movs	r2, #67	; 0x43
 80067e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80067e8:	4b02      	ldr	r3, [pc, #8]	; (80067f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	20000098 	.word	0x20000098

080067f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	220a      	movs	r2, #10
 8006804:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006806:	4b03      	ldr	r3, [pc, #12]	; (8006814 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	20000054 	.word	0x20000054

08006818 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006828:	2303      	movs	r3, #3
 800682a:	e009      	b.n	8006840 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	33b0      	adds	r3, #176	; 0xb0
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	32b0      	adds	r2, #176	; 0xb0
 8006862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006866:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800686e:	2303      	movs	r3, #3
 8006870:	e008      	b.n	8006884 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	371c      	adds	r7, #28
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	32b0      	adds	r2, #176	; 0xb0
 80068a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e004      	b.n	80068be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
	...

080068cc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	32b0      	adds	r2, #176	; 0xb0
 80068de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80068e4:	2301      	movs	r3, #1
 80068e6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	32b0      	adds	r2, #176	; 0xb0
 80068f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e025      	b.n	800694a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006904:	2b00      	cmp	r3, #0
 8006906:	d11f      	bne.n	8006948 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2201      	movs	r2, #1
 800690c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006910:	4b10      	ldr	r3, [pc, #64]	; (8006954 <USBD_CDC_TransmitPacket+0x88>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	f003 020f 	and.w	r2, r3, #15
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	4613      	mov	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4403      	add	r3, r0
 800692a:	3318      	adds	r3, #24
 800692c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800692e:	4b09      	ldr	r3, [pc, #36]	; (8006954 <USBD_CDC_TransmitPacket+0x88>)
 8006930:	7819      	ldrb	r1, [r3, #0]
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f001 ffc1 	bl	80088c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006944:	2300      	movs	r3, #0
 8006946:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006948:	7bfb      	ldrb	r3, [r7, #15]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	200000db 	.word	0x200000db

08006958 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	32b0      	adds	r2, #176	; 0xb0
 800696a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	32b0      	adds	r2, #176	; 0xb0
 800697a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006982:	2303      	movs	r3, #3
 8006984:	e018      	b.n	80069b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	7c1b      	ldrb	r3, [r3, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10a      	bne.n	80069a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800698e:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <USBD_CDC_ReceivePacket+0x68>)
 8006990:	7819      	ldrb	r1, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f001 ffb3 	bl	8008908 <USBD_LL_PrepareReceive>
 80069a2:	e008      	b.n	80069b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80069a4:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <USBD_CDC_ReceivePacket+0x68>)
 80069a6:	7819      	ldrb	r1, [r3, #0]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80069ae:	2340      	movs	r3, #64	; 0x40
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 ffa9 	bl	8008908 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	200000dc 	.word	0x200000dc

080069c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	4613      	mov	r3, r2
 80069d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d101      	bne.n	80069dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80069d8:	2303      	movs	r3, #3
 80069da:	e01f      	b.n	8006a1c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	79fa      	ldrb	r2, [r7, #7]
 8006a0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f001 fe23 	bl	800865c <USBD_LL_Init>
 8006a16:	4603      	mov	r3, r0
 8006a18:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3718      	adds	r7, #24
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d101      	bne.n	8006a3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e025      	b.n	8006a88 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	32ae      	adds	r2, #174	; 0xae
 8006a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00f      	beq.n	8006a78 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	32ae      	adds	r2, #174	; 0xae
 8006a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a68:	f107 020e 	add.w	r2, r7, #14
 8006a6c:	4610      	mov	r0, r2
 8006a6e:	4798      	blx	r3
 8006a70:	4602      	mov	r2, r0
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006a7e:	1c5a      	adds	r2, r3, #1
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 fe2b 	bl	80086f4 <USBD_LL_Start>
 8006a9e:	4603      	mov	r3, r0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ab0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d009      	beq.n	8006aec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	78fa      	ldrb	r2, [r7, #3]
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	4798      	blx	r3
 8006ae8:	4603      	mov	r3, r0
 8006aea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3710      	adds	r7, #16
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	460b      	mov	r3, r1
 8006b00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	4611      	mov	r1, r2
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	4798      	blx	r3
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f001 f908 	bl	8007d52 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006b50:	461a      	mov	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b5e:	f003 031f 	and.w	r3, r3, #31
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d01a      	beq.n	8006b9c <USBD_LL_SetupStage+0x72>
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d822      	bhi.n	8006bb0 <USBD_LL_SetupStage+0x86>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <USBD_LL_SetupStage+0x4a>
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d00a      	beq.n	8006b88 <USBD_LL_SetupStage+0x5e>
 8006b72:	e01d      	b.n	8006bb0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fb5f 	bl	8007240 <USBD_StdDevReq>
 8006b82:	4603      	mov	r3, r0
 8006b84:	73fb      	strb	r3, [r7, #15]
      break;
 8006b86:	e020      	b.n	8006bca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fbc7 	bl	8007324 <USBD_StdItfReq>
 8006b96:	4603      	mov	r3, r0
 8006b98:	73fb      	strb	r3, [r7, #15]
      break;
 8006b9a:	e016      	b.n	8006bca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fc29 	bl	80073fc <USBD_StdEPReq>
 8006baa:	4603      	mov	r3, r0
 8006bac:	73fb      	strb	r3, [r7, #15]
      break;
 8006bae:	e00c      	b.n	8006bca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006bb6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f001 fdf8 	bl	80087b4 <USBD_LL_StallEP>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006bc8:	bf00      	nop
  }

  return ret;
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	607a      	str	r2, [r7, #4]
 8006be0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006be6:	7afb      	ldrb	r3, [r7, #11]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d16e      	bne.n	8006cca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006bf2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	f040 8098 	bne.w	8006d30 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d913      	bls.n	8006c34 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	1ad2      	subs	r2, r2, r3
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	68da      	ldr	r2, [r3, #12]
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	4293      	cmp	r3, r2
 8006c24:	bf28      	it	cs
 8006c26:	4613      	movcs	r3, r2
 8006c28:	461a      	mov	r2, r3
 8006c2a:	6879      	ldr	r1, [r7, #4]
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f001 f984 	bl	8007f3a <USBD_CtlContinueRx>
 8006c32:	e07d      	b.n	8006d30 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006c3a:	f003 031f 	and.w	r3, r3, #31
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d014      	beq.n	8006c6c <USBD_LL_DataOutStage+0x98>
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d81d      	bhi.n	8006c82 <USBD_LL_DataOutStage+0xae>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <USBD_LL_DataOutStage+0x7c>
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d003      	beq.n	8006c56 <USBD_LL_DataOutStage+0x82>
 8006c4e:	e018      	b.n	8006c82 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	75bb      	strb	r3, [r7, #22]
            break;
 8006c54:	e018      	b.n	8006c88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	4619      	mov	r1, r3
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 fa5e 	bl	8007122 <USBD_CoreFindIF>
 8006c66:	4603      	mov	r3, r0
 8006c68:	75bb      	strb	r3, [r7, #22]
            break;
 8006c6a:	e00d      	b.n	8006c88 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	4619      	mov	r1, r3
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 fa60 	bl	800713c <USBD_CoreFindEP>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	75bb      	strb	r3, [r7, #22]
            break;
 8006c80:	e002      	b.n	8006c88 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	75bb      	strb	r3, [r7, #22]
            break;
 8006c86:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006c88:	7dbb      	ldrb	r3, [r7, #22]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d119      	bne.n	8006cc2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d113      	bne.n	8006cc2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006c9a:	7dba      	ldrb	r2, [r7, #22]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	32ae      	adds	r2, #174	; 0xae
 8006ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00b      	beq.n	8006cc2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006caa:	7dba      	ldrb	r2, [r7, #22]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006cb2:	7dba      	ldrb	r2, [r7, #22]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	32ae      	adds	r2, #174	; 0xae
 8006cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f001 f94a 	bl	8007f5c <USBD_CtlSendStatus>
 8006cc8:	e032      	b.n	8006d30 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006cca:	7afb      	ldrb	r3, [r7, #11]
 8006ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 fa31 	bl	800713c <USBD_CoreFindEP>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cde:	7dbb      	ldrb	r3, [r7, #22]
 8006ce0:	2bff      	cmp	r3, #255	; 0xff
 8006ce2:	d025      	beq.n	8006d30 <USBD_LL_DataOutStage+0x15c>
 8006ce4:	7dbb      	ldrb	r3, [r7, #22]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d122      	bne.n	8006d30 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d117      	bne.n	8006d26 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006cf6:	7dba      	ldrb	r2, [r7, #22]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	32ae      	adds	r2, #174	; 0xae
 8006cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00f      	beq.n	8006d26 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006d06:	7dba      	ldrb	r2, [r7, #22]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006d0e:	7dba      	ldrb	r2, [r7, #22]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	32ae      	adds	r2, #174	; 0xae
 8006d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	7afa      	ldrb	r2, [r7, #11]
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	4798      	blx	r3
 8006d22:	4603      	mov	r3, r0
 8006d24:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	e000      	b.n	8006d32 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b086      	sub	sp, #24
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	460b      	mov	r3, r1
 8006d44:	607a      	str	r2, [r7, #4]
 8006d46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006d48:	7afb      	ldrb	r3, [r7, #11]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d16f      	bne.n	8006e2e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3314      	adds	r3, #20
 8006d52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d15a      	bne.n	8006e14 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	689a      	ldr	r2, [r3, #8]
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d914      	bls.n	8006d94 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	1ad2      	subs	r2, r2, r3
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6879      	ldr	r1, [r7, #4]
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f001 f8ac 	bl	8007ede <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d86:	2300      	movs	r3, #0
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f001 fdbb 	bl	8008908 <USBD_LL_PrepareReceive>
 8006d92:	e03f      	b.n	8006e14 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	68da      	ldr	r2, [r3, #12]
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d11c      	bne.n	8006dda <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d316      	bcc.n	8006dda <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d20f      	bcs.n	8006dda <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f001 f88d 	bl	8007ede <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dcc:	2300      	movs	r3, #0
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f001 fd98 	bl	8008908 <USBD_LL_PrepareReceive>
 8006dd8:	e01c      	b.n	8006e14 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d10f      	bne.n	8006e06 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d009      	beq.n	8006e06 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e06:	2180      	movs	r1, #128	; 0x80
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f001 fcd3 	bl	80087b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f001 f8b7 	bl	8007f82 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d03a      	beq.n	8006e94 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f7ff fe42 	bl	8006aa8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006e2c:	e032      	b.n	8006e94 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
 8006e30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	4619      	mov	r1, r3
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 f97f 	bl	800713c <USBD_CoreFindEP>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e42:	7dfb      	ldrb	r3, [r7, #23]
 8006e44:	2bff      	cmp	r3, #255	; 0xff
 8006e46:	d025      	beq.n	8006e94 <USBD_LL_DataInStage+0x15a>
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d122      	bne.n	8006e94 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d11c      	bne.n	8006e94 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006e5a:	7dfa      	ldrb	r2, [r7, #23]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	32ae      	adds	r2, #174	; 0xae
 8006e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d014      	beq.n	8006e94 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006e6a:	7dfa      	ldrb	r2, [r7, #23]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006e72:	7dfa      	ldrb	r2, [r7, #23]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	32ae      	adds	r2, #174	; 0xae
 8006e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	7afa      	ldrb	r2, [r7, #11]
 8006e80:	4611      	mov	r1, r2
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	4798      	blx	r3
 8006e86:	4603      	mov	r3, r0
 8006e88:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006e8a:	7dbb      	ldrb	r3, [r7, #22]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d001      	beq.n	8006e94 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006e90:	7dbb      	ldrb	r3, [r7, #22]
 8006e92:	e000      	b.n	8006e96 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d014      	beq.n	8006f04 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00e      	beq.n	8006f04 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	6852      	ldr	r2, [r2, #4]
 8006ef2:	b2d2      	uxtb	r2, r2
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	4798      	blx	r3
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006f00:	2303      	movs	r3, #3
 8006f02:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f04:	2340      	movs	r3, #64	; 0x40
 8006f06:	2200      	movs	r2, #0
 8006f08:	2100      	movs	r1, #0
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f001 fc0d 	bl	800872a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2240      	movs	r2, #64	; 0x40
 8006f1c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006f20:	2340      	movs	r3, #64	; 0x40
 8006f22:	2200      	movs	r2, #0
 8006f24:	2180      	movs	r1, #128	; 0x80
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f001 fbff 	bl	800872a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2240      	movs	r2, #64	; 0x40
 8006f36:	621a      	str	r2, [r3, #32]

  return ret;
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	78fa      	ldrb	r2, [r7, #3]
 8006f52:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2204      	movs	r2, #4
 8006f7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr

08006f8e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f8e:	b480      	push	{r7}
 8006f90:	b083      	sub	sp, #12
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d106      	bne.n	8006fb0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b03      	cmp	r3, #3
 8006fd0:	d110      	bne.n	8006ff4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00b      	beq.n	8006ff4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fe2:	69db      	ldr	r3, [r3, #28]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d005      	beq.n	8006ff4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b082      	sub	sp, #8
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	460b      	mov	r3, r1
 8007008:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	32ae      	adds	r2, #174	; 0xae
 8007014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800701c:	2303      	movs	r3, #3
 800701e:	e01c      	b.n	800705a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b03      	cmp	r3, #3
 800702a:	d115      	bne.n	8007058 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	32ae      	adds	r2, #174	; 0xae
 8007036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00b      	beq.n	8007058 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	32ae      	adds	r2, #174	; 0xae
 800704a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	78fa      	ldrb	r2, [r7, #3]
 8007052:	4611      	mov	r1, r2
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b082      	sub	sp, #8
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	460b      	mov	r3, r1
 800706c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	32ae      	adds	r2, #174	; 0xae
 8007078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007080:	2303      	movs	r3, #3
 8007082:	e01c      	b.n	80070be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b03      	cmp	r3, #3
 800708e:	d115      	bne.n	80070bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	32ae      	adds	r2, #174	; 0xae
 800709a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00b      	beq.n	80070bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	32ae      	adds	r2, #174	; 0xae
 80070ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	78fa      	ldrb	r2, [r7, #3]
 80070b6:	4611      	mov	r1, r2
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80070e4:	2300      	movs	r3, #0
 80070e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00e      	beq.n	8007118 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6852      	ldr	r2, [r2, #4]
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	4611      	mov	r1, r2
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	4798      	blx	r3
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d001      	beq.n	8007118 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007114:	2303      	movs	r3, #3
 8007116:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007118:	7bfb      	ldrb	r3, [r7, #15]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	460b      	mov	r3, r1
 800712c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800712e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007130:	4618      	mov	r0, r3
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	460b      	mov	r3, r1
 8007146:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007148:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800714a:	4618      	mov	r0, r3
 800714c:	370c      	adds	r7, #12
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b086      	sub	sp, #24
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	460b      	mov	r3, r1
 8007160:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800716a:	2300      	movs	r3, #0
 800716c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	885b      	ldrh	r3, [r3, #2]
 8007172:	b29a      	uxth	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	b29b      	uxth	r3, r3
 800717a:	429a      	cmp	r2, r3
 800717c:	d920      	bls.n	80071c0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	b29b      	uxth	r3, r3
 8007184:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007186:	e013      	b.n	80071b0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007188:	f107 030a 	add.w	r3, r7, #10
 800718c:	4619      	mov	r1, r3
 800718e:	6978      	ldr	r0, [r7, #20]
 8007190:	f000 f81b 	bl	80071ca <USBD_GetNextDesc>
 8007194:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	785b      	ldrb	r3, [r3, #1]
 800719a:	2b05      	cmp	r3, #5
 800719c:	d108      	bne.n	80071b0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	789b      	ldrb	r3, [r3, #2]
 80071a6:	78fa      	ldrb	r2, [r7, #3]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d008      	beq.n	80071be <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80071ac:	2300      	movs	r3, #0
 80071ae:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	885b      	ldrh	r3, [r3, #2]
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	897b      	ldrh	r3, [r7, #10]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d8e5      	bhi.n	8007188 <USBD_GetEpDesc+0x32>
 80071bc:	e000      	b.n	80071c0 <USBD_GetEpDesc+0x6a>
          break;
 80071be:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80071c0:	693b      	ldr	r3, [r7, #16]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b085      	sub	sp, #20
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	881a      	ldrh	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	4413      	add	r3, r2
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4413      	add	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80071f6:	68fb      	ldr	r3, [r7, #12]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	3301      	adds	r3, #1
 800721a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007222:	8a3b      	ldrh	r3, [r7, #16]
 8007224:	021b      	lsls	r3, r3, #8
 8007226:	b21a      	sxth	r2, r3
 8007228:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800722c:	4313      	orrs	r3, r2
 800722e:	b21b      	sxth	r3, r3
 8007230:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007232:	89fb      	ldrh	r3, [r7, #14]
}
 8007234:	4618      	mov	r0, r3
 8007236:	371c      	adds	r7, #28
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d005      	beq.n	8007266 <USBD_StdDevReq+0x26>
 800725a:	2b40      	cmp	r3, #64	; 0x40
 800725c:	d857      	bhi.n	800730e <USBD_StdDevReq+0xce>
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00f      	beq.n	8007282 <USBD_StdDevReq+0x42>
 8007262:	2b20      	cmp	r3, #32
 8007264:	d153      	bne.n	800730e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	32ae      	adds	r2, #174	; 0xae
 8007270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	4798      	blx	r3
 800727c:	4603      	mov	r3, r0
 800727e:	73fb      	strb	r3, [r7, #15]
      break;
 8007280:	e04a      	b.n	8007318 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	785b      	ldrb	r3, [r3, #1]
 8007286:	2b09      	cmp	r3, #9
 8007288:	d83b      	bhi.n	8007302 <USBD_StdDevReq+0xc2>
 800728a:	a201      	add	r2, pc, #4	; (adr r2, 8007290 <USBD_StdDevReq+0x50>)
 800728c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007290:	080072e5 	.word	0x080072e5
 8007294:	080072f9 	.word	0x080072f9
 8007298:	08007303 	.word	0x08007303
 800729c:	080072ef 	.word	0x080072ef
 80072a0:	08007303 	.word	0x08007303
 80072a4:	080072c3 	.word	0x080072c3
 80072a8:	080072b9 	.word	0x080072b9
 80072ac:	08007303 	.word	0x08007303
 80072b0:	080072db 	.word	0x080072db
 80072b4:	080072cd 	.word	0x080072cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fa3c 	bl	8007738 <USBD_GetDescriptor>
          break;
 80072c0:	e024      	b.n	800730c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80072c2:	6839      	ldr	r1, [r7, #0]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fba1 	bl	8007a0c <USBD_SetAddress>
          break;
 80072ca:	e01f      	b.n	800730c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fbe0 	bl	8007a94 <USBD_SetConfig>
 80072d4:	4603      	mov	r3, r0
 80072d6:	73fb      	strb	r3, [r7, #15]
          break;
 80072d8:	e018      	b.n	800730c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fc83 	bl	8007be8 <USBD_GetConfig>
          break;
 80072e2:	e013      	b.n	800730c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80072e4:	6839      	ldr	r1, [r7, #0]
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fcb4 	bl	8007c54 <USBD_GetStatus>
          break;
 80072ec:	e00e      	b.n	800730c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fce3 	bl	8007cbc <USBD_SetFeature>
          break;
 80072f6:	e009      	b.n	800730c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fd07 	bl	8007d0e <USBD_ClrFeature>
          break;
 8007300:	e004      	b.n	800730c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fd5e 	bl	8007dc6 <USBD_CtlError>
          break;
 800730a:	bf00      	nop
      }
      break;
 800730c:	e004      	b.n	8007318 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fd58 	bl	8007dc6 <USBD_CtlError>
      break;
 8007316:	bf00      	nop
  }

  return ret;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop

08007324 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800733a:	2b40      	cmp	r3, #64	; 0x40
 800733c:	d005      	beq.n	800734a <USBD_StdItfReq+0x26>
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	d852      	bhi.n	80073e8 <USBD_StdItfReq+0xc4>
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <USBD_StdItfReq+0x26>
 8007346:	2b20      	cmp	r3, #32
 8007348:	d14e      	bne.n	80073e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007350:	b2db      	uxtb	r3, r3
 8007352:	3b01      	subs	r3, #1
 8007354:	2b02      	cmp	r3, #2
 8007356:	d840      	bhi.n	80073da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	889b      	ldrh	r3, [r3, #4]
 800735c:	b2db      	uxtb	r3, r3
 800735e:	2b01      	cmp	r3, #1
 8007360:	d836      	bhi.n	80073d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	889b      	ldrh	r3, [r3, #4]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff fed9 	bl	8007122 <USBD_CoreFindIF>
 8007370:	4603      	mov	r3, r0
 8007372:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007374:	7bbb      	ldrb	r3, [r7, #14]
 8007376:	2bff      	cmp	r3, #255	; 0xff
 8007378:	d01d      	beq.n	80073b6 <USBD_StdItfReq+0x92>
 800737a:	7bbb      	ldrb	r3, [r7, #14]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d11a      	bne.n	80073b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007380:	7bba      	ldrb	r2, [r7, #14]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	32ae      	adds	r2, #174	; 0xae
 8007386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00f      	beq.n	80073b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007390:	7bba      	ldrb	r2, [r7, #14]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007398:	7bba      	ldrb	r2, [r7, #14]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	32ae      	adds	r2, #174	; 0xae
 800739e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	4798      	blx	r3
 80073aa:	4603      	mov	r3, r0
 80073ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80073ae:	e004      	b.n	80073ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80073b0:	2303      	movs	r3, #3
 80073b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80073b4:	e001      	b.n	80073ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80073b6:	2303      	movs	r3, #3
 80073b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	88db      	ldrh	r3, [r3, #6]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d110      	bne.n	80073e4 <USBD_StdItfReq+0xc0>
 80073c2:	7bfb      	ldrb	r3, [r7, #15]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10d      	bne.n	80073e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fdc7 	bl	8007f5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80073ce:	e009      	b.n	80073e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 fcf7 	bl	8007dc6 <USBD_CtlError>
          break;
 80073d8:	e004      	b.n	80073e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fcf2 	bl	8007dc6 <USBD_CtlError>
          break;
 80073e2:	e000      	b.n	80073e6 <USBD_StdItfReq+0xc2>
          break;
 80073e4:	bf00      	nop
      }
      break;
 80073e6:	e004      	b.n	80073f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fceb 	bl	8007dc6 <USBD_CtlError>
      break;
 80073f0:	bf00      	nop
  }

  return ret;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	889b      	ldrh	r3, [r3, #4]
 800740e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007418:	2b40      	cmp	r3, #64	; 0x40
 800741a:	d007      	beq.n	800742c <USBD_StdEPReq+0x30>
 800741c:	2b40      	cmp	r3, #64	; 0x40
 800741e:	f200 817f 	bhi.w	8007720 <USBD_StdEPReq+0x324>
 8007422:	2b00      	cmp	r3, #0
 8007424:	d02a      	beq.n	800747c <USBD_StdEPReq+0x80>
 8007426:	2b20      	cmp	r3, #32
 8007428:	f040 817a 	bne.w	8007720 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800742c:	7bbb      	ldrb	r3, [r7, #14]
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff fe83 	bl	800713c <USBD_CoreFindEP>
 8007436:	4603      	mov	r3, r0
 8007438:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800743a:	7b7b      	ldrb	r3, [r7, #13]
 800743c:	2bff      	cmp	r3, #255	; 0xff
 800743e:	f000 8174 	beq.w	800772a <USBD_StdEPReq+0x32e>
 8007442:	7b7b      	ldrb	r3, [r7, #13]
 8007444:	2b00      	cmp	r3, #0
 8007446:	f040 8170 	bne.w	800772a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800744a:	7b7a      	ldrb	r2, [r7, #13]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007452:	7b7a      	ldrb	r2, [r7, #13]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	32ae      	adds	r2, #174	; 0xae
 8007458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 8163 	beq.w	800772a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007464:	7b7a      	ldrb	r2, [r7, #13]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	32ae      	adds	r2, #174	; 0xae
 800746a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	6839      	ldr	r1, [r7, #0]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	4798      	blx	r3
 8007476:	4603      	mov	r3, r0
 8007478:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800747a:	e156      	b.n	800772a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	785b      	ldrb	r3, [r3, #1]
 8007480:	2b03      	cmp	r3, #3
 8007482:	d008      	beq.n	8007496 <USBD_StdEPReq+0x9a>
 8007484:	2b03      	cmp	r3, #3
 8007486:	f300 8145 	bgt.w	8007714 <USBD_StdEPReq+0x318>
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 809b 	beq.w	80075c6 <USBD_StdEPReq+0x1ca>
 8007490:	2b01      	cmp	r3, #1
 8007492:	d03c      	beq.n	800750e <USBD_StdEPReq+0x112>
 8007494:	e13e      	b.n	8007714 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d002      	beq.n	80074a8 <USBD_StdEPReq+0xac>
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d016      	beq.n	80074d4 <USBD_StdEPReq+0xd8>
 80074a6:	e02c      	b.n	8007502 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00d      	beq.n	80074ca <USBD_StdEPReq+0xce>
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	2b80      	cmp	r3, #128	; 0x80
 80074b2:	d00a      	beq.n	80074ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 f97b 	bl	80087b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80074be:	2180      	movs	r1, #128	; 0x80
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f001 f977 	bl	80087b4 <USBD_LL_StallEP>
 80074c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074c8:	e020      	b.n	800750c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80074ca:	6839      	ldr	r1, [r7, #0]
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fc7a 	bl	8007dc6 <USBD_CtlError>
              break;
 80074d2:	e01b      	b.n	800750c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	885b      	ldrh	r3, [r3, #2]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10e      	bne.n	80074fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074dc:	7bbb      	ldrb	r3, [r7, #14]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00b      	beq.n	80074fa <USBD_StdEPReq+0xfe>
 80074e2:	7bbb      	ldrb	r3, [r7, #14]
 80074e4:	2b80      	cmp	r3, #128	; 0x80
 80074e6:	d008      	beq.n	80074fa <USBD_StdEPReq+0xfe>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	88db      	ldrh	r3, [r3, #6]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d104      	bne.n	80074fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80074f0:	7bbb      	ldrb	r3, [r7, #14]
 80074f2:	4619      	mov	r1, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f001 f95d 	bl	80087b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fd2e 	bl	8007f5c <USBD_CtlSendStatus>

              break;
 8007500:	e004      	b.n	800750c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fc5e 	bl	8007dc6 <USBD_CtlError>
              break;
 800750a:	bf00      	nop
          }
          break;
 800750c:	e107      	b.n	800771e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d002      	beq.n	8007520 <USBD_StdEPReq+0x124>
 800751a:	2b03      	cmp	r3, #3
 800751c:	d016      	beq.n	800754c <USBD_StdEPReq+0x150>
 800751e:	e04b      	b.n	80075b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007520:	7bbb      	ldrb	r3, [r7, #14]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00d      	beq.n	8007542 <USBD_StdEPReq+0x146>
 8007526:	7bbb      	ldrb	r3, [r7, #14]
 8007528:	2b80      	cmp	r3, #128	; 0x80
 800752a:	d00a      	beq.n	8007542 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 f93f 	bl	80087b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007536:	2180      	movs	r1, #128	; 0x80
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 f93b 	bl	80087b4 <USBD_LL_StallEP>
 800753e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007540:	e040      	b.n	80075c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fc3e 	bl	8007dc6 <USBD_CtlError>
              break;
 800754a:	e03b      	b.n	80075c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	885b      	ldrh	r3, [r3, #2]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d136      	bne.n	80075c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755a:	2b00      	cmp	r3, #0
 800755c:	d004      	beq.n	8007568 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800755e:	7bbb      	ldrb	r3, [r7, #14]
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 f945 	bl	80087f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fcf7 	bl	8007f5c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff fde2 	bl	800713c <USBD_CoreFindEP>
 8007578:	4603      	mov	r3, r0
 800757a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800757c:	7b7b      	ldrb	r3, [r7, #13]
 800757e:	2bff      	cmp	r3, #255	; 0xff
 8007580:	d01f      	beq.n	80075c2 <USBD_StdEPReq+0x1c6>
 8007582:	7b7b      	ldrb	r3, [r7, #13]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d11c      	bne.n	80075c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007588:	7b7a      	ldrb	r2, [r7, #13]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007590:	7b7a      	ldrb	r2, [r7, #13]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	32ae      	adds	r2, #174	; 0xae
 8007596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d010      	beq.n	80075c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80075a0:	7b7a      	ldrb	r2, [r7, #13]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	32ae      	adds	r2, #174	; 0xae
 80075a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	4798      	blx	r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80075b6:	e004      	b.n	80075c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80075b8:	6839      	ldr	r1, [r7, #0]
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 fc03 	bl	8007dc6 <USBD_CtlError>
              break;
 80075c0:	e000      	b.n	80075c4 <USBD_StdEPReq+0x1c8>
              break;
 80075c2:	bf00      	nop
          }
          break;
 80075c4:	e0ab      	b.n	800771e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d002      	beq.n	80075d8 <USBD_StdEPReq+0x1dc>
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d032      	beq.n	800763c <USBD_StdEPReq+0x240>
 80075d6:	e097      	b.n	8007708 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <USBD_StdEPReq+0x1f2>
 80075de:	7bbb      	ldrb	r3, [r7, #14]
 80075e0:	2b80      	cmp	r3, #128	; 0x80
 80075e2:	d004      	beq.n	80075ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fbed 	bl	8007dc6 <USBD_CtlError>
                break;
 80075ec:	e091      	b.n	8007712 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	da0b      	bge.n	800760e <USBD_StdEPReq+0x212>
 80075f6:	7bbb      	ldrb	r3, [r7, #14]
 80075f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	3310      	adds	r3, #16
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	4413      	add	r3, r2
 800760a:	3304      	adds	r3, #4
 800760c:	e00b      	b.n	8007626 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007614:	4613      	mov	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	4413      	add	r3, r2
 8007624:	3304      	adds	r3, #4
 8007626:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2202      	movs	r2, #2
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fc37 	bl	8007ea8 <USBD_CtlSendData>
              break;
 800763a:	e06a      	b.n	8007712 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800763c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007640:	2b00      	cmp	r3, #0
 8007642:	da11      	bge.n	8007668 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007644:	7bbb      	ldrb	r3, [r7, #14]
 8007646:	f003 020f 	and.w	r2, r3, #15
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	4613      	mov	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4413      	add	r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	440b      	add	r3, r1
 8007656:	3324      	adds	r3, #36	; 0x24
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d117      	bne.n	800768e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fbb0 	bl	8007dc6 <USBD_CtlError>
                  break;
 8007666:	e054      	b.n	8007712 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007668:	7bbb      	ldrb	r3, [r7, #14]
 800766a:	f003 020f 	and.w	r2, r3, #15
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	440b      	add	r3, r1
 800767a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d104      	bne.n	800768e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007684:	6839      	ldr	r1, [r7, #0]
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fb9d 	bl	8007dc6 <USBD_CtlError>
                  break;
 800768c:	e041      	b.n	8007712 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800768e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007692:	2b00      	cmp	r3, #0
 8007694:	da0b      	bge.n	80076ae <USBD_StdEPReq+0x2b2>
 8007696:	7bbb      	ldrb	r3, [r7, #14]
 8007698:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800769c:	4613      	mov	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	3310      	adds	r3, #16
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	4413      	add	r3, r2
 80076aa:	3304      	adds	r3, #4
 80076ac:	e00b      	b.n	80076c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076ae:	7bbb      	ldrb	r3, [r7, #14]
 80076b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076b4:	4613      	mov	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	4413      	add	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	4413      	add	r3, r2
 80076c4:	3304      	adds	r3, #4
 80076c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80076c8:	7bbb      	ldrb	r3, [r7, #14]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d002      	beq.n	80076d4 <USBD_StdEPReq+0x2d8>
 80076ce:	7bbb      	ldrb	r3, [r7, #14]
 80076d0:	2b80      	cmp	r3, #128	; 0x80
 80076d2:	d103      	bne.n	80076dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	e00e      	b.n	80076fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80076dc:	7bbb      	ldrb	r3, [r7, #14]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f001 f8a5 	bl	8008830 <USBD_LL_IsStallEP>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2201      	movs	r2, #1
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	e002      	b.n	80076fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2200      	movs	r2, #0
 80076f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2202      	movs	r2, #2
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fbd1 	bl	8007ea8 <USBD_CtlSendData>
              break;
 8007706:	e004      	b.n	8007712 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fb5b 	bl	8007dc6 <USBD_CtlError>
              break;
 8007710:	bf00      	nop
          }
          break;
 8007712:	e004      	b.n	800771e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007714:	6839      	ldr	r1, [r7, #0]
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fb55 	bl	8007dc6 <USBD_CtlError>
          break;
 800771c:	bf00      	nop
      }
      break;
 800771e:	e005      	b.n	800772c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007720:	6839      	ldr	r1, [r7, #0]
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fb4f 	bl	8007dc6 <USBD_CtlError>
      break;
 8007728:	e000      	b.n	800772c <USBD_StdEPReq+0x330>
      break;
 800772a:	bf00      	nop
  }

  return ret;
 800772c:	7bfb      	ldrb	r3, [r7, #15]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	885b      	ldrh	r3, [r3, #2]
 8007752:	0a1b      	lsrs	r3, r3, #8
 8007754:	b29b      	uxth	r3, r3
 8007756:	3b01      	subs	r3, #1
 8007758:	2b06      	cmp	r3, #6
 800775a:	f200 8128 	bhi.w	80079ae <USBD_GetDescriptor+0x276>
 800775e:	a201      	add	r2, pc, #4	; (adr r2, 8007764 <USBD_GetDescriptor+0x2c>)
 8007760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007764:	08007781 	.word	0x08007781
 8007768:	08007799 	.word	0x08007799
 800776c:	080077d9 	.word	0x080077d9
 8007770:	080079af 	.word	0x080079af
 8007774:	080079af 	.word	0x080079af
 8007778:	0800794f 	.word	0x0800794f
 800777c:	0800797b 	.word	0x0800797b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	7c12      	ldrb	r2, [r2, #16]
 800778c:	f107 0108 	add.w	r1, r7, #8
 8007790:	4610      	mov	r0, r2
 8007792:	4798      	blx	r3
 8007794:	60f8      	str	r0, [r7, #12]
      break;
 8007796:	e112      	b.n	80079be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	7c1b      	ldrb	r3, [r3, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10d      	bne.n	80077bc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a8:	f107 0208 	add.w	r2, r7, #8
 80077ac:	4610      	mov	r0, r2
 80077ae:	4798      	blx	r3
 80077b0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3301      	adds	r3, #1
 80077b6:	2202      	movs	r2, #2
 80077b8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077ba:	e100      	b.n	80079be <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	f107 0208 	add.w	r2, r7, #8
 80077c8:	4610      	mov	r0, r2
 80077ca:	4798      	blx	r3
 80077cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3301      	adds	r3, #1
 80077d2:	2202      	movs	r2, #2
 80077d4:	701a      	strb	r2, [r3, #0]
      break;
 80077d6:	e0f2      	b.n	80079be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	885b      	ldrh	r3, [r3, #2]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b05      	cmp	r3, #5
 80077e0:	f200 80ac 	bhi.w	800793c <USBD_GetDescriptor+0x204>
 80077e4:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <USBD_GetDescriptor+0xb4>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	08007805 	.word	0x08007805
 80077f0:	08007839 	.word	0x08007839
 80077f4:	0800786d 	.word	0x0800786d
 80077f8:	080078a1 	.word	0x080078a1
 80077fc:	080078d5 	.word	0x080078d5
 8007800:	08007909 	.word	0x08007909
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00b      	beq.n	8007828 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	7c12      	ldrb	r2, [r2, #16]
 800781c:	f107 0108 	add.w	r1, r7, #8
 8007820:	4610      	mov	r0, r2
 8007822:	4798      	blx	r3
 8007824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007826:	e091      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 facb 	bl	8007dc6 <USBD_CtlError>
            err++;
 8007830:	7afb      	ldrb	r3, [r7, #11]
 8007832:	3301      	adds	r3, #1
 8007834:	72fb      	strb	r3, [r7, #11]
          break;
 8007836:	e089      	b.n	800794c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00b      	beq.n	800785c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	7c12      	ldrb	r2, [r2, #16]
 8007850:	f107 0108 	add.w	r1, r7, #8
 8007854:	4610      	mov	r0, r2
 8007856:	4798      	blx	r3
 8007858:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800785a:	e077      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fab1 	bl	8007dc6 <USBD_CtlError>
            err++;
 8007864:	7afb      	ldrb	r3, [r7, #11]
 8007866:	3301      	adds	r3, #1
 8007868:	72fb      	strb	r3, [r7, #11]
          break;
 800786a:	e06f      	b.n	800794c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00b      	beq.n	8007890 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	7c12      	ldrb	r2, [r2, #16]
 8007884:	f107 0108 	add.w	r1, r7, #8
 8007888:	4610      	mov	r0, r2
 800788a:	4798      	blx	r3
 800788c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800788e:	e05d      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fa97 	bl	8007dc6 <USBD_CtlError>
            err++;
 8007898:	7afb      	ldrb	r3, [r7, #11]
 800789a:	3301      	adds	r3, #1
 800789c:	72fb      	strb	r3, [r7, #11]
          break;
 800789e:	e055      	b.n	800794c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00b      	beq.n	80078c4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	7c12      	ldrb	r2, [r2, #16]
 80078b8:	f107 0108 	add.w	r1, r7, #8
 80078bc:	4610      	mov	r0, r2
 80078be:	4798      	blx	r3
 80078c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078c2:	e043      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fa7d 	bl	8007dc6 <USBD_CtlError>
            err++;
 80078cc:	7afb      	ldrb	r3, [r7, #11]
 80078ce:	3301      	adds	r3, #1
 80078d0:	72fb      	strb	r3, [r7, #11]
          break;
 80078d2:	e03b      	b.n	800794c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	7c12      	ldrb	r2, [r2, #16]
 80078ec:	f107 0108 	add.w	r1, r7, #8
 80078f0:	4610      	mov	r0, r2
 80078f2:	4798      	blx	r3
 80078f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078f6:	e029      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fa63 	bl	8007dc6 <USBD_CtlError>
            err++;
 8007900:	7afb      	ldrb	r3, [r7, #11]
 8007902:	3301      	adds	r3, #1
 8007904:	72fb      	strb	r3, [r7, #11]
          break;
 8007906:	e021      	b.n	800794c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	7c12      	ldrb	r2, [r2, #16]
 8007920:	f107 0108 	add.w	r1, r7, #8
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
 8007928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800792a:	e00f      	b.n	800794c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800792c:	6839      	ldr	r1, [r7, #0]
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fa49 	bl	8007dc6 <USBD_CtlError>
            err++;
 8007934:	7afb      	ldrb	r3, [r7, #11]
 8007936:	3301      	adds	r3, #1
 8007938:	72fb      	strb	r3, [r7, #11]
          break;
 800793a:	e007      	b.n	800794c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fa41 	bl	8007dc6 <USBD_CtlError>
          err++;
 8007944:	7afb      	ldrb	r3, [r7, #11]
 8007946:	3301      	adds	r3, #1
 8007948:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800794a:	bf00      	nop
      }
      break;
 800794c:	e037      	b.n	80079be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	7c1b      	ldrb	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d109      	bne.n	800796a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795e:	f107 0208 	add.w	r2, r7, #8
 8007962:	4610      	mov	r0, r2
 8007964:	4798      	blx	r3
 8007966:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007968:	e029      	b.n	80079be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fa2a 	bl	8007dc6 <USBD_CtlError>
        err++;
 8007972:	7afb      	ldrb	r3, [r7, #11]
 8007974:	3301      	adds	r3, #1
 8007976:	72fb      	strb	r3, [r7, #11]
      break;
 8007978:	e021      	b.n	80079be <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	7c1b      	ldrb	r3, [r3, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10d      	bne.n	800799e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798a:	f107 0208 	add.w	r2, r7, #8
 800798e:	4610      	mov	r0, r2
 8007990:	4798      	blx	r3
 8007992:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3301      	adds	r3, #1
 8007998:	2207      	movs	r2, #7
 800799a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800799c:	e00f      	b.n	80079be <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fa10 	bl	8007dc6 <USBD_CtlError>
        err++;
 80079a6:	7afb      	ldrb	r3, [r7, #11]
 80079a8:	3301      	adds	r3, #1
 80079aa:	72fb      	strb	r3, [r7, #11]
      break;
 80079ac:	e007      	b.n	80079be <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079ae:	6839      	ldr	r1, [r7, #0]
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f000 fa08 	bl	8007dc6 <USBD_CtlError>
      err++;
 80079b6:	7afb      	ldrb	r3, [r7, #11]
 80079b8:	3301      	adds	r3, #1
 80079ba:	72fb      	strb	r3, [r7, #11]
      break;
 80079bc:	bf00      	nop
  }

  if (err != 0U)
 80079be:	7afb      	ldrb	r3, [r7, #11]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d11e      	bne.n	8007a02 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	88db      	ldrh	r3, [r3, #6]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d016      	beq.n	80079fa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80079cc:	893b      	ldrh	r3, [r7, #8]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00e      	beq.n	80079f0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	88da      	ldrh	r2, [r3, #6]
 80079d6:	893b      	ldrh	r3, [r7, #8]
 80079d8:	4293      	cmp	r3, r2
 80079da:	bf28      	it	cs
 80079dc:	4613      	movcs	r3, r2
 80079de:	b29b      	uxth	r3, r3
 80079e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80079e2:	893b      	ldrh	r3, [r7, #8]
 80079e4:	461a      	mov	r2, r3
 80079e6:	68f9      	ldr	r1, [r7, #12]
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fa5d 	bl	8007ea8 <USBD_CtlSendData>
 80079ee:	e009      	b.n	8007a04 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 f9e7 	bl	8007dc6 <USBD_CtlError>
 80079f8:	e004      	b.n	8007a04 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 faae 	bl	8007f5c <USBD_CtlSendStatus>
 8007a00:	e000      	b.n	8007a04 <USBD_GetDescriptor+0x2cc>
    return;
 8007a02:	bf00      	nop
  }
}
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop

08007a0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	889b      	ldrh	r3, [r3, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d131      	bne.n	8007a82 <USBD_SetAddress+0x76>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	88db      	ldrh	r3, [r3, #6]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d12d      	bne.n	8007a82 <USBD_SetAddress+0x76>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	885b      	ldrh	r3, [r3, #2]
 8007a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8007a2c:	d829      	bhi.n	8007a82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	885b      	ldrh	r3, [r3, #2]
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	d104      	bne.n	8007a50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f9bc 	bl	8007dc6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a4e:	e01d      	b.n	8007a8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	7bfa      	ldrb	r2, [r7, #15]
 8007a54:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 ff13 	bl	8008888 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fa7a 	bl	8007f5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a68:	7bfb      	ldrb	r3, [r7, #15]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d004      	beq.n	8007a78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2202      	movs	r2, #2
 8007a72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a76:	e009      	b.n	8007a8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a80:	e004      	b.n	8007a8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f99e 	bl	8007dc6 <USBD_CtlError>
  }
}
 8007a8a:	bf00      	nop
 8007a8c:	bf00      	nop
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	885b      	ldrh	r3, [r3, #2]
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	4b4e      	ldr	r3, [pc, #312]	; (8007be4 <USBD_SetConfig+0x150>)
 8007aaa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007aac:	4b4d      	ldr	r3, [pc, #308]	; (8007be4 <USBD_SetConfig+0x150>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d905      	bls.n	8007ac0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f985 	bl	8007dc6 <USBD_CtlError>
    return USBD_FAIL;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e08c      	b.n	8007bda <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d002      	beq.n	8007ad2 <USBD_SetConfig+0x3e>
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	d029      	beq.n	8007b24 <USBD_SetConfig+0x90>
 8007ad0:	e075      	b.n	8007bbe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007ad2:	4b44      	ldr	r3, [pc, #272]	; (8007be4 <USBD_SetConfig+0x150>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d020      	beq.n	8007b1c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007ada:	4b42      	ldr	r3, [pc, #264]	; (8007be4 <USBD_SetConfig+0x150>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	461a      	mov	r2, r3
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ae4:	4b3f      	ldr	r3, [pc, #252]	; (8007be4 <USBD_SetConfig+0x150>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7fe ffe7 	bl	8006abe <USBD_SetClassConfig>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d008      	beq.n	8007b0c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f962 	bl	8007dc6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2202      	movs	r2, #2
 8007b06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b0a:	e065      	b.n	8007bd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fa25 	bl	8007f5c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2203      	movs	r2, #3
 8007b16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007b1a:	e05d      	b.n	8007bd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fa1d 	bl	8007f5c <USBD_CtlSendStatus>
      break;
 8007b22:	e059      	b.n	8007bd8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007b24:	4b2f      	ldr	r3, [pc, #188]	; (8007be4 <USBD_SetConfig+0x150>)
 8007b26:	781b      	ldrb	r3, [r3, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d112      	bne.n	8007b52 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007b34:	4b2b      	ldr	r3, [pc, #172]	; (8007be4 <USBD_SetConfig+0x150>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b3e:	4b29      	ldr	r3, [pc, #164]	; (8007be4 <USBD_SetConfig+0x150>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7fe ffd6 	bl	8006af6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fa06 	bl	8007f5c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007b50:	e042      	b.n	8007bd8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007b52:	4b24      	ldr	r3, [pc, #144]	; (8007be4 <USBD_SetConfig+0x150>)
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	461a      	mov	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d02a      	beq.n	8007bb6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7fe ffc4 	bl	8006af6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007b6e:	4b1d      	ldr	r3, [pc, #116]	; (8007be4 <USBD_SetConfig+0x150>)
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007b78:	4b1a      	ldr	r3, [pc, #104]	; (8007be4 <USBD_SetConfig+0x150>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7fe ff9d 	bl	8006abe <USBD_SetClassConfig>
 8007b84:	4603      	mov	r3, r0
 8007b86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00f      	beq.n	8007bae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f918 	bl	8007dc6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7fe ffa9 	bl	8006af6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007bac:	e014      	b.n	8007bd8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f9d4 	bl	8007f5c <USBD_CtlSendStatus>
      break;
 8007bb4:	e010      	b.n	8007bd8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f9d0 	bl	8007f5c <USBD_CtlSendStatus>
      break;
 8007bbc:	e00c      	b.n	8007bd8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f900 	bl	8007dc6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007bc6:	4b07      	ldr	r3, [pc, #28]	; (8007be4 <USBD_SetConfig+0x150>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7fe ff92 	bl	8006af6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	73fb      	strb	r3, [r7, #15]
      break;
 8007bd6:	bf00      	nop
  }

  return ret;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	200002b8 	.word	0x200002b8

08007be8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	88db      	ldrh	r3, [r3, #6]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d004      	beq.n	8007c04 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f8e2 	bl	8007dc6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007c02:	e023      	b.n	8007c4c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	dc02      	bgt.n	8007c16 <USBD_GetConfig+0x2e>
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	dc03      	bgt.n	8007c1c <USBD_GetConfig+0x34>
 8007c14:	e015      	b.n	8007c42 <USBD_GetConfig+0x5a>
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d00b      	beq.n	8007c32 <USBD_GetConfig+0x4a>
 8007c1a:	e012      	b.n	8007c42 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	3308      	adds	r3, #8
 8007c26:	2201      	movs	r2, #1
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f93c 	bl	8007ea8 <USBD_CtlSendData>
        break;
 8007c30:	e00c      	b.n	8007c4c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	3304      	adds	r3, #4
 8007c36:	2201      	movs	r2, #1
 8007c38:	4619      	mov	r1, r3
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f934 	bl	8007ea8 <USBD_CtlSendData>
        break;
 8007c40:	e004      	b.n	8007c4c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007c42:	6839      	ldr	r1, [r7, #0]
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f8be 	bl	8007dc6 <USBD_CtlError>
        break;
 8007c4a:	bf00      	nop
}
 8007c4c:	bf00      	nop
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d81e      	bhi.n	8007caa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	88db      	ldrh	r3, [r3, #6]
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d004      	beq.n	8007c7e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f8a5 	bl	8007dc6 <USBD_CtlError>
        break;
 8007c7c:	e01a      	b.n	8007cb4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d005      	beq.n	8007c9a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	f043 0202 	orr.w	r2, r3, #2
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	330c      	adds	r3, #12
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f900 	bl	8007ea8 <USBD_CtlSendData>
      break;
 8007ca8:	e004      	b.n	8007cb4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f88a 	bl	8007dc6 <USBD_CtlError>
      break;
 8007cb2:	bf00      	nop
  }
}
 8007cb4:	bf00      	nop
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	885b      	ldrh	r3, [r3, #2]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d107      	bne.n	8007cde <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f940 	bl	8007f5c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007cdc:	e013      	b.n	8007d06 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	885b      	ldrh	r3, [r3, #2]
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d10b      	bne.n	8007cfe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	889b      	ldrh	r3, [r3, #4]
 8007cea:	0a1b      	lsrs	r3, r3, #8
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f930 	bl	8007f5c <USBD_CtlSendStatus>
}
 8007cfc:	e003      	b.n	8007d06 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f860 	bl	8007dc6 <USBD_CtlError>
}
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b082      	sub	sp, #8
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	3b01      	subs	r3, #1
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	d80b      	bhi.n	8007d3e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	885b      	ldrh	r3, [r3, #2]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d10c      	bne.n	8007d48 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f910 	bl	8007f5c <USBD_CtlSendStatus>
      }
      break;
 8007d3c:	e004      	b.n	8007d48 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f840 	bl	8007dc6 <USBD_CtlError>
      break;
 8007d46:	e000      	b.n	8007d4a <USBD_ClrFeature+0x3c>
      break;
 8007d48:	bf00      	nop
  }
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b084      	sub	sp, #16
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	781a      	ldrb	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	781a      	ldrb	r2, [r3, #0]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f7ff fa41 	bl	8007204 <SWAPBYTE>
 8007d82:	4603      	mov	r3, r0
 8007d84:	461a      	mov	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3301      	adds	r3, #1
 8007d94:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f7ff fa34 	bl	8007204 <SWAPBYTE>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	461a      	mov	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3301      	adds	r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3301      	adds	r3, #1
 8007dae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007db0:	68f8      	ldr	r0, [r7, #12]
 8007db2:	f7ff fa27 	bl	8007204 <SWAPBYTE>
 8007db6:	4603      	mov	r3, r0
 8007db8:	461a      	mov	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	80da      	strh	r2, [r3, #6]
}
 8007dbe:	bf00      	nop
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b082      	sub	sp, #8
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dd0:	2180      	movs	r1, #128	; 0x80
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fcee 	bl	80087b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007dd8:	2100      	movs	r1, #0
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 fcea 	bl	80087b4 <USBD_LL_StallEP>
}
 8007de0:	bf00      	nop
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d036      	beq.n	8007e6c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007e02:	6938      	ldr	r0, [r7, #16]
 8007e04:	f000 f836 	bl	8007e74 <USBD_GetLen>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007e16:	7dfb      	ldrb	r3, [r7, #23]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	7812      	ldrb	r2, [r2, #0]
 8007e20:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
 8007e24:	3301      	adds	r3, #1
 8007e26:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007e28:	7dfb      	ldrb	r3, [r7, #23]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	2203      	movs	r2, #3
 8007e30:	701a      	strb	r2, [r3, #0]
  idx++;
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
 8007e34:	3301      	adds	r3, #1
 8007e36:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007e38:	e013      	b.n	8007e62 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	4413      	add	r3, r2
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	7812      	ldrb	r2, [r2, #0]
 8007e44:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	613b      	str	r3, [r7, #16]
    idx++;
 8007e4c:	7dfb      	ldrb	r3, [r7, #23]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007e52:	7dfb      	ldrb	r3, [r7, #23]
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	4413      	add	r3, r2
 8007e58:	2200      	movs	r2, #0
 8007e5a:	701a      	strb	r2, [r3, #0]
    idx++;
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1e7      	bne.n	8007e3a <USBD_GetString+0x52>
 8007e6a:	e000      	b.n	8007e6e <USBD_GetString+0x86>
    return;
 8007e6c:	bf00      	nop
  }
}
 8007e6e:	3718      	adds	r7, #24
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007e84:	e005      	b.n	8007e92 <USBD_GetLen+0x1e>
  {
    len++;
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1f5      	bne.n	8007e86 <USBD_GetLen+0x12>
  }

  return len;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	2100      	movs	r1, #0
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 fcf9 	bl	80088c6 <USBD_LL_Transmit>

  return USBD_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	60f8      	str	r0, [r7, #12]
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	2100      	movs	r1, #0
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f000 fce8 	bl	80088c6 <USBD_LL_Transmit>

  return USBD_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2203      	movs	r2, #3
 8007f10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	2100      	movs	r1, #0
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f000 fcec 	bl	8008908 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 fcdb 	bl	8008908 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2204      	movs	r2, #4
 8007f68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	2200      	movs	r2, #0
 8007f70:	2100      	movs	r1, #0
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fca7 	bl	80088c6 <USBD_LL_Transmit>

  return USBD_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b082      	sub	sp, #8
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2205      	movs	r2, #5
 8007f8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f92:	2300      	movs	r3, #0
 8007f94:	2200      	movs	r2, #0
 8007f96:	2100      	movs	r1, #0
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fcb5 	bl	8008908 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007fac:	2200      	movs	r2, #0
 8007fae:	4912      	ldr	r1, [pc, #72]	; (8007ff8 <MX_USB_DEVICE_Init+0x50>)
 8007fb0:	4812      	ldr	r0, [pc, #72]	; (8007ffc <MX_USB_DEVICE_Init+0x54>)
 8007fb2:	f7fe fd07 	bl	80069c4 <USBD_Init>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007fbc:	f7f8 fdf0 	bl	8000ba0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007fc0:	490f      	ldr	r1, [pc, #60]	; (8008000 <MX_USB_DEVICE_Init+0x58>)
 8007fc2:	480e      	ldr	r0, [pc, #56]	; (8007ffc <MX_USB_DEVICE_Init+0x54>)
 8007fc4:	f7fe fd2e 	bl	8006a24 <USBD_RegisterClass>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007fce:	f7f8 fde7 	bl	8000ba0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007fd2:	490c      	ldr	r1, [pc, #48]	; (8008004 <MX_USB_DEVICE_Init+0x5c>)
 8007fd4:	4809      	ldr	r0, [pc, #36]	; (8007ffc <MX_USB_DEVICE_Init+0x54>)
 8007fd6:	f7fe fc1f 	bl	8006818 <USBD_CDC_RegisterInterface>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d001      	beq.n	8007fe4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007fe0:	f7f8 fdde 	bl	8000ba0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007fe4:	4805      	ldr	r0, [pc, #20]	; (8007ffc <MX_USB_DEVICE_Init+0x54>)
 8007fe6:	f7fe fd53 	bl	8006a90 <USBD_Start>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ff0:	f7f8 fdd6 	bl	8000ba0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ff4:	bf00      	nop
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	200000f4 	.word	0x200000f4
 8007ffc:	200002bc 	.word	0x200002bc
 8008000:	20000060 	.word	0x20000060
 8008004:	200000e0 	.word	0x200000e0

08008008 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800800c:	2200      	movs	r2, #0
 800800e:	4905      	ldr	r1, [pc, #20]	; (8008024 <CDC_Init_FS+0x1c>)
 8008010:	4805      	ldr	r0, [pc, #20]	; (8008028 <CDC_Init_FS+0x20>)
 8008012:	f7fe fc1b 	bl	800684c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008016:	4905      	ldr	r1, [pc, #20]	; (800802c <CDC_Init_FS+0x24>)
 8008018:	4803      	ldr	r0, [pc, #12]	; (8008028 <CDC_Init_FS+0x20>)
 800801a:	f7fe fc39 	bl	8006890 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800801e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008020:	4618      	mov	r0, r3
 8008022:	bd80      	pop	{r7, pc}
 8008024:	20000d98 	.word	0x20000d98
 8008028:	200002bc 	.word	0x200002bc
 800802c:	20000598 	.word	0x20000598

08008030 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008030:	b480      	push	{r7}
 8008032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008034:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008036:	4618      	mov	r0, r3
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	4603      	mov	r3, r0
 8008048:	6039      	str	r1, [r7, #0]
 800804a:	71fb      	strb	r3, [r7, #7]
 800804c:	4613      	mov	r3, r2
 800804e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008050:	79fb      	ldrb	r3, [r7, #7]
 8008052:	2b23      	cmp	r3, #35	; 0x23
 8008054:	d84a      	bhi.n	80080ec <CDC_Control_FS+0xac>
 8008056:	a201      	add	r2, pc, #4	; (adr r2, 800805c <CDC_Control_FS+0x1c>)
 8008058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805c:	080080ed 	.word	0x080080ed
 8008060:	080080ed 	.word	0x080080ed
 8008064:	080080ed 	.word	0x080080ed
 8008068:	080080ed 	.word	0x080080ed
 800806c:	080080ed 	.word	0x080080ed
 8008070:	080080ed 	.word	0x080080ed
 8008074:	080080ed 	.word	0x080080ed
 8008078:	080080ed 	.word	0x080080ed
 800807c:	080080ed 	.word	0x080080ed
 8008080:	080080ed 	.word	0x080080ed
 8008084:	080080ed 	.word	0x080080ed
 8008088:	080080ed 	.word	0x080080ed
 800808c:	080080ed 	.word	0x080080ed
 8008090:	080080ed 	.word	0x080080ed
 8008094:	080080ed 	.word	0x080080ed
 8008098:	080080ed 	.word	0x080080ed
 800809c:	080080ed 	.word	0x080080ed
 80080a0:	080080ed 	.word	0x080080ed
 80080a4:	080080ed 	.word	0x080080ed
 80080a8:	080080ed 	.word	0x080080ed
 80080ac:	080080ed 	.word	0x080080ed
 80080b0:	080080ed 	.word	0x080080ed
 80080b4:	080080ed 	.word	0x080080ed
 80080b8:	080080ed 	.word	0x080080ed
 80080bc:	080080ed 	.word	0x080080ed
 80080c0:	080080ed 	.word	0x080080ed
 80080c4:	080080ed 	.word	0x080080ed
 80080c8:	080080ed 	.word	0x080080ed
 80080cc:	080080ed 	.word	0x080080ed
 80080d0:	080080ed 	.word	0x080080ed
 80080d4:	080080ed 	.word	0x080080ed
 80080d8:	080080ed 	.word	0x080080ed
 80080dc:	080080ed 	.word	0x080080ed
 80080e0:	080080ed 	.word	0x080080ed
 80080e4:	080080ed 	.word	0x080080ed
 80080e8:	080080ed 	.word	0x080080ed
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80080ec:	bf00      	nop
  }

  return (USBD_OK);
 80080ee:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	4805      	ldr	r0, [pc, #20]	; (8008120 <CDC_Receive_FS+0x24>)
 800810a:	f7fe fbc1 	bl	8006890 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800810e:	4804      	ldr	r0, [pc, #16]	; (8008120 <CDC_Receive_FS+0x24>)
 8008110:	f7fe fc22 	bl	8006958 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008114:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008116:	4618      	mov	r0, r3
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	200002bc 	.word	0x200002bc

08008124 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008134:	4b0d      	ldr	r3, [pc, #52]	; (800816c <CDC_Transmit_FS+0x48>)
 8008136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800813a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008146:	2301      	movs	r3, #1
 8008148:	e00b      	b.n	8008162 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800814a:	887b      	ldrh	r3, [r7, #2]
 800814c:	461a      	mov	r2, r3
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	4806      	ldr	r0, [pc, #24]	; (800816c <CDC_Transmit_FS+0x48>)
 8008152:	f7fe fb7b 	bl	800684c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008156:	4805      	ldr	r0, [pc, #20]	; (800816c <CDC_Transmit_FS+0x48>)
 8008158:	f7fe fbb8 	bl	80068cc <USBD_CDC_TransmitPacket>
 800815c:	4603      	mov	r3, r0
 800815e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008160:	7bfb      	ldrb	r3, [r7, #15]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	200002bc 	.word	0x200002bc

08008170 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008170:	b480      	push	{r7}
 8008172:	b087      	sub	sp, #28
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800817e:	2300      	movs	r3, #0
 8008180:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008182:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008186:	4618      	mov	r0, r3
 8008188:	371c      	adds	r7, #28
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
	...

08008194 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	2212      	movs	r2, #18
 80081a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80081a6:	4b03      	ldr	r3, [pc, #12]	; (80081b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	20000110 	.word	0x20000110

080081b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	4603      	mov	r3, r0
 80081c0:	6039      	str	r1, [r7, #0]
 80081c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	2204      	movs	r2, #4
 80081c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081ca:	4b03      	ldr	r3, [pc, #12]	; (80081d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	20000124 	.word	0x20000124

080081dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	6039      	str	r1, [r7, #0]
 80081e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081e8:	79fb      	ldrb	r3, [r7, #7]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d105      	bne.n	80081fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	4907      	ldr	r1, [pc, #28]	; (8008210 <USBD_FS_ProductStrDescriptor+0x34>)
 80081f2:	4808      	ldr	r0, [pc, #32]	; (8008214 <USBD_FS_ProductStrDescriptor+0x38>)
 80081f4:	f7ff fdf8 	bl	8007de8 <USBD_GetString>
 80081f8:	e004      	b.n	8008204 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	4904      	ldr	r1, [pc, #16]	; (8008210 <USBD_FS_ProductStrDescriptor+0x34>)
 80081fe:	4805      	ldr	r0, [pc, #20]	; (8008214 <USBD_FS_ProductStrDescriptor+0x38>)
 8008200:	f7ff fdf2 	bl	8007de8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008204:	4b02      	ldr	r3, [pc, #8]	; (8008210 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	20001598 	.word	0x20001598
 8008214:	08008ab8 	.word	0x08008ab8

08008218 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	4603      	mov	r3, r0
 8008220:	6039      	str	r1, [r7, #0]
 8008222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	4904      	ldr	r1, [pc, #16]	; (8008238 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008228:	4804      	ldr	r0, [pc, #16]	; (800823c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800822a:	f7ff fddd 	bl	8007de8 <USBD_GetString>
  return USBD_StrDesc;
 800822e:	4b02      	ldr	r3, [pc, #8]	; (8008238 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	20001598 	.word	0x20001598
 800823c:	08008ad0 	.word	0x08008ad0

08008240 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	4603      	mov	r3, r0
 8008248:	6039      	str	r1, [r7, #0]
 800824a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	221a      	movs	r2, #26
 8008250:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008252:	f000 f843 	bl	80082dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008256:	4b02      	ldr	r3, [pc, #8]	; (8008260 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	20000128 	.word	0x20000128

08008264 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	6039      	str	r1, [r7, #0]
 800826e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d105      	bne.n	8008282 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	4907      	ldr	r1, [pc, #28]	; (8008298 <USBD_FS_ConfigStrDescriptor+0x34>)
 800827a:	4808      	ldr	r0, [pc, #32]	; (800829c <USBD_FS_ConfigStrDescriptor+0x38>)
 800827c:	f7ff fdb4 	bl	8007de8 <USBD_GetString>
 8008280:	e004      	b.n	800828c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	4904      	ldr	r1, [pc, #16]	; (8008298 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008286:	4805      	ldr	r0, [pc, #20]	; (800829c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008288:	f7ff fdae 	bl	8007de8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800828c:	4b02      	ldr	r3, [pc, #8]	; (8008298 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800828e:	4618      	mov	r0, r3
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	20001598 	.word	0x20001598
 800829c:	08008ae4 	.word	0x08008ae4

080082a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	6039      	str	r1, [r7, #0]
 80082aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082ac:	79fb      	ldrb	r3, [r7, #7]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d105      	bne.n	80082be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	4907      	ldr	r1, [pc, #28]	; (80082d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082b6:	4808      	ldr	r0, [pc, #32]	; (80082d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082b8:	f7ff fd96 	bl	8007de8 <USBD_GetString>
 80082bc:	e004      	b.n	80082c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	4904      	ldr	r1, [pc, #16]	; (80082d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082c2:	4805      	ldr	r0, [pc, #20]	; (80082d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082c4:	f7ff fd90 	bl	8007de8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082c8:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20001598 	.word	0x20001598
 80082d8:	08008af0 	.word	0x08008af0

080082dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80082e2:	4b0f      	ldr	r3, [pc, #60]	; (8008320 <Get_SerialNum+0x44>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80082e8:	4b0e      	ldr	r3, [pc, #56]	; (8008324 <Get_SerialNum+0x48>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80082ee:	4b0e      	ldr	r3, [pc, #56]	; (8008328 <Get_SerialNum+0x4c>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4413      	add	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d009      	beq.n	8008316 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008302:	2208      	movs	r2, #8
 8008304:	4909      	ldr	r1, [pc, #36]	; (800832c <Get_SerialNum+0x50>)
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f000 f814 	bl	8008334 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800830c:	2204      	movs	r2, #4
 800830e:	4908      	ldr	r1, [pc, #32]	; (8008330 <Get_SerialNum+0x54>)
 8008310:	68b8      	ldr	r0, [r7, #8]
 8008312:	f000 f80f 	bl	8008334 <IntToUnicode>
  }
}
 8008316:	bf00      	nop
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	1fff7a10 	.word	0x1fff7a10
 8008324:	1fff7a14 	.word	0x1fff7a14
 8008328:	1fff7a18 	.word	0x1fff7a18
 800832c:	2000012a 	.word	0x2000012a
 8008330:	2000013a 	.word	0x2000013a

08008334 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008334:	b480      	push	{r7}
 8008336:	b087      	sub	sp, #28
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	4613      	mov	r3, r2
 8008340:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008342:	2300      	movs	r3, #0
 8008344:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008346:	2300      	movs	r3, #0
 8008348:	75fb      	strb	r3, [r7, #23]
 800834a:	e027      	b.n	800839c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	0f1b      	lsrs	r3, r3, #28
 8008350:	2b09      	cmp	r3, #9
 8008352:	d80b      	bhi.n	800836c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	0f1b      	lsrs	r3, r3, #28
 8008358:	b2da      	uxtb	r2, r3
 800835a:	7dfb      	ldrb	r3, [r7, #23]
 800835c:	005b      	lsls	r3, r3, #1
 800835e:	4619      	mov	r1, r3
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	440b      	add	r3, r1
 8008364:	3230      	adds	r2, #48	; 0x30
 8008366:	b2d2      	uxtb	r2, r2
 8008368:	701a      	strb	r2, [r3, #0]
 800836a:	e00a      	b.n	8008382 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	0f1b      	lsrs	r3, r3, #28
 8008370:	b2da      	uxtb	r2, r3
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	005b      	lsls	r3, r3, #1
 8008376:	4619      	mov	r1, r3
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	440b      	add	r3, r1
 800837c:	3237      	adds	r2, #55	; 0x37
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	011b      	lsls	r3, r3, #4
 8008386:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008388:	7dfb      	ldrb	r3, [r7, #23]
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	3301      	adds	r3, #1
 800838e:	68ba      	ldr	r2, [r7, #8]
 8008390:	4413      	add	r3, r2
 8008392:	2200      	movs	r2, #0
 8008394:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	3301      	adds	r3, #1
 800839a:	75fb      	strb	r3, [r7, #23]
 800839c:	7dfa      	ldrb	r2, [r7, #23]
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d3d3      	bcc.n	800834c <IntToUnicode+0x18>
  }
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop
 80083a8:	371c      	adds	r7, #28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
	...

080083b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b08a      	sub	sp, #40	; 0x28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083bc:	f107 0314 	add.w	r3, r7, #20
 80083c0:	2200      	movs	r2, #0
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	605a      	str	r2, [r3, #4]
 80083c6:	609a      	str	r2, [r3, #8]
 80083c8:	60da      	str	r2, [r3, #12]
 80083ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083d4:	d147      	bne.n	8008466 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083d6:	2300      	movs	r3, #0
 80083d8:	613b      	str	r3, [r7, #16]
 80083da:	4b25      	ldr	r3, [pc, #148]	; (8008470 <HAL_PCD_MspInit+0xbc>)
 80083dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083de:	4a24      	ldr	r2, [pc, #144]	; (8008470 <HAL_PCD_MspInit+0xbc>)
 80083e0:	f043 0301 	orr.w	r3, r3, #1
 80083e4:	6313      	str	r3, [r2, #48]	; 0x30
 80083e6:	4b22      	ldr	r3, [pc, #136]	; (8008470 <HAL_PCD_MspInit+0xbc>)
 80083e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	613b      	str	r3, [r7, #16]
 80083f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80083f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083fc:	2300      	movs	r3, #0
 80083fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008400:	f107 0314 	add.w	r3, r7, #20
 8008404:	4619      	mov	r1, r3
 8008406:	481b      	ldr	r0, [pc, #108]	; (8008474 <HAL_PCD_MspInit+0xc0>)
 8008408:	f7f8 ff50 	bl	80012ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800840c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008412:	2302      	movs	r3, #2
 8008414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008416:	2300      	movs	r3, #0
 8008418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800841a:	2300      	movs	r3, #0
 800841c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800841e:	230a      	movs	r3, #10
 8008420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008422:	f107 0314 	add.w	r3, r7, #20
 8008426:	4619      	mov	r1, r3
 8008428:	4812      	ldr	r0, [pc, #72]	; (8008474 <HAL_PCD_MspInit+0xc0>)
 800842a:	f7f8 ff3f 	bl	80012ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800842e:	4b10      	ldr	r3, [pc, #64]	; (8008470 <HAL_PCD_MspInit+0xbc>)
 8008430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008432:	4a0f      	ldr	r2, [pc, #60]	; (8008470 <HAL_PCD_MspInit+0xbc>)
 8008434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008438:	6353      	str	r3, [r2, #52]	; 0x34
 800843a:	2300      	movs	r3, #0
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	4b0c      	ldr	r3, [pc, #48]	; (8008470 <HAL_PCD_MspInit+0xbc>)
 8008440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008442:	4a0b      	ldr	r2, [pc, #44]	; (8008470 <HAL_PCD_MspInit+0xbc>)
 8008444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008448:	6453      	str	r3, [r2, #68]	; 0x44
 800844a:	4b09      	ldr	r3, [pc, #36]	; (8008470 <HAL_PCD_MspInit+0xbc>)
 800844c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800844e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008456:	2200      	movs	r2, #0
 8008458:	2100      	movs	r1, #0
 800845a:	2043      	movs	r0, #67	; 0x43
 800845c:	f7f8 feef 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008460:	2043      	movs	r0, #67	; 0x43
 8008462:	f7f8 ff08 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008466:	bf00      	nop
 8008468:	3728      	adds	r7, #40	; 0x28
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	40023800 	.word	0x40023800
 8008474:	40020000 	.word	0x40020000

08008478 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800848c:	4619      	mov	r1, r3
 800848e:	4610      	mov	r0, r2
 8008490:	f7fe fb4b 	bl	8006b2a <USBD_LL_SetupStage>
}
 8008494:	bf00      	nop
 8008496:	3708      	adds	r7, #8
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b082      	sub	sp, #8
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	460b      	mov	r3, r1
 80084a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80084ae:	78fa      	ldrb	r2, [r7, #3]
 80084b0:	6879      	ldr	r1, [r7, #4]
 80084b2:	4613      	mov	r3, r2
 80084b4:	00db      	lsls	r3, r3, #3
 80084b6:	4413      	add	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	440b      	add	r3, r1
 80084bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	78fb      	ldrb	r3, [r7, #3]
 80084c4:	4619      	mov	r1, r3
 80084c6:	f7fe fb85 	bl	8006bd4 <USBD_LL_DataOutStage>
}
 80084ca:	bf00      	nop
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b082      	sub	sp, #8
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	460b      	mov	r3, r1
 80084dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80084e4:	78fa      	ldrb	r2, [r7, #3]
 80084e6:	6879      	ldr	r1, [r7, #4]
 80084e8:	4613      	mov	r3, r2
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	440b      	add	r3, r1
 80084f2:	334c      	adds	r3, #76	; 0x4c
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	78fb      	ldrb	r3, [r7, #3]
 80084f8:	4619      	mov	r1, r3
 80084fa:	f7fe fc1e 	bl	8006d3a <USBD_LL_DataInStage>
}
 80084fe:	bf00      	nop
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b082      	sub	sp, #8
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008514:	4618      	mov	r0, r3
 8008516:	f7fe fd52 	bl	8006fbe <USBD_LL_SOF>
}
 800851a:	bf00      	nop
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800852a:	2301      	movs	r3, #1
 800852c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d102      	bne.n	800853c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008536:	2300      	movs	r3, #0
 8008538:	73fb      	strb	r3, [r7, #15]
 800853a:	e008      	b.n	800854e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	2b02      	cmp	r3, #2
 8008542:	d102      	bne.n	800854a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008544:	2301      	movs	r3, #1
 8008546:	73fb      	strb	r3, [r7, #15]
 8008548:	e001      	b.n	800854e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800854a:	f7f8 fb29 	bl	8000ba0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008554:	7bfa      	ldrb	r2, [r7, #15]
 8008556:	4611      	mov	r1, r2
 8008558:	4618      	mov	r0, r3
 800855a:	f7fe fcf2 	bl	8006f42 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008564:	4618      	mov	r0, r3
 8008566:	f7fe fc9a 	bl	8006e9e <USBD_LL_Reset>
}
 800856a:	bf00      	nop
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe fced 	bl	8006f62 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	6812      	ldr	r2, [r2, #0]
 8008596:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800859a:	f043 0301 	orr.w	r3, r3, #1
 800859e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d005      	beq.n	80085b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085a8:	4b04      	ldr	r3, [pc, #16]	; (80085bc <HAL_PCD_SuspendCallback+0x48>)
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	4a03      	ldr	r2, [pc, #12]	; (80085bc <HAL_PCD_SuspendCallback+0x48>)
 80085ae:	f043 0306 	orr.w	r3, r3, #6
 80085b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80085b4:	bf00      	nop
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	e000ed00 	.word	0xe000ed00

080085c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe fcdd 	bl	8006f8e <USBD_LL_Resume>
}
 80085d4:	bf00      	nop
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80085ee:	78fa      	ldrb	r2, [r7, #3]
 80085f0:	4611      	mov	r1, r2
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fe fd35 	bl	8007062 <USBD_LL_IsoOUTIncomplete>
}
 80085f8:	bf00      	nop
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008612:	78fa      	ldrb	r2, [r7, #3]
 8008614:	4611      	mov	r1, r2
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe fcf1 	bl	8006ffe <USBD_LL_IsoINIncomplete>
}
 800861c:	bf00      	nop
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008632:	4618      	mov	r0, r3
 8008634:	f7fe fd47 	bl	80070c6 <USBD_LL_DevConnected>
}
 8008638:	bf00      	nop
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe fd44 	bl	80070dc <USBD_LL_DevDisconnected>
}
 8008654:	bf00      	nop
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d13c      	bne.n	80086e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800866c:	4a20      	ldr	r2, [pc, #128]	; (80086f0 <USBD_LL_Init+0x94>)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a1e      	ldr	r2, [pc, #120]	; (80086f0 <USBD_LL_Init+0x94>)
 8008678:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800867c:	4b1c      	ldr	r3, [pc, #112]	; (80086f0 <USBD_LL_Init+0x94>)
 800867e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008682:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008684:	4b1a      	ldr	r3, [pc, #104]	; (80086f0 <USBD_LL_Init+0x94>)
 8008686:	2204      	movs	r2, #4
 8008688:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800868a:	4b19      	ldr	r3, [pc, #100]	; (80086f0 <USBD_LL_Init+0x94>)
 800868c:	2202      	movs	r2, #2
 800868e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008690:	4b17      	ldr	r3, [pc, #92]	; (80086f0 <USBD_LL_Init+0x94>)
 8008692:	2200      	movs	r2, #0
 8008694:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008696:	4b16      	ldr	r3, [pc, #88]	; (80086f0 <USBD_LL_Init+0x94>)
 8008698:	2202      	movs	r2, #2
 800869a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800869c:	4b14      	ldr	r3, [pc, #80]	; (80086f0 <USBD_LL_Init+0x94>)
 800869e:	2200      	movs	r2, #0
 80086a0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80086a2:	4b13      	ldr	r3, [pc, #76]	; (80086f0 <USBD_LL_Init+0x94>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80086a8:	4b11      	ldr	r3, [pc, #68]	; (80086f0 <USBD_LL_Init+0x94>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80086ae:	4b10      	ldr	r3, [pc, #64]	; (80086f0 <USBD_LL_Init+0x94>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80086b4:	4b0e      	ldr	r3, [pc, #56]	; (80086f0 <USBD_LL_Init+0x94>)
 80086b6:	2200      	movs	r2, #0
 80086b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80086ba:	480d      	ldr	r0, [pc, #52]	; (80086f0 <USBD_LL_Init+0x94>)
 80086bc:	f7f9 fdc0 	bl	8002240 <HAL_PCD_Init>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80086c6:	f7f8 fa6b 	bl	8000ba0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80086ca:	2180      	movs	r1, #128	; 0x80
 80086cc:	4808      	ldr	r0, [pc, #32]	; (80086f0 <USBD_LL_Init+0x94>)
 80086ce:	f7fb f818 	bl	8003702 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80086d2:	2240      	movs	r2, #64	; 0x40
 80086d4:	2100      	movs	r1, #0
 80086d6:	4806      	ldr	r0, [pc, #24]	; (80086f0 <USBD_LL_Init+0x94>)
 80086d8:	f7fa ffcc 	bl	8003674 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80086dc:	2280      	movs	r2, #128	; 0x80
 80086de:	2101      	movs	r1, #1
 80086e0:	4803      	ldr	r0, [pc, #12]	; (80086f0 <USBD_LL_Init+0x94>)
 80086e2:	f7fa ffc7 	bl	8003674 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	3708      	adds	r7, #8
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	20001798 	.word	0x20001798

080086f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008700:	2300      	movs	r3, #0
 8008702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800870a:	4618      	mov	r0, r3
 800870c:	f7f9 feb5 	bl	800247a <HAL_PCD_Start>
 8008710:	4603      	mov	r3, r0
 8008712:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008714:	7bfb      	ldrb	r3, [r7, #15]
 8008716:	4618      	mov	r0, r3
 8008718:	f000 f942 	bl	80089a0 <USBD_Get_USB_Status>
 800871c:	4603      	mov	r3, r0
 800871e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008720:	7bbb      	ldrb	r3, [r7, #14]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	4608      	mov	r0, r1
 8008734:	4611      	mov	r1, r2
 8008736:	461a      	mov	r2, r3
 8008738:	4603      	mov	r3, r0
 800873a:	70fb      	strb	r3, [r7, #3]
 800873c:	460b      	mov	r3, r1
 800873e:	70bb      	strb	r3, [r7, #2]
 8008740:	4613      	mov	r3, r2
 8008742:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008752:	78bb      	ldrb	r3, [r7, #2]
 8008754:	883a      	ldrh	r2, [r7, #0]
 8008756:	78f9      	ldrb	r1, [r7, #3]
 8008758:	f7fa fb86 	bl	8002e68 <HAL_PCD_EP_Open>
 800875c:	4603      	mov	r3, r0
 800875e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008760:	7bfb      	ldrb	r3, [r7, #15]
 8008762:	4618      	mov	r0, r3
 8008764:	f000 f91c 	bl	80089a0 <USBD_Get_USB_Status>
 8008768:	4603      	mov	r3, r0
 800876a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800876c:	7bbb      	ldrb	r3, [r7, #14]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	460b      	mov	r3, r1
 8008780:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008786:	2300      	movs	r3, #0
 8008788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008790:	78fa      	ldrb	r2, [r7, #3]
 8008792:	4611      	mov	r1, r2
 8008794:	4618      	mov	r0, r3
 8008796:	f7fa fbcf 	bl	8002f38 <HAL_PCD_EP_Close>
 800879a:	4603      	mov	r3, r0
 800879c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 f8fd 	bl	80089a0 <USBD_Get_USB_Status>
 80087a6:	4603      	mov	r3, r0
 80087a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	460b      	mov	r3, r1
 80087be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087ce:	78fa      	ldrb	r2, [r7, #3]
 80087d0:	4611      	mov	r1, r2
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fa fca7 	bl	8003126 <HAL_PCD_EP_SetStall>
 80087d8:	4603      	mov	r3, r0
 80087da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 f8de 	bl	80089a0 <USBD_Get_USB_Status>
 80087e4:	4603      	mov	r3, r0
 80087e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b084      	sub	sp, #16
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	460b      	mov	r3, r1
 80087fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008802:	2300      	movs	r3, #0
 8008804:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800880c:	78fa      	ldrb	r2, [r7, #3]
 800880e:	4611      	mov	r1, r2
 8008810:	4618      	mov	r0, r3
 8008812:	f7fa fcec 	bl	80031ee <HAL_PCD_EP_ClrStall>
 8008816:	4603      	mov	r3, r0
 8008818:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	4618      	mov	r0, r3
 800881e:	f000 f8bf 	bl	80089a0 <USBD_Get_USB_Status>
 8008822:	4603      	mov	r3, r0
 8008824:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008826:	7bbb      	ldrb	r3, [r7, #14]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3710      	adds	r7, #16
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008830:	b480      	push	{r7}
 8008832:	b085      	sub	sp, #20
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008842:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008844:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008848:	2b00      	cmp	r3, #0
 800884a:	da0b      	bge.n	8008864 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800884c:	78fb      	ldrb	r3, [r7, #3]
 800884e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008852:	68f9      	ldr	r1, [r7, #12]
 8008854:	4613      	mov	r3, r2
 8008856:	00db      	lsls	r3, r3, #3
 8008858:	4413      	add	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	440b      	add	r3, r1
 800885e:	333e      	adds	r3, #62	; 0x3e
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	e00b      	b.n	800887c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008864:	78fb      	ldrb	r3, [r7, #3]
 8008866:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800886a:	68f9      	ldr	r1, [r7, #12]
 800886c:	4613      	mov	r3, r2
 800886e:	00db      	lsls	r3, r3, #3
 8008870:	4413      	add	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	440b      	add	r3, r1
 8008876:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800887a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800887c:	4618      	mov	r0, r3
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088a2:	78fa      	ldrb	r2, [r7, #3]
 80088a4:	4611      	mov	r1, r2
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fa fab9 	bl	8002e1e <HAL_PCD_SetAddress>
 80088ac:	4603      	mov	r3, r0
 80088ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
 80088b2:	4618      	mov	r0, r3
 80088b4:	f000 f874 	bl	80089a0 <USBD_Get_USB_Status>
 80088b8:	4603      	mov	r3, r0
 80088ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b086      	sub	sp, #24
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	607a      	str	r2, [r7, #4]
 80088d0:	603b      	str	r3, [r7, #0]
 80088d2:	460b      	mov	r3, r1
 80088d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d6:	2300      	movs	r3, #0
 80088d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088da:	2300      	movs	r3, #0
 80088dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80088e4:	7af9      	ldrb	r1, [r7, #11]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	f7fa fbd2 	bl	8003092 <HAL_PCD_EP_Transmit>
 80088ee:	4603      	mov	r3, r0
 80088f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088f2:	7dfb      	ldrb	r3, [r7, #23]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 f853 	bl	80089a0 <USBD_Get_USB_Status>
 80088fa:	4603      	mov	r3, r0
 80088fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	607a      	str	r2, [r7, #4]
 8008912:	603b      	str	r3, [r7, #0]
 8008914:	460b      	mov	r3, r1
 8008916:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800891c:	2300      	movs	r3, #0
 800891e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008926:	7af9      	ldrb	r1, [r7, #11]
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	f7fa fb4e 	bl	8002fcc <HAL_PCD_EP_Receive>
 8008930:	4603      	mov	r3, r0
 8008932:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008934:	7dfb      	ldrb	r3, [r7, #23]
 8008936:	4618      	mov	r0, r3
 8008938:	f000 f832 	bl	80089a0 <USBD_Get_USB_Status>
 800893c:	4603      	mov	r3, r0
 800893e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008940:	7dbb      	ldrb	r3, [r7, #22]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3718      	adds	r7, #24
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b082      	sub	sp, #8
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	460b      	mov	r3, r1
 8008954:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800895c:	78fa      	ldrb	r2, [r7, #3]
 800895e:	4611      	mov	r1, r2
 8008960:	4618      	mov	r0, r3
 8008962:	f7fa fb7e 	bl	8003062 <HAL_PCD_EP_GetRxCount>
 8008966:	4603      	mov	r3, r0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008978:	4b03      	ldr	r3, [pc, #12]	; (8008988 <USBD_static_malloc+0x18>)
}
 800897a:	4618      	mov	r0, r3
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	20001ca4 	.word	0x20001ca4

0800898c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]

}
 8008994:	bf00      	nop
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	4603      	mov	r3, r0
 80089a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80089ae:	79fb      	ldrb	r3, [r7, #7]
 80089b0:	2b03      	cmp	r3, #3
 80089b2:	d817      	bhi.n	80089e4 <USBD_Get_USB_Status+0x44>
 80089b4:	a201      	add	r2, pc, #4	; (adr r2, 80089bc <USBD_Get_USB_Status+0x1c>)
 80089b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ba:	bf00      	nop
 80089bc:	080089cd 	.word	0x080089cd
 80089c0:	080089d3 	.word	0x080089d3
 80089c4:	080089d9 	.word	0x080089d9
 80089c8:	080089df 	.word	0x080089df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73fb      	strb	r3, [r7, #15]
    break;
 80089d0:	e00b      	b.n	80089ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089d2:	2303      	movs	r3, #3
 80089d4:	73fb      	strb	r3, [r7, #15]
    break;
 80089d6:	e008      	b.n	80089ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089d8:	2301      	movs	r3, #1
 80089da:	73fb      	strb	r3, [r7, #15]
    break;
 80089dc:	e005      	b.n	80089ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089de:	2303      	movs	r3, #3
 80089e0:	73fb      	strb	r3, [r7, #15]
    break;
 80089e2:	e002      	b.n	80089ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80089e4:	2303      	movs	r3, #3
 80089e6:	73fb      	strb	r3, [r7, #15]
    break;
 80089e8:	bf00      	nop
  }
  return usb_status;
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <__libc_init_array>:
 80089f8:	b570      	push	{r4, r5, r6, lr}
 80089fa:	4d0d      	ldr	r5, [pc, #52]	; (8008a30 <__libc_init_array+0x38>)
 80089fc:	4c0d      	ldr	r4, [pc, #52]	; (8008a34 <__libc_init_array+0x3c>)
 80089fe:	1b64      	subs	r4, r4, r5
 8008a00:	10a4      	asrs	r4, r4, #2
 8008a02:	2600      	movs	r6, #0
 8008a04:	42a6      	cmp	r6, r4
 8008a06:	d109      	bne.n	8008a1c <__libc_init_array+0x24>
 8008a08:	4d0b      	ldr	r5, [pc, #44]	; (8008a38 <__libc_init_array+0x40>)
 8008a0a:	4c0c      	ldr	r4, [pc, #48]	; (8008a3c <__libc_init_array+0x44>)
 8008a0c:	f000 f820 	bl	8008a50 <_init>
 8008a10:	1b64      	subs	r4, r4, r5
 8008a12:	10a4      	asrs	r4, r4, #2
 8008a14:	2600      	movs	r6, #0
 8008a16:	42a6      	cmp	r6, r4
 8008a18:	d105      	bne.n	8008a26 <__libc_init_array+0x2e>
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}
 8008a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a20:	4798      	blx	r3
 8008a22:	3601      	adds	r6, #1
 8008a24:	e7ee      	b.n	8008a04 <__libc_init_array+0xc>
 8008a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a2a:	4798      	blx	r3
 8008a2c:	3601      	adds	r6, #1
 8008a2e:	e7f2      	b.n	8008a16 <__libc_init_array+0x1e>
 8008a30:	08008b20 	.word	0x08008b20
 8008a34:	08008b20 	.word	0x08008b20
 8008a38:	08008b20 	.word	0x08008b20
 8008a3c:	08008b24 	.word	0x08008b24

08008a40 <memset>:
 8008a40:	4402      	add	r2, r0
 8008a42:	4603      	mov	r3, r0
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d100      	bne.n	8008a4a <memset+0xa>
 8008a48:	4770      	bx	lr
 8008a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a4e:	e7f9      	b.n	8008a44 <memset+0x4>

08008a50 <_init>:
 8008a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a52:	bf00      	nop
 8008a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a56:	bc08      	pop	{r3}
 8008a58:	469e      	mov	lr, r3
 8008a5a:	4770      	bx	lr

08008a5c <_fini>:
 8008a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5e:	bf00      	nop
 8008a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a62:	bc08      	pop	{r3}
 8008a64:	469e      	mov	lr, r3
 8008a66:	4770      	bx	lr
